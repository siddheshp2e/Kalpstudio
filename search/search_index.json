{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to the Kalp Studio Docs <p>Dive headfirst into Web 3.0 development with Kalp Studio! Our user-friendly documentation equips you with everything you need to unlock the potential of the Kalp Blockchain. </p> <ul> <li> <p> Introduction</p> <p>Kalp studio <code>Introduction</code></p> <p> Introduction</p> </li> <li> <p> Getting started with kalp studio</p> <p>Start your Blockchain journey with <code>kalp Studio</code> and <code>Deploy</code> your smart contracts and running in minutes.</p> <p> Getting started</p> </li> <li> <p> Dev documentation</p> <p><code>Web 3.0</code> development with Kalp Studio's intuitive tools and resources, designed to empower developers of all skill levels.</p> <p> Dev documentation</p> </li> <li> <p> Release notes</p> <p><code>Release notes</code> for kalp studio </p> <p> Release notes</p> </li> <li> <p> Kalp studio whitepaper</p> <p>Introducing the <code>Kalp Studio</code> whitepaper</p> <p> Whitepaper</p> </li> <li> <p> Help Center</p> <p><code>How to get started</code> with Kalp Studio</p> <p> Help center</p> </li> <li> <p> Blog post &amp; Articles</p> <p>Latest <code>Blog post &amp; Articles</code>.</p> <p> Blog post &amp; Articles</p> </li> <li> <p> kalp studio videos</p> <p>Kalp studio <code>Video</code> tutorials</p> <p> Video tutorials</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/","title":"Kalp Golang SDK","text":"<p>This documentation provides an in-depth guide to the Kalp Software Development Kit (SDK), tailored for developers aiming to interact with the Kalp blockchain network.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_1","title":"Kalp Golang SDK","text":"<p>Overview</p> <p>The Kalp SDK is engineered to streamline the development process for Kalp blockchain applications. It offers a suite of tools and functionalities that enable developers to efficiently read and write data, manage transactions, perform KYC checks, track payments for payable contracts, and enhance debugging through logger functionality.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_2","title":"Kalp Golang SDK","text":"<p>Key Features</p> <p>The Kalp SDK empowers developers with a robust suite of functionalities designed to simplify and enhance smart contract interaction:</p> <ul> <li> <p>Data Management:: Key-Value Storage: Efficiently store and retrieve data on the blockchain using a key-value pair structure. This functionality allows persistent data management within your smart contracts.</p> </li> <li> <p>Transaction Handling:: Comprehensive Transaction Management: Seamlessly submit, query, and retrieve the history of transactions associated with your smart contracts. This comprehensive suite of tools streamlines transaction management workflows.</p> </li> <li> <p>KYC Integration:: Integrated KYC Checks: Enforce compliance with regulatory requirements or implement access control mechanisms by integrating KYC verification processes directly within your smart contracts.</p> </li> <li> <p>Payment Tracking:: Streamlined Payment Monitoring: Effortlessly track payments initiated through your smart contracts, particularly within the context of payable contracts. This functionality facilitates accurate record-keeping and financial reconciliation.</p> </li> <li> <p>Debugging Support:: Enhanced Logging: Gain valuable insights into the behavior and execution of your smart contracts through comprehensive logging capabilities. This functionality aids in debugging and troubleshooting potential issues.</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_3","title":"Kalp Golang SDK","text":"<p>Prerequisites</p> <p>Before you begin, ensure you have the following installed:</p> <p>Go Programming Language: Kalp blockchain contracts are written in Go. Make sure you have Go installed on your system. Download Go.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_4","title":"Kalp Golang SDK","text":"<p>Kalp SDK Installation</p> <p>Integrating the Kalp SDK into your project is a breeze. To install the Kalp-SDK, use the following Go command:</p> <p>Copy</p> <pre><code>go get -u github.com/p2eengineering/kalp-sdk-public/kalpsdk\n</code></pre> <p>This command utilizes the <code>go get</code> package management tool within Go to download and install the Kalp SDK from the specified GitHub repository. The <code>-u</code> flag ensures you receive the latest available version.</p> <p>Done! The Kalp SDK is ready to be imported and utilized within your Go project, empowering you to interact with Kalp smart contracts and leverage the platform's functionalities.</p> <p>Note__: The SDK is compatible with Go version 1.19__. For newer versions of Go, update your <code>_go.mod_</code> file to specify version 1.19.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_5","title":"Kalp Golang SDK","text":"<p>Examples</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_6","title":"Kalp Golang SDK","text":"<p>Creating a Contract</p> <p>Define a Go struct to represent your contract and embed <code>kalpsdk.Contract</code> for base functionalities.</p> <p>Copy</p> <pre><code>type MyContract struct {\n    kalpsdk.Contract\n}\n</code></pre> <p>Struct Creation: Begin by defining a Go struct to represent your smart contract. This <code>struct</code>will serve as the foundation for encapsulating your contract's state variables, functions, and other relevant attributes.</p> <p>Embedding <code>**kalpsdk.Contract**</code>: To leverage the core functionalities provided by the Kalp SDK, embed the <code>kalpsdk.Contract</code> type within your custom contract <code>struct</code>. This grants your contract access to essential features like transaction management, key-value storage, and more.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_7","title":"Kalp Golang SDK","text":"<p>Implementing the Contract Interface</p> <p>Implement <code>Init</code> and <code>Invoke</code> methods for contract initialization and invocation.</p> <p>Copy</p> <pre><code> func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n    // Initialization logic\n    return nil\n}\n\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n    // Invocation logic\n    return nil\n</code></pre> <p>To breathe functionality into your smart contract, implement the following crucial methods:</p> <ul> <li> <p><code>**Init**</code> Method:</p> <ul> <li> <p>Purpose: Responsible for initializing your contract's state variables and performing any actions required upon first deployment to the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error</code></p> </li> </ul> </li> <li> <p><code>**Invoke**</code> Method:</p> <ul> <li> <p>Purpose: Handles calls made to your contract's functions after deployment. This method orchestrates the execution of the requested actions and interactions with the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error</code></p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_8","title":"Kalp Golang SDK","text":"<p>Creating and Starting Chaincode</p> <p>Instantiate your contract and start the chaincode.</p> <p>Copy</p> <pre><code>// Sample payable contract object\ncontract := kalpsdk.Contract{IsPayableContract: true}\n\n// KalpSDK Logger object for enhanced operation visibility\ncontract.Logger = kalpsdk.NewLogger()\n\n// New instance of KalpContractChaincode with your contract\nchaincode, err := kalpsdk.NewChaincode(&amp;MyContract{contract})\nif err != nil {\n    log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n}\n\n// Start the chaincode\nif err := chaincode.Start(); err != nil {\n    panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Once your smart contract is defined and implemented, proceed with these steps to instantiate it and launch the chaincode:</p> <ul> <li> <p>Contract Configuration:</p> <ul> <li> <p>Payable Contract: If your contract involves receiving payments, set the <code>IsPayableContract</code> field of the <code>kalpsdk.Contract</code> struct to <code>true</code>. This enables your contract to handle incoming payments.</p> </li> <li> <p>Logger Integration: (Optional) For enhanced visibility into chaincode execution and potential debugging assistance, consider assigning an instance of <code>kalpsdk.NewLogger()</code> to the <code>Logger</code> field of the <code>kalpsdk.Contract</code> struct.</p> </li> </ul> </li> <li> <p>Chaincode Creation: Create a new instance of <code>kalpsdk.Chaincode</code> by passing your custom contract struct (<code>MyContract</code>) wrapped within an instance of <code>MyContract</code>. This establishes the connection between your contract logic and the chaincode runtime environment.</p> </li> <li> <p>Error Handling: Employ proper error-handling mechanisms using <code>if</code> statements and appropriate logging or panic functions (e.g., <code>log.Panicf</code>) to catch potential errors during chaincode creation and gracefully handle any issues that might arise.</p> </li> <li> <p>Chaincode Startup: Once the chaincode object is created, initiate its execution by calling the <code>Start()</code> method. This method triggers the chaincode's lifecycle and activates your smart contract, making it ready to receive transactions and interact with the blockchain.</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_9","title":"Kalp Golang SDK","text":"<p>Start the Chaincode</p> <p>Call the <code>Start</code> function on the chaincode instance to start your chaincode.</p> <p>Copy</p> <pre><code>if err := chaincode.Start(); err != nil {\n  panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Call the <code>Start()</code> method on the chaincode object to initiate its execution and activate your smart contract.</p> <p>Usage:</p> <ul> <li> <p>Function Call: <code>chaincode.Start()</code>: It directly calls the <code>Start()</code> function on the chaincode instance, signaling its readiness to commence operations.</p> </li> <li> <p>Error Handling:</p> <ul> <li> <p><code>if err := chaincode.Start(); err != nil</code>: This conditional statement meticulously checks for errors that may arise during the chaincode's startup process.</p> </li> <li> <p>If an error occurs (<code>err != nil</code>), the code gracefully handles it using a panic statement, logging a descriptive message to facilitate debugging.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_10","title":"Kalp Golang SDK","text":"<p>Blockchain Data Management</p> <p>This section details the core functionalities available for managing data on the blockchain.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_11","title":"Kalp Golang SDK","text":"<p>Writing to the Kalp Blockchain</p> <p>This section delves into the process of writing data onto the Kalp blockchain, enabling persistent storage and facilitating diverse applications.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_12","title":"Kalp Golang SDK","text":"<p>PutStateWithKyc</p> <p>This function allows writing data to the ledger with KYC verification, ensuring only KYC-verified users can make ledger modifications.</p> <p>Copy</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain with KYC verification\n}\n</code></pre> <p>It writes a key-value pair to the Kalp blockchain ledger, ensuring only users who have passed KYC verification can write data.</p> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing information about the current transaction and blockchain environment.</p> </li> <li> <p><code>myKey</code>: A unique string key for the data being stored.</p> </li> <li> <p><code>[]byte(\"myValue\")</code>: The actual data to be written, represented as a byte array.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By leveraging <code>PutStateWithKyc</code>, you can ensure secure and compliant data storage on the Kalp blockchain, fostering trust and reliability within your applications. Remember to tailor the error handling and success logic within your code to suit your specific use case and application requirements.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_13","title":"Kalp Golang SDK","text":"<p>PutStateWithoutKyc</p> <p>The <code>PutStateWithoutKyc</code> function within the Kalp SDK offers an alternative approach for writing data onto the blockchain ledger. Unlike its counterpart, this function bypasses the KYC verification step, enabling broader access to data modification capabilities:</p> <p>Functionality:</p> <ul> <li> <p>Data Writing: Similar to <code>PutStateWithKyc</code>, this function facilitates writing a key-value pair to the blockchain ledger.</p> </li> <li> <p>No KYC Enforcement: It does not require mandatory KYC verification before proceeding with the data storage operation. This approach can be suitable for scenarios where:</p> <ul> <li> <p>KYC verification is not applicable or has already been performed at an earlier stage.</p> </li> <li> <p>The data being written has minimal privacy or security concerns.</p> </li> </ul> </li> </ul> <p>Copy</p> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern for <code>PutStateWithoutKyc</code> mirrors that of <code>PutStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>key</code>: Specifies the unique key for the data.</p> </li> <li> <p><code>value</code>: Represents the actual data to be written.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing, similar to <code>PutStateWithKyc</code>.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By understanding the distinct functionalities of <code>PutStateWithKyc</code> and <code>PutStateWithoutKyc</code>, you can make informed decisions about data storage on the Kalp blockchain, balancing security, compliance, and accessibility according to your application's needs.</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_14","title":"Kalp Golang SDK","text":"<p>Reading from the Kalp Blockchain</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_15","title":"Kalp Golang SDK","text":"<p>GetState</p> <p>The <code>GetState</code> function within the Kalp SDK empowers you to retrieve data stored on the blockchain ledger. This function acts as a key-value store lookup mechanism, allowing you to access previously written data based on its unique identifier.</p> <p>Functionality:</p> <ul> <li> <p>Data Retrieval: This function retrieves the value associated with a specific key from the ledger.</p> </li> <li> <p>Key-Value Lookup: It operates like a traditional key-value store, where each key maps to a corresponding value.</p> </li> </ul> <p>Copy</p> <pre><code>value, err := ctx.GetState(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Process the retrieved value\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to retrieve.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the data retrieval process. These errors could indicate issues like:</p> <ul> <li> <p>Invalid key (key not found in the ledger)</p> </li> <li> <p>Network connectivity problems</p> </li> <li> <p>Permission issues (user not authorized to access the data)</p> </li> </ul> </li> <li> <p>Success Scenario:</p> </li> <li> <p>The <code>else</code> block executes if the data retrieval is successful and no errors occur.</p> </li> <li> <p>The <code>value</code> variable stores the retrieved data, which can be of various types depending on how it was originally stored using <code>PutState</code> functions.</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_16","title":"Kalp Golang SDK","text":"<p>Deleting from the Kalp Blockchain</p>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_17","title":"Kalp Golang SDK","text":"<p>DelStateWithKyc</p> <p>The <code>DelStateWithKyc</code> function within the Kalp SDK grants authorized users the ability to remove data from the blockchain ledger, enforcing mandatory KYC verification before proceeding with the deletion process.</p> <p>This functionality safeguards the integrity of the ledger by ensuring only authorized and verified users can modify its state:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: This function facilitates the removal of a key-value pair from the blockchain ledger.</p> </li> <li> <p>KYC Enforcement: It mandates successful KYC verification as a prerequisite for data deletion. This verification process ensures that the user attempting to delete data is authorized to do so, adhering to security best practices and potentially complying with regulatory requirements.</p> </li> </ul> <p>Copy</p> <pre><code>err := ctx.DelStateWithKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain with KYC verification\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to delete.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles any potential errors that might arise during the KYC verification process or data deletion operation. It's crucial to implement appropriate error-handling mechanisms to gracefully address any issues and prevent unexpected behavior.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the KYC verification is successful and the data is deleted from the ledger without errors. This block typically performs actions like logging success messages or updating internal state variables within your application.</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_18","title":"Kalp Golang SDK","text":"<p>DelStateWithoutKyc</p> <p>The <code>DelStateWithoutKyc</code> function within the Kalp SDK offers a way to remove data from the blockchain ledger but bypasses mandatory KYC verification. While it simplifies deletion, it's crucial to approach this function with caution due to potential security concerns:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: Similar to <code>DelStateWithKyc</code>, this function removes a key-value pair from the ledger.</p> </li> <li> <p>No KYC Enforcement: Unlike its counterpart, it does not require KYC verification before proceeding with deletion. This can be suitable for specific scenarios where:</p> <ul> <li> <p>KYC verification has already been performed at an earlier stage.</p> </li> <li> <p>The data being deleted is non-sensitive and deletion consequences are minimal.</p> </li> </ul> </li> </ul> <p>Copy</p> <pre><code>err := ctx.DelStateWithoutKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern mirrors <code>DelStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>\"myKey\"</code>: Specifies the unique key of the data to be deleted.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data deletion.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is deleted successfully.</p> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_19","title":"Kalp Golang SDK","text":"<p>GetKYC</p> <p>The <code>GetKYC</code> function within the Kalp SDK empowers you to verify a user's KYC (Know Your Customer) status on the network. This functionality is essential for implementing access control mechanisms and ensuring that only verified users can perform specific actions or access sensitive data within your application.</p> <p>Functionality:</p> <p>KYC Verification Check: This function queries the network to determine if a particular user identified by their user ID (<code>userId</code>) has successfully completed the KYC verification process.</p> <p>Copy</p> <pre><code>Kyced, err := ctx.GetKYC(\"userId\")\nif err != nil {\n    // Handle error\n} else if Kyced {\n    // User has completed KYC, proceed with the desired action\n} else {\n    // User has not completed KYC, handle accordingly\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"userId\"</code>: This string argument specifies the user ID for whom you want to check the KYC status.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the KYC verification check, such as network issues or invalid user IDs.</p> </li> <li> <p>KYC Verification Result: The <code>Kyced</code> boolean variable stores the result of the KYC check.</p> <ul> <li> <p><code>true</code>: Indicates the user has completed KYC verification.</p> </li> <li> <p><code>false</code>: Indicates the user has not completed KYC verification.</p> </li> <li> <p>Based on the <code>Kyced</code> value, you can implement conditional logic within your application:</p> <ul> <li> <p>If <code>Kyced</code> is <code>true</code>, proceed with actions that require KYC verification (e.g., allowing access to sensitive data or functionalities).</p> </li> <li> <p>If <code>Kyced</code> is <code>false</code>, handle scenarios where the user has not completed KYC verification (e.g., display an informative message, prompt the user to complete KYC, or restrict access to certain features).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/1.%20Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_20","title":"Kalp Golang SDK","text":"<p>Conclusion</p> <p>The Kalp-SDK offers a robust set of tools for developers building decentralized applications on the Kalp blockchain network. By leveraging the SDK's functionalities, developers can efficiently manage data, transactions, and compliance requirements, facilitating a streamlined development process.</p> <p>Happy coding with the Kalp-SDK on the Kalp blockchain network!</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/","title":"KRC20 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-20 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_1","title":"KRC20 Token Contract","text":"<p>Overview</p> <p>This document outlines the technical details and functionalities of a KRC20 token contract implemented in Go. The contract leverages the Kalp SDK for operations within a blockchain network, providing a framework for issuing, transferring, and managing tokenized assets compliant with the KRC20 standard.</p> <p>Prerequisites</p> <ul> <li> <p>Familiarity with the Go programming language</p> </li> <li> <p>Basic understanding of blockchain concepts and KRC20 token standards</p> </li> <li> <p>Installation of the Kalp SDK</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_2","title":"KRC20 Token Contract","text":"<p>Contract Initialization</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_3","title":"KRC20 Token Contract","text":"<p>Initialize Token Contract</p> <p>The <code>Initialize</code> function initializes a token contract with essential details, making it ready for subsequent interactions. This function must be called prior to any other contract functionalities to establish the token's name, symbol, and decimal places.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>// Set information for a token and initialize contract.\nfunc (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error) {\n    // Authorization and initialization checks omitted for brevity\n\n    err := sdk.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n\n    // Symbol and decimals setting omitted for brevity\n\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The human-readable name of the token (e.g., \"MyCoin\").</p> </li> <li> <p><code>**symbol**</code> (string): The abbreviated symbol of the token (e.g., \"MYC\").</p> </li> <li> <p><code>**decimals**</code> (string): The number of decimal places the token utilizes (e.g., \"18\" for 18 decimal places representing cents).</p> </li> </ul> <p>Function Breakdown:</p> <ul> <li> <p><code>**Initialize (sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error)**</code>:</p> <ul> <li> <p>This function accepts four arguments:</p> <ul> <li> <p><code>sdk</code>: Reference to the Kalp SDK for blockchain interaction.</p> </li> <li> <p><code>name</code>: The token name.</p> </li> <li> <p><code>symbol</code>: The token symbol.</p> </li> <li> <p><code>decimals</code>: The number of decimal places for the token.</p> </li> </ul> </li> <li> <p>Return: It returns a boolean value indicating success (<code>true</code>) or failure (<code>false</code>) along with any potential errors.</p> </li> </ul> </li> </ul> <p>Authorization: Yes, only authorized clients (e.g., Deployer) can call the <code>Initialize</code> function. This ensures proper control over token creation and prevents unauthorized deployments.</p> <p>Authorization checks are crucial and intentionally omitted for brevity. Specific authorization mechanisms depend on the smart contract's design and deployment environment.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_4","title":"KRC20 Token Contract","text":"<p>Token Operations</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_5","title":"KRC20 Token Contract","text":"<p>Mint Function</p> <p>The <code>Mint</code> function enables the creation of new tokens and subsequent additions to the minter's account balance. This operation also increases the total supply of the token in circulation.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>// Mint creates new tokens and adds them to minter's account balance.\nfunc (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return fmt.Errorf(\"mint amount must be a positive integer\")\n    }\n\n    // Update balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**amount**</code> (int): The positive integer value represents the number of tokens to be minted.</li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the minting operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_6","title":"KRC20 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> function permanently removes a specified number of tokens from the minter's account balance, effectively reducing the total supply of tokens in circulation.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Initialization and authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return errors.New(\"burn amount must be a positive integer\")\n    }\n\n    // Retrieve, update, and save the new balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**amount**</code> (int): The positive integer value represents the number of tokens to be burned.</li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the burning operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_7","title":"KRC20 Token Contract","text":"<p>Transfer Function</p> <p>The <code>Transfer</code> function facilitates the movement of tokens between accounts within the Kalp ecosystem. It allows the caller (the account initiating the transaction) to send a specified number of tokens to a recipient account.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>// Transfer transfers tokens from the client account to the recipient account.\nfunc (s *SmartContract) Transfer(sdk kalpsdk.TransactionContextInterface, recipient string, amount int) error {\n    // Initialization checks omitted for brevity\n\n    err := transferHelper(sdk, clientID, recipient, amount)\n    if err != nil {\n        return fmt.Errorf(\"failed to transfer: %v\", err)\n    }\n\n    // Emit Transfer event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**recipient**</code> (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p><code>**amount**</code> (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the transfer operation fails. The error message provides details about the encountered issue, such as insufficient funds or an invalid recipient address.</li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_8","title":"KRC20 Token Contract","text":"<p>BalanceOf Function</p> <p>The <code>BalanceOf</code> function serves as a key tool for retrieving the token balance associated with a specific account within the Kalp ecosystem. It provides a reliable and transparent way to query account holdings.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>// BalanceOf returns the balance of the given account.\nfunc (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string) (int, error) {\n    // Initialization checks omitted for brevity\n\n    balanceBytes, err := sdk.GetState(account)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read from world state: %v\", err)\n    }\n\n    balance, _ := strconv.Atoi(string(balanceBytes))\n\n    return balance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**account**</code> (string): The unique identifier of the account whose balance is to be queried.</li> </ul> <p>Return Value:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the token balance of the specified account.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the balance retrieval process, the function returns an error object along with a descriptive error message.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_9","title":"KRC20 Token Contract","text":"<p>Approval Function</p> <p>The <code>Approve</code> function empowers the caller (the account initiating the transaction) to grant spending authorization to another account, designated as the spender. This allows the spender to withdraw tokens from the caller's account multiple times up to a predefined maximum amount. This functionality underpins various use cases within decentralized applications (dApps) built on the Kalp blockchain.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>// Approve allows the spender to withdraw from the calling client's token account.\nfunc (s *SmartContract) Approve(sdk kalpsdk.TransactionContextInterface, spender string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Create allowanceKey and update the state with the value\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    err := sdk.PutStateWithoutKYC(allowanceKey, []byte(strconv.Itoa(value)))\n    if err != nil {\n        return fmt.Errorf(\"failed to update state of smart contract for key %s: %v\", allowanceKey, err)\n    }\n\n    // Emit Approval event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**spender**</code> (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> <li> <p><code>**value**</code> (int): The positive integer value representing the maximum allowable withdrawal amount.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: The function returns an error object if the approval process fails. The error message provides details about the encountered issue, such as invalid parameters, permission errors, or issues with underlying SDK functions.</li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_10","title":"KRC20 Token Contract","text":"<p>Allowance Function</p> <p>The <code>Allowance</code> function serves as a vital tool for retrieving the remaining allowance granted to a specific spender by the owner of a token account. This information is crucial for understanding the authorized spending capacity of the spender and ensuring proper control over token transfers within the Kalp ecosystem.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) Allowance(sdk kalpsdk.TransactionContextInterface, owner string, spender string) (int, error) {\n    // Initialization checks omitted for brevity\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    allowanceBytes, err := sdk.GetState(allowanceKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read allowance: %v\", err)\n    }\n    if allowanceBytes == nil {\n        return 0, nil // No allowance set\n    }\n    allowance, _ := strconv.Atoi(string(allowanceBytes))\n    return allowance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**owner**</code> (string): The unique identifier of the account that owns the tokens.</p> </li> <li> <p><code>**spender**</code> (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the remaining number of tokens that the spender is authorized to withdraw from the owner's account.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the encountered issue.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_11","title":"KRC20 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> function empowers a designated spender to initiate token transfers on behalf of the owner, enabling a flexible and controlled mechanism for token movement within the Kalp ecosystem. It's particularly useful in scenarios where third-party services or applications need to manage tokens for users.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, from string, to string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Retrieve and check the allowance of the spender\n    // Decrease the allowance\n    // Perform the transfer using `transferHelper`\n    // Logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**from**</code> (string): The unique identifier of the account owning the tokens to be transferred.</p> </li> <li> <p><code>**to**</code> (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p><code>**value**</code> (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: The function returns an error object if the transfer process fails. The error message provides details about the encountered issue, such as insufficient allowance, invalid parameters, or other potential errors.</li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_12","title":"KRC20 Token Contract","text":"<p>Token Information Function</p> <p>The <code>Name</code> function serves as a fundamental tool for accessing the descriptive name associated with a token within the Kalp ecosystem. This information is crucial for identifying and understanding the token's purpose and characteristics within various applications and interactions.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) Name(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(nameKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get token name: %v\", err)\n    }\n    return string(bytes), nil\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The function returns a string value representing the token's name. This name typically aligns with the token's intended use cases and branding.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the issue, such as potential database errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_13","title":"KRC20 Token Contract","text":"<p>Symbol Function</p> <p>The <code>Symbol</code> function acts as a dedicated tool for retrieving the unique symbol associated with a token within the Kalp ecosystem. This symbol serves as a concise and recognizable identifier, enabling efficient communication and exchange across various applications and interfaces.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) Symbol(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(symbolKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get Symbol: %v\", err)\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The function returns a string value representing the token's symbol. This symbol typically adheres to conventional shorthand conventions for clarity and consistency (e.g., \"MTK,\" \"KALP\").</p> </li> <li> <p><code>**error**</code>: If an error occurs during retrieval, the function returns an error object along with a descriptive message detailing the issue, aiding in troubleshooting and issue resolution.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_14","title":"KRC20 Token Contract","text":"<p>TotalSupply Function</p> <p>The <code>TotalSupply</code> function serves as a vital tool for retrieving the total number of tokens that have been created and issued within the Kalp ecosystem. This information provides a crucial metric for understanding the overall token distribution and scarcity, which are fundamental aspects of token economics and market dynamics.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (s *SmartContract) TotalSupply(sdk kalpsdk.TransactionContextInterface) (int, error) {\n     // Initialization checks omitted for brevity\n    totalSupplyBytes, err := sdk.GetState(totalSupplyKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to retrieve total token supply: %v\", err)\n    }\n    if totalSupplyBytes == nil {\n        return 0, nil // No tokens minted yet\n    }\n    totalSupply, _ := strconv.Atoi(string(totalSupplyBytes))\n    return totalSupply, nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the total number of tokens currently in circulation within the Kalp ecosystem.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message detailing the encountered issue, such as potential storage errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_15","title":"KRC20 Token Contract","text":"<p>Helper Functions</p> <p>Included are several helper functions for internal logic, such as <code>transferHelper</code>, <code>add</code>, <code>sub</code>, and <code>checkInitialized</code>, which ensures the correct execution of token operations and state management.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_16","title":"KRC20 Token Contract","text":"<p>Error Handling</p> <p>All operations include detailed error reporting to ensure developers can diagnose and resolve issues during integration and interaction with the contract.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_17","title":"KRC20 Token Contract","text":"<p>Events</p> <p>The contract emits events for significant actions such as transfers and approvals, facilitating off-chain applications and services to react to contract state changes.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_18","title":"KRC20 Token Contract","text":"<p>Security Considerations</p> <ul> <li> <p>Ensure proper access control is enforced, particularly for sensitive operations like <code>Mint</code> and <code>Burn</code>.</p> </li> <li> <p>Validate input parameters to mitigate risks such as reentrancy attacks and overflow/underflow vulnerabilities.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/1.%20KRC%2020%20Token%20Contract/#_19","title":"KRC20 Token Contract","text":"<p>Conclusion</p> <p>This KRC20 token contract implemented in Go, utilizing the KalpSDK, provides a comprehensive suite of functionalities for managing digital assets on a blockchain network. The documentation outlined above offers a detailed guide for developers to integrate and leverage these capabilities within their applications.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/","title":"KRC721 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-721 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_1","title":"KRC721 Token Contract","text":"<p>Overview</p> <p>This document provides technical details and guidelines for interacting with an KRC721 token contract implemented in Go. This contract utilizes the Kalp SDK to facilitate operations within a blockchain network, enabling the creation, management, and transfer of non-fungible tokens (NFTs).</p> <p>Prerequisites</p> <ul> <li> <p>Understanding of Go programming language</p> </li> <li> <p>Basic knowledge of blockchain and NFT concepts</p> </li> <li> <p>Installed KalpSDK environment</p> </li> <li> <p>Note: The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_2","title":"KRC721 Token Contract","text":"<p>Contract Functions</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_3","title":"KRC721 Token Contract","text":"<p>Initialize Function</p> <p>The <code>Initialize</code> method serves as a crucial first step in configuring a Kalp-based ERC721 token contract. It establishes the name and symbol that will be indelibly associated with the token collection, ensuring clarity and consistency throughout its lifecycle.</p> <p>Implementation (Go):</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) Initialize(ctx kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Authorization check omitted for brevity\n    err := ctx.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n    err = ctx.PutStateWithoutKYC(symbolKey, []byte(symbol))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token symbol: %v\", err)\n    }\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The human-readable name that designates the token collection, often aligning with its intended use cases or branding.</p> </li> <li> <p><code>**symbol**</code> (string): A concise and recognizable symbol that serves as a shorthand identifier for the token collection, typically following conventional naming conventions (e.g., \"MTK\" or \"KALP\").</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method returns a boolean value indicating success or failure, accompanied by an error object if any issues arise during initialization.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_4","title":"KRC721 Token Contract","text":"<p>MintWithTokenURI Function</p> <p>The <code>MintWithTokenURI</code> method holds the power to create brand-new NFTs (Non-Fungible Tokens) within the Kalp ecosystem, cementing their unique existence and linking them with rich metadata. It serves as a cornerstone for establishing ownership and unlocking the diverse possibilities that NFTs offer.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) MintWithTokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string, tokenURI string) (*Nft, error) {\n    // Initialization and authorization checks omitted for brevity\n    nft := &amp;Nft{TokenId: tokenId, Owner: /* Owner's identity */, TokenURI: tokenURI}\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Balance and Transfer event logic omitted for brevity\n    return nft, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**tokenId**</code> (string): An unequivocally unique identifier assigned to the NFT, ensuring its individuality and preventing any chance of duplication.</p> </li> <li> <p><code>**tokenURI**</code> (string): A Universal Resource Identifier (URI), acting as a digital address that points to a JSON file containing comprehensive metadata about the NFT's attributes, details, and potential functionalities.</p> </li> </ul> <p>Return Values:<code>**(*Nft, error)**</code>: Upon successful minting, the method returns a pointer to the newly created <code>Nft</code> object, containing its essential information. It also includes an error object if any issues arise during the process.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_5","title":"KRC721 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> method wields the definitive power to permanently remove NFTs (Non-Fungible Tokens) from the Kalp ecosystem, executing an irreversible act of destruction that revokes their presence and ownership. It serves as a mechanism for managing token supply, addressing specific use cases, or even symbolizing artistic expression.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) Burn(ctx kalpsdk.TransactionContextInterface, tokenId string) (bool, error) {\n    // Ownership and initialization checks omitted for brevity\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    ctx.DelStateWithoutKYC(nftKey)\n    // Remove from balance and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that pinpoints the specific NFT destined for elimination.</li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method indicates its success or failure by returning a boolean value, accompanied by an error object if any issues arise during the burning process.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_6","title":"KRC721 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> method sits at the heart of NFT (Non-Fungible Token) movement within the Kalp ecosystem, meticulously orchestrating the transfer of ownership from one entity to another. It stands as the cornerstone for enabling seamless transactions, trading, and sharing of NFTs.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) TransferFrom(ctx kalpsdk.TransactionContextInterface, from string, to string, tokenId string) (bool, error) {\n    // Initialization, ownership, and approval checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Owner = to\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Update balance keys and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**from**</code> (string): The current owner of the NFT, relinquishing their control.</p> </li> <li> <p><code>**to**</code> (string): The designated recipient who will assume ownership of the NFT.</p> </li> <li> <p><code>**tokenId**</code> (string): The unique identifier that unequivocally designates the specific NFT being transferred.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method signals its success or failure through a boolean value, also returning an error object if any issues arise during the transfer process.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_7","title":"KRC721 Token Contract","text":"<p>Approve Function</p> <p>The <code>Approve</code> method empowers NFT (Non-Fungible Token) owners within the Kalp ecosystem to selectively bestow transfer authority upon designated accounts, granting them the ability to move specific NFTs on behalf of the owner. This flexibility facilitates a range of collaborative and trust-based interactions.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) Approve(ctx kalpsdk.TransactionContextInterface, operator string, tokenId string) (bool, error) {\n    // Initialization and ownership checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Approved = operator\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Omitted logic for emitting Approval event\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The account designated to receive transfer approval for the specified NFT.</p> </li> <li> <p><code>**tokenId**</code> (string): The unique identifier that pinpoints the NFT for which authorization is being granted.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method indicates success or failure through a boolean value, accompanied by an error object if any issues arise during the approval process.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_8","title":"KRC721 Token Contract","text":"<p>SetApprovalForAll Function</p> <p>The <code>SetApprovalForAll</code> method within the Kalp ecosystem empowers NFT (Non-Fungible Token) owners to confer blanket approval to designated accounts (operators). This grants the operator the ability to transfer all of the owner's NFTs, acting as a powerful tool for managing large collections or streamlining specific use cases.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) SetApprovalForAll(ctx kalpsdk.TransactionContextInterface, operator string, approved bool) (bool, error) {\n    // Initialization checks omitted for brevity\n    sender := /* Fetch sender's identity */\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{sender, operator})\n    approval := Approval{Owner: sender, Operator: operator, Approved: approved}\n    approvalBytes, _ := json.Marshal(approval)\n    ctx.PutStateWithoutKYC(approvalKey, approvalBytes)\n    // Emit ApprovalForAll event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The account designated to receive approval for managing all the caller's NFTs.</p> </li> <li> <p><code>**approved**</code> (bool): A flag indicating whether to grant (<code>true</code>) or revoke (<code>false</code>) approval for the operator.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method signals success or failure through a boolean value, along with an error object if any issues arise during the approval process.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_9","title":"KRC721 Token Contract","text":"<p>BalanceOf Function</p> <p>The <code>BalanceOf</code> method acts as a digital accountant within the Kalp ecosystem, meticulously cataloging NFT (Non-Fungible Token) collections. It enables you to precisely determine the number of NFTs held by a specific account, serving as a crucial tool for understanding ownership patterns, token scarcity, and personal collections.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) BalanceOf(ctx kalpsdk.TransactionContextInterface, owner string) int {\n    // Initialization checks omitted for brevity\n    iterator, _ := ctx.GetStateByPartialCompositeKey(balancePrefix, []string{owner})\n    balance := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        balance++\n    }\n    return balance\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**owner**</code> (string): The account whose NFT holdings you wish to inspect.</li> </ul> <p>Return Value:<code>**int**</code>: A concise integer representing the exact quantity of NFTs owned by the specified account.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_10","title":"KRC721 Token Contract","text":"<p>OwnerOf Function</p> <p>Within the Kalp NFT landscape, the <code>OwnerOf</code> method serves as a steadfast guide, revealing the rightful owner of a specified NFT. It acts as a fundamental tool for establishing ownership, ensuring responsible transfer, and upholding accountability within this dynamic ecosystem.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) OwnerOf(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Owner, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that singles out the NFT for which ownership information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Owner Account: A string representing the account holding ownership of the inquired NFT.</p> </li> <li> <p>Error: In the event of unforeseen retrieval obstacles, an error object is returned, shedding light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_11","title":"KRC721 Token Contract","text":"<p>GetApproved Function</p> <p>The <code>GetApproved</code> method acts as a trustworthy informant, revealing the account specifically authorized to transfer a designated NFT on behalf of its owner. It serves as a vital tool for understanding transfer permissions and managing collaborative ownership scenarios.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) GetApproved(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Approved, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that pinpoints the NFT for which authorization information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Approved Account: A string disclosing the account granted transfer authority for the queried NFT.</p> </li> <li> <p>Error: In the event of retrieval obstacles, an error object is returned, clarifying the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_12","title":"KRC721 Token Contract","text":"<p>IsApprovedForAll Function</p> <p>The <code>IsApprovedForAll</code> method assumes the role of a meticulous gatekeeper, determining whether a designated account (operator) holds sweeping authority to manage the entire collection of NFTs belonging to a specific owner. It acts as a cornerstone for managing extensive collections and facilitating collaborative ownership structures.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) IsApprovedForAll(ctx kalpsdk.TransactionContextInterface, owner string, operator string) (bool, error) {\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{owner, operator})\n    approvalBytes, err := ctx.GetState(approvalKey)\n    if len(approvalBytes) &lt; 1 {\n        return false, nil\n    }\n    approval := new(Approval)\n    _ = json.Unmarshal(approvalBytes, approval)\n    return approval.Approved, err\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**owner**</code> (string): The account whose NFTs are potentially subject to management by an operator.</p> </li> <li> <p><code>**operator**</code> (string): The account seeking verification of their blanket approval status.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**bool**</code>: A boolean value unequivocally indicating whether the operator holds comprehensive approval to manage the owner's entire NFT collection.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of unforeseen challenges, an error object emerges, revealing the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_13","title":"KRC721 Token Contract","text":"<p>Name Function</p> <p>the <code>Name</code> method fulfills the role of a skillful archivist, divulging the distinct title bestowed upon a token collection. It serves as a fundamental means of identifying and referencing collections, fostering clarity and discoverability.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) Name(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(nameKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The collection's carefully chosen name, representing its unique identity.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of retrieval obstacles, an error object surfaces to illuminate the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_14","title":"KRC721 Token Contract","text":"<p>Symbol Function</p> <p>The <code>Symbol</code> method acts as a herald, disclosing the succinct and potent symbol that serves as a collection's emblematic signature. It empowers concise identification and efficient referencing, akin to a heraldic crest in the digital realm.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) Symbol(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(symbolKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The collection's meticulously chosen symbol, acting as its concise identifier and resonant emblem.</p> </li> <li> <p><code>**error**</code>: Should retrieval obstacles arise, an error object emerges to shed light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_15","title":"KRC721 Token Contract","text":"<p>TokenURI Function</p> <p>Returns the metadata URI of an NFT.</p> <p>Parameters:</p> <ul> <li><code>tokenId</code> (string): Unique identifier for the NFT.</li> </ul> <p>Function: TokenURI</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) TokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.TokenURI, nil\n}\n</code></pre> <p>Returns: (string, error) - Metadata URI and error if any.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_16","title":"KRC721 Token Contract","text":"<p>TotalSupply Function</p> <p>the <code>TokenURI</code> method plays the role of a trusty navigator, leading explorers to a digital harbor brimming with an NFT's rich metadata. It serves as a fundamental gateway to an NFT's unique traits, captivating imagery, and captivating stories.</p> <p>Copy</p> <pre><code>func (c *TokenERC721Contract) TotalSupply(ctx kalpsdk.TransactionContextInterface) int {\n    iterator, _ := ctx.GetStateByPartialCompositeKey(nftPrefix, []string{})\n    totalSupply := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        totalSupply++\n    }\n    return totalSupply\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The distinct identifier that pinpoints the specific NFT whose secrets await revelation.</li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The metadata URI, a web address leading to a wellspring of descriptive details, vibrant visuals, and captivating stories.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of retrieval obstacles, an error object emerges, casting light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_17","title":"KRC721 Token Contract","text":"<p>Helper Methods</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_18","title":"KRC721 Token Contract","text":"<p>checkInitialized Function</p> <p>the <code>checkInitialized</code> method serves as a vigilant sentinel, safeguarding system integrity and ensuring the contract is in a fit state for operation. It acts as a crucial checkpoint, guaranteeing all essential setup procedures have been meticulously completed before transactions and interactions can commence.</p> <p>Returns:</p> <ul> <li> <p><code>**bool**</code>: A boolean value indicating the initialization status of the contract:</p> <ul> <li> <p><code>**true**</code>: The contract has been successfully initialized and is ready for use.</p> </li> <li> <p><code>**false**</code>: The contract has not yet undergone initialization and remains inoperable.</p> </li> </ul> </li> <li> <p><code>**error**</code>: If unforeseen challenges arise during the check, an error object surfaces, providing valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_19","title":"KRC721 Token Contract","text":"<p>Error Handling</p> <p>The Kalp NFT contract prioritizes exceptional user experience by meticulously incorporating error-handling mechanisms. This ensures:</p> <ul> <li> <p>Clear and actionable feedback: When operations encounter roadblocks or invalid inputs are provided, informative error messages are conveyed, empowering users to rectify mistakes and navigate the system effectively.</p> </li> <li> <p>Reduced risk: By pinpointing the source of errors, developers and system operators can swiftly identify and address potential issues, mitigating operational risks and safeguarding the system's integrity.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_20","title":"KRC721 Token Contract","text":"<p>Events</p> <p>The contract leverages events as potent messengers, broadcasting crucial information about significant actions to external applications and services. This fosters:</p> <ul> <li> <p>Real-time monitoring: Off-chain applications can remain keenly aware of contract state changes, such as NFT transfers or approvals, enabling them to react dynamically and provide users with up-to-date information.</p> </li> <li> <p>Enhanced user experience: By staying abreast of contract events, external applications can trigger relevant functionalities, such as updating user interfaces or executing automated tasks, enriching the overall user experience.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_21","title":"KRC721 Token Contract","text":"<p>Security Considerations</p> <p>Security remains paramount within the Kalp NFT ecosystem. To safeguard the contract and its users, the following measures are implemented:</p> <ul> <li> <p>Granular access control: Sensitive operations, such as minting NFTs with custom URIs or burning existing ones, are subject to rigorous access control mechanisms. This ensures that only authorized individuals or processes can execute these actions, safeguarding against unauthorized modifications and potential misuse.</p> </li> <li> <p>Input validation: To thwart common vulnerabilities, the contract meticulously validates all user-provided input parameters. This involves verifying data formats and ensuring adherence to predefined constraints, effectively preventing malicious actors from exploiting unintended loopholes within the system.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/2.%20KRC%20721%20Token%20Contract/#_22","title":"KRC721 Token Contract","text":"<p>Conclusion</p> <p>This KRC721 token contract provides a comprehensive set of functionalities for managing NFTs, including the creation, transfer, and querying of ownership and metadata. The above documentation offers a detailed guide for developers to effectively interact with and integrate these capabilities within their applications or platforms.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/","title":"KRC1155 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-1155 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_1","title":"KRC1155 Token Contract","text":"<p>Overview</p> <p>This document outlines the technical details and functionalities of an KRC1155 token contract implemented in Go, utilizing the Kalp SDK for blockchain operations. The KRC1155 standard enables efficient multi-token transactions and interactions, supporting both fungible and non-fungible token types within a single contract.</p> <p>Prerequisites</p> <ul> <li> <p>Basic understanding of Go programming language.</p> </li> <li> <p>Familiarity with blockchain concepts, KRC1155 token standards, and smart contract development.</p> </li> <li> <p>KalpSDK environment set up for blockchain interaction.</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_2","title":"KRC1155 Token Contract","text":"<p>Contract Functions</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_3","title":"KRC1155 Token Contract","text":"<p>Initialize Function</p> <p>Within the Kalp NFT contract, the <code>Initialize</code> method serves as a meticulous architect, establishing the foundational configurations that shape the contract's identity and functionality. It acts as a crucial starting point, ensuring essential parameters are set before any subsequent interactions can occur.</p> <p>Copy</p> <pre><code>func (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Initialization logic here\n}\n</code></pre> <p>Key Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The chosen title that will gracefully adorn the token collection, defining its unique character within the Kalp ecosystem.</p> </li> <li> <p><code>**symbol**</code> (string): A concise and potent emblem that will serve as the collection's identifier, akin to a heraldic crest in the digital realm.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**bool**</code>: A boolean value indicating the outcome of the initialization endeavor:</p> <ul> <li> <p><code>**true**</code>: The initialization process has successfully crafted a solid foundation, and the contract is poised for further interactions.</p> </li> <li> <p><code>**false**</code>: Unexpected challenges have derailed the initialization attempt, requiring attention and corrective measures.</p> </li> </ul> </li> <li> <p><code>**error**</code>: If obstacles arose during initialization, an error object emerges, carrying valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_4","title":"KRC1155 Token Contract","text":"<p>Mint Function</p> <p>The <code>Mint</code> method acts as a powerful sculptor, meticulously crafting and issuing NFTs into existence. It serves as the cornerstone for NFT creation, enabling the minting of a designated number of tokens and assigning them to a specified recipient.</p> <p>Copy</p> <pre><code>func (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the intended recipient who will receive the newly minted NFTs.</p> </li> <li> <p><code>**id**</code> (uint64): A numerical identifier that serves as a starting point for minting a sequence of NFTs.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise number of NFTs to be minted and bestowed upon the recipient.</p> </li> </ul> <p>Return Value:<code>**error**</code>: In the event of unforeseen minting obstacles, an error object surfaces, shedding light on the nature of the difficulty. It is important to note that the method signature only explicitly indicates an error return type, implying a successful mint operation wouldn't return anything specific.</p>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_5","title":"KRC1155 Token Contract","text":"<p>MintBatch Function</p> <p>The <code>MintBatch</code> method embodies the spirit of efficiency, enabling the creation and allocation of multiple NFTs in a single, streamlined operation. It empowers the minting of diverse NFT types, each with its unique identifier and quantity, fostering a more efficient workflow for creators and distributors.</p> <p>Copy</p> <pre><code>func (s *SmartContract) MintBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the intended recipient who will receive the minted NFTs.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of numerical identifiers, meticulously assigned to each NFT within the batch, establishing their distinct identities.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): An array of corresponding values, precisely indicating the quantity of NFTs to be minted for each respective identifier within the batch.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_6","title":"KRC1155 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> method serves as a transformative force, deliberately removing NFTs from existence and reducing their overall supply. It acts as a counterbalance to minting, fostering scarcity and potentially enhancing the value of remaining tokens.</p> <p>Copy</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the individual or entity that will relinquish their ownership of the NFTs, triggering their removal.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier that pinpoints the specific type of NFTs destined for the burning process.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise quantity of NFTs to be extracted from the account and irrevocably removed from circulation.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_7","title":"KRC1155 Token Contract","text":"<p>BurnBatch Function</p> <p>The <code>BurnBatch</code> method embodies efficiency and precision, enabling the coordinated removal and destruction of multiple NFT types within a single, streamlined transaction. It serves as an optimized approach to managing NFT supply and unlocking various functionalities within the Kalp ecosystem.</p> <p>Copy</p> <pre><code>func (s *SmartContract) BurnBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating their irreversible removal.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, meticulously pinpointing the distinct types of NFTs destined for the synchronized burning process.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): An array of corresponding values, precisely indicating the quantities of each respective NFT type to be extracted from the account and permanently extinguished.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_8","title":"KRC1155 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> method acts as a facilitator, enabling the seamless transfer of ownership for designated NFTs from one account to another. It empowers vibrant secondary markets and fosters dynamic ownership experiences within the Kalp ecosystem.</p> <p>Copy</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, id uint64, amount uint64) error {\n    // Single transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**sender**</code> (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating the transfer process.</p> </li> <li> <p><code>**recipient**</code> (string): The blockchain address of the intended recipient who will receive the NFTs and assume ownership.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier pinpointing the specific type of NFTs to be transferred.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise quantity of NFTs to be extracted from the sender's account and bestowed upon the recipient.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_9","title":"KRC1155 Token Contract","text":"<p>BatchTransferFrom Function</p> <p>The <code>BatchTransferFrom</code> method embodies efficiency and coordination, enabling the seamless transfer of ownership for diverse NFT types within a single, streamlined transaction. It fosters efficient exchange processes, minimizing transaction costs and enhancing user experience.</p> <p>Copy</p> <pre><code>func (s *SmartContract) BatchTransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, ids []uint64, amounts []uint64) error {\n    // Batch transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**sender**</code> (string): The blockchain address of the individual or entity initiating the transfer, relinquishing ownership of the NFTs.</p> </li> <li> <p><code>**recipient**</code> (string): The blockchain address of the intended recipient who will assume ownership of the transferred NFTs.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, pinpointing the precise types of NFTs to be included in the batch transfer.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): A corresponding array of values, specifying the quantities of each respective NFT type to be transferred.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_10","title":"KRC1155 Token Contract","text":"<p>SetApprovalForAll Function</p> <p>The <code>SetApprovalForAll</code> method acts as a delegation tool, enabling granular control over NFT management permissions. It empowers users to grant or revoke the ability for a designated operator (often another smart contract) to transfer all their NFTs on their behalf.</p> <p>Copy</p> <pre><code>func (s *SmartContract) SetApprovalForAll(sdk kalpsdk.TransactionContextInterface, operator string, approved bool) error {\n    // Approval logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The blockchain address of the operator (typically another smart contract) to whom permissions are being granted or revoked.</p> </li> <li> <p><code>**approved**</code> (bool): A boolean value signifying the desired authorization state:</p> <ul> <li> <p><code>**true**</code>: Grants the specified operator permission to manage all of the caller's NFTs.</p> </li> <li> <p><code>**false**</code>: Revokes any previously granted permission for the operator to manage the caller's NFTs.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_11","title":"KRC1155 Token Contract","text":"<p>IsApprovedForAll Function</p> <p>the <code>IsApprovedForAll</code> method acts as a transparency tool, enabling users and other smart contracts to verify the authorization status of a designated operator. It empowers informed decision-making and fosters trust within the Kalp ecosystem.</p> <p>Copy</p> <pre><code>func (s *SmartContract) IsApprovedForAll(sdk kalpsdk.TransactionContextInterface, account string, operator string) (bool, error) {\n    // Check approval status here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the NFT owner whose permissions are being queried.</p> </li> <li> <p><code>**operator**</code> (string): The blockchain address of the operator whose authorization status is being investigated.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_12","title":"KRC1155 Token Contract","text":"<p>BalanceOf Function</p> <p>the <code>BalanceOf</code> method serves as a meticulous bookkeeper, enabling the querying of NFT balances associated with a specific account and token type. It provides a transparent and accessible way to ascertain digital asset ownership within the Kalp ecosystem.</p> <p>Copy</p> <pre><code>func (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string, id uint64) (uint64, error) {\n    // Balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the account whose NFT balance is being investigated.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier representing the specific type of NFTs for which the balance is sought.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_13","title":"KRC1155 Token Contract","text":"<p>BalanceOfBatch Function</p> <p>The <code>BalanceOfBatch</code> method embodies optimization, enabling the efficient querying of NFT balances for multiple accounts and token types within a single operation. It streamlines data retrieval, minimizing transaction costs and enhancing user experience within the Kalp ecosystem.</p> <p>Copy</p> <pre><code>func (s *SmartContract) BalanceOfBatch(sdk kalpsdk.TransactionContextInterface, accounts []string, ids []uint64) ([]uint64, error) {\n    // Batch balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**accounts**</code> ([]string): An array of blockchain addresses representing the accounts for which NFT balances are being queried.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, each corresponding to a specific type of NFT for which balances are sought.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_14","title":"KRC1155 Token Contract","text":"<p>Helper Functions</p> <p>Within the Kalp NFT smart contract, a suite of helper functions acts as the workhorses, meticulously handling fundamental operations. These functions encapsulate specific tasks, promoting code modularity, reusability, and maintainability.</p> <ul> <li> <p>Minting and Burning: Functions like <code>mintHelper</code>, <code>addBalance</code>, and <code>removeBalance</code> meticulously handle the creation and destruction of NFTs, ensuring accurate state updates and adherence to defined rules.</p> </li> <li> <p>Event Emissions: Dedicated functions manage the emission of events like <code>TransferSingle</code>, <code>TransferBatch</code>, and <code>ApprovalForAll</code>, keeping the Kalp ecosystem informed about crucial NFT-related activities.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_15","title":"KRC1155 Token Contract","text":"<p>Event Structures</p> <p>The contract meticulously defines event structures, serving as blueprints for the information broadcasted when events occur. These structures specify the data elements associated with each event, ensuring clarity and consistency in event communication:</p> <ul> <li> <p>Transfer Events: <code>TransferSingle</code> and <code>TransferBatch</code> events capture and broadcast details surrounding NFT transfers, including the sender, recipient, NFT type, and quantity.</p> </li> <li> <p>Approval Events: The <code>ApprovalForAll</code> event transmits information about changes in operator permissions, indicating which operator possesses the ability to manage the owner's NFTs.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_16","title":"KRC1155 Token Contract","text":"<p>Error Handling</p> <p>Robust error handling is a cornerstone of the contract, ensuring graceful management of exceptions and invalid operations. This includes:</p> <ul> <li> <p>Returning informative error objects: In case of unexpected issues, functions return error objects that precisely describe the encountered difficulty, aiding in troubleshooting and rectification.</p> </li> <li> <p>Validating user input: Meticulous input validation safeguards against invalid data being submitted to the contract, preventing unintended consequences and potential exploits.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_17","title":"KRC1155 Token Contract","text":"<p>Security Considerations</p> <p>The contract prioritizes security, implementing robust mechanisms to protect NFT ownership and prevent malicious activity:</p> <ul> <li> <p>Access Controls: Granular access controls are enforced, meticulously restricting unauthorized access to critical functionalities like minting, burning, and transfers. Only authorized entities (e.g., contract owners or designated operators) can execute these actions.</p> </li> <li> <p>Validation of Operations: All operations undergo rigorous validation to ensure they adhere to pre-defined rules and restrictions, safeguarding against unauthorized actions or manipulation attempts.</p> </li> <li> <p>Arithmetic Safety: The contract employs safeguards to prevent overflow and underflow attacks during arithmetic operations, protecting against vulnerabilities that could manipulate NFT balances or lead to unexpected behavior.</p> </li> </ul>"},{"location":"Dev%20documentation/2.%20KRC%20Token%20Standard/3.%20KRC%201155%20Token%20Contract/#_18","title":"KRC1155 Token Contract","text":"<p>Conclusion</p> <p>This KRC1155 contract documentation provides a comprehensive overview for developers to interact with, including minting, burning, transferring, and managing tokens. Adherence to the KRC1155 standard enables efficient multi-token management within a single contract, supporting a wide range of use cases in digital assets.</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/","title":"Write the Smart Contract","text":""},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_1","title":"Write the Smart Contract","text":"<p>Overview</p> <p>We require Kalp SDK to a comprehensive Golang package that simplifies the development of smart contracts on the Kalp blockchain network. It is specifically designed to enable developers to write and create Aa Kalp-blockchain-compliant smart contracts with a set of powerful functionalities.</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_2","title":"Write the Smart Contract","text":"<p>Prerequisites</p> <ul> <li> <p>Golang installation and setup</p> <p>A recent version of Go is recommended preferably 1.19 or earlier 1.20. Compatibility with newer versions might not be guaranteed for all Kalp functionalities.</p> </li> <li> <p>Kalp Software Development Kit (SDK) Installation:</p> <ul> <li> <p>Installation: Install the Kalp SDK by following the official installation instructions provided by the Kalp team. These instructions may involve downloading a pre-built binary or building the SDK from the source code.</p> </li> <li> <p>Documentation: Familiarize yourself with the Kalp SDK documentation, which outlines available functionalities, usage examples, and best practices for interacting with the Kalp platform through your Go applications.</p> </li> </ul> </li> <li> <p>Basic Understanding of Blockchain Fundamentals:</p> <p>Possess a basic understanding of blockchain networks, including concepts like distributed ledgers, consensus mechanisms, and smart contracts.</p> </li> <li> <p>Go Programming Proficiency:</p> <p>Prior experience and proficiency in the Go programming language are essential prerequisites for contributing to Kalp development. This includes understanding core Go syntax, data structures, control flow statements, and error-handling mechanisms.</p> </li> </ul>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_3","title":"Write the Smart Contract","text":"<p>Set up your Development Environment</p> <ul> <li> <p>Download and install the appropriate Golang binary for your operating system from the official Golang download page:  https://go.dev/doc/install. Follow the provided installation instructions to ensure proper integration with your system.</p> </li> <li> <p>Set up your Go workspace, with the following process:</p> <ul> <li> <p>GOPATH: Set the <code>GOPATH</code> environment variable to define your preferred location for storing Go source code, compiled packages, and downloaded dependencies. It's recommended to choose a dedicated directory outside your system directories (e.g., <code>/home/your_username/go</code>).</p> </li> <li> <p>PATH Update: Add the <code>$GOPATH/bin</code> directory to your system's <code>PATH</code> environment variable. This allows you to execute Go commands (like <code>go build</code>, <code>go run</code>) from any terminal location without specifying the full path.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_4","title":"Write the Smart Contract","text":"<p>Creating and Starting Chaincode</p> <ol> <li> <p>Create a new directory for your project.</p> <ol> <li> <p>Execute the following command to create a new directory named <code>my-smart-contract</code></p> </li> <li> <p>Change the directory into the newly created project directory.</p> </li> </ol> </li> </ol> <p>Copy</p> <pre><code>$ mkdir my-smart-contract\n$ cd my-smart-contract\n</code></pre> <ol> <li>Initialize a new Go module: Within the <code>my-smart-contract</code> directory, run the following command to initialize a new Go module named <code>my-smart-contract</code>:</li> </ol> <p>Copy</p> <pre><code>$ go mod init my-smart-contract\n</code></pre> <ol> <li>Getting Started with Kalp-SDK: Use the <code>go get</code> command to download and install the Kalp SDK library:</li> </ol> <p>Copy</p> <pre><code>$ go get -u github.com/p2eengineering/kalp-sdk-public/kalp\n</code></pre> <p>Response:</p> <p>Copy</p> <pre><code>go: downloading golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: downloading golang.org/x/sys v0.17.0\ngo: downloading google.golang.org/grpc v1.62.0\ngo: downloading golang.org/x/net v0.21.0\ngo: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading google.golang.org/genproto v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading github.com/go-openapi/spec v0.20.14\ngo: downloading github.com/go-openapi/swag v0.22.9\ngo: downloading google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: downloading golang.org/x/mod v0.15.0\ngo: added github.com/go-openapi/jsonpointer v0.20.2\ngo: added github.com/go-openapi/jsonreference v0.20.4\ngo: added github.com/go-openapi/spec v0.20.14\ngo: added github.com/go-openapi/swag v0.22.9\ngo: added github.com/gobuffalo/envy v1.10.2\ngo: added github.com/gobuffalo/packd v1.0.2\ngo: added github.com/gobuffalo/packr v1.30.1\ngo: added github.com/golang/protobuf v1.5.3\ngo: added github.com/hyperledger/fabric-chaincode-go v0.0.0-20240124143825-7dec3c7e7d45\ngo: added github.com/hyperledger/fabric-contract-api-go v1.2.2\ngo: added github.com/hyperledger/fabric-protos-go v0.3.3\ngo: added github.com/joho/godotenv v1.5.1\ngo: added github.com/josharian/intern v1.0.0\ngo: added github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: added github.com/mailru/easyjson v0.7.7\ngo: added github.com/p2eengineering/kalp-sdk-public v0.0.0-20240118070807-283512298976\ngo: added github.com/rogpeppe/go-internal v1.12.0\ngo: added github.com/sirupsen/logrus v1.9.3\ngo: added github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb\ngo: added github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415\ngo: added github.com/xeipuuv/gojsonschema v1.2.0\ngo: added golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: added golang.org/x/mod v0.15.0\ngo: added golang.org/x/net v0.21.0\ngo: added golang.org/x/sys v0.17.0\ngo: added golang.org/x/text v0.14.0\ngo: added google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: added google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: added google.golang.org/grpc v1.62.0\ngo: added google.golang.org/protobuf v1.32.0\ngo: added gopkg.in/yaml.v2 v2.4.0\ngo: added gopkg.in/yaml.v3 v3.0.1\n</code></pre> <ol> <li>Create a new Go source file<code>.go</code> within your project directory. This file will house the core logic of your smart contract. Utilize your preferred text editor or IDE to create the file and ensure it's saved with the <code>.go</code> extension.</li> </ol> <p>Copy</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/p2eengineering/kalp-sdk-public/kalpsdk\"\n)\n\ntype SmartContract struct {\n     kalpsdk.Contract\n}\n\nfunc (sc *SmartContract) ExecuteTransaction() {\n    // Implement the logic for executing transactions\n    fmt.Println(\"Executing transaction...\")\n}\n\nfunc (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\n</code></pre> <p>This newly created file will encompass the following core elements:</p> <ul> <li> <p>Package Declaration: <code>package main</code>: This line specifies that the code within this file belongs to the <code>main</code> package, which is the entry point for your smart contract application.</p> </li> <li> <p>Imports:</p> <ul> <li> <p><code>fmt</code>: This import statement allows you to utilize the <code>fmt</code> package, providing functionalities for formatted printing and input/output operations.</p> </li> <li> <p><code>github.com/p2eengineering/kalp-sdk-public/kalpsdk</code>: This import statement brings the Kalp SDK library into your project, granting access to the necessary functionalities for interacting with the Kalp blockchain ecosystem.</p> </li> </ul> </li> <li> <p>Smart Contract Definition: <code>type SmartContract struct { ... }</code>: This part defines a custom struct named <code>SmartContract</code> which serves as the blueprint for your smart contract. It embeds the <code>kalpsdk.Contract</code> type, inheriting functionalities offered by the Kalp SDK framework.</p> </li> <li> <p>Transaction Execution Function: <code>func (sc *SmartContract) ExecuteTransaction() { ... }</code>: This function, named <code>ExecuteTransaction</code>, represents the core logic that will be executed whenever a transaction interacts with your smart contract. Customize this function to encapsulate the specific business logic your smart contract is designed to handle.</p> </li> <li> <p>Initialization Function: <code>func (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error { ... }</code>: This function, named <code>Init</code>, serves as the initialization entry point for your smart contract. It typically defines any setup tasks or initialization logic required for your smart contract to function correctly. It takes a <code>kalpsdk.TransactionContextInterface</code> argument, providing access to contextual information about the ongoing transaction.</p> </li> <li> <p>Create <code>main.go</code> file in the following way.</p> </li> </ul> <p>Copy</p> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/p2eengineering/kalp-sdk/kalpsdk\"\n)\n\nfunc main() {\n\n    contract := kalpsdk.Contract{IsPayableContract: true}\n\n    contract.Logger = kalpsdk.NewLogger()\n    chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})\n    contract.Logger.Info(\"My KAPL SDK sm4\")\n\n    // Create a new instance of your KalpContractChaincode with your smart contract\n    // chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{kalpsdk.Contract{IsPayableContract: true}})\n    // kalpsdk.NewLogger()\n    if err != nil {\n        log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n    }\n\n    // Start the chaincode\n    if err := chaincode.Start(); err != nil {\n        log.Panicf(\"Error starting chaincode: %v\", err)\n    }\n</code></pre> <p>The <code>main.go</code> file stands as the conductor that orchestrates the initialization and execution of your smart contract within the Kalp blockchain environment. It serves as the entry point for your application, bringing your carefully crafted smart contract logic to life. Here's a detailed explanation of its structure:</p> <ul> <li> <p>Necessary Imports:</p> <ul> <li> <p><code>**log**</code> package: This package empowers you to issue logging messages, providing valuable insights into the execution flow and potential errors for debugging purposes.</p> </li> <li> <p><code>**github.com/p2eengineering/kalp-sdk/kalpsdk**</code> package: This import statement grants access to the essential Kalp SDK functionalities for interacting with the blockchain network and managing your smart contract.</p> </li> </ul> </li> <li> <p>The <code>**main**</code> Function: This function serves as the starting point for your application when it's executed. It undertakes the following crucial tasks:</p> </li> <li> <p>Contract Configuration:</p> <ul> <li> <p><code>**contract := kalpsdk.Contract{IsPayableContract: true}**</code>: This line initializes a new <code>Contract</code> object, defining key properties of your smart contract. The <code>IsPayableContract: true</code> setting designates that your contract will be capable of receiving payments from users.</p> </li> <li> <p><code>**contract.Logger = kalpsdk.NewLogger()**</code>: This statement creates a new logger instance and assigns it to the contract, enabling you to generate logging messages for tracking events and debugging.</p> </li> </ul> </li> <li> <p>Chaincode Instantiation:</p> <ul> <li> <p><code>**chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})**</code>: This line constructs a new instance of the <code>KalpContractChaincode</code> type. It integrates your custom <code>SmartContract</code> implementation, effectively bridging your contract logic with the Kalp SDK framework.</p> </li> <li> <p><code>**contract.Logger.Info(\"My KAPL SDK sm4\")**</code>: This statement logs an informative message using the logger, indicating that the chaincode is initialized and ready to commence operations.</p> </li> </ul> </li> <li> <p>Crucial Error Handling:<code>**if err != nil { ... }**</code> blocks: These conditional blocks diligently check for potential errors during chaincode creation and startup. If errors occur, the <code>panicf</code> the function is invoked, terminating execution with an informative error message. This assertive error handling safeguards the integrity of your application and facilitates debugging efforts.</p> </li> <li> <p>Chaincode Activation:<code>**if err := chaincode.Start(); err != nil { ... }**</code>: This block calls the <code>Start()</code> function on the instantiated chaincode, triggering the execution of your smart contract within the Kalp blockchain environment. Once again, error handling is incorporated to gracefully address any issues that might impede chaincode startup.</p> </li> </ul> <p>Note:</p> <p>Payment Tracking for Payable Contracts: Pass your contract <code>_struct_</code> as an argument to the <code>_NewChaincode_</code> function and specify whether the contract is payable or not.</p> <ol> <li>Vendoring the dependencies: This places the external dependencies for your smart contract into a local <code>vendor</code> directory.</li> </ol> <p>Copy</p> <pre><code>$ go mod vendor\n</code></pre> <ol> <li>Folder Structure: After Executing the above command the folder Structure shows up as below:</li> </ol> <p>Copy</p> <pre><code>Folder name\n\u251c\u2500\u2500vendor\n\u251c\u2500\u2500go.mod\n\u251c\u2500\u2500go.sum\n\u251c\u2500\u2500main.go\n\u2514\u2500\u2500 contract\n    \u2514\u2500\u2500 contract.go\n</code></pre> <ol> <li>Save your changes.</li> </ol>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_5","title":"Write the Smart Contract","text":"<p>Implementation Steps with Kalp SDK</p> <ol> <li>Define a New Go Struct: Represent your contract with a new Go struct and embed the <code>kalpsdk.Contract</code> struct to inherit base contract functionalities.</li> </ol> <p>Copy</p> <pre><code>type MyContract struct {\nkalpsdk.Contract\n}\n</code></pre> <ol> <li>Implement the Contract Interface: Define the <code>Init</code> and <code>Invoke</code> methods for initialization logic and invocation handling.</li> </ol> <p>Copy</p> <pre><code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n// Invoke logic return nil\n}\n</code></pre>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_6","title":"Write the Smart Contract","text":"<ol> <li>Blockchain Data Management</li> </ol> <p>This section details the core functionalities available for managing data on the blockchain:</p> <p>Writing to the Blockchain:</p> <ul> <li> <p><code>**PutStateWithKyc**</code>: This function facilitates writing data onto the blockchain ledger. Crucially, it enforces mandatory KYC (Know Your Customer) verification as part of the write operation, ensuring compliance with regulatory requirements or specific platform policies.</p> </li> <li> <p><code>**PutStateWithoutKyc**</code>: This function enables writing data to the blockchain ledger. Unlike its counterpart, it bypasses the KYC verification step, potentially catering to situations where regulatory constraints are not applicable or KYC checks have already been performed at an earlier stage.</p> </li> </ul> <p>Reading from the Blockchain:</p> <ul> <li><code>**GetState**</code>: This function retrieves the data from the blockchain ledger. It allows querying the current state of the ledger to obtain information relevant to your application's needs.</li> </ul> <p>Deleting from the Blockchain:</p> <ul> <li> <p><code>**DelStateWithKyc**</code>: This function enables deleting data from the blockchain ledger. Similar to <code>PutStateWithKyc</code>, it enforces mandatory KYC verification before proceeding with the deletion operation.</p> </li> <li> <p><code>**DelStateWithoutKyc**</code>: This function allows the deleting data from the blockchain ledger. Just as with <code>PutStateWithoutKyc</code>, it bypasses the KYC verification step, potentially catering to specific scenarios where deletion is permitted without additional verification.</p> </li> </ul>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_7","title":"Write the Smart Contract","text":"<p>Sample Code Examples</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_8","title":"Write the Smart Contract","text":"<p>Writing to the Blockchain</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_9","title":"Write the Smart Contract","text":"<p>PutStateWithKyc</p> <p>Copy</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\")) \nif err != nil {\n  // Handle error \n } else {\n  // Data successfully written to the blockchain with KYC verification\n }\n</code></pre>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/1.%20Write%20the%20smart%20contract/#_10","title":"Write the Smart Contract","text":"<p>PutStateWithoutKyc</p> <p>Copy</p> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/2.%20Test%20the%20smart%20contract/","title":"Test the Smart Contract","text":""},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/2.%20Test%20the%20smart%20contract/#_1","title":"Test the Smart Contract","text":"<p>Smart Contract Verification and Testing</p> <p>Step 1: Verify your smart contract's syntax and functionality by compiling it using the following command:</p> <p>Copy</p> <pre><code>$ go build .\n</code></pre> <p>Step 2: A successful compilation signifies that your code adheres to Go language syntax rules and is free of errors.</p> <p>Step 3: Proceed to test your smart contract to ensure its behavior aligns with your expectations. Utilize appropriate testing frameworks or unit tests to simulate interactions with your smart contract and verify its outputs. This step is crucial for identifying and rectifying any potential issues before deployment.</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/3.%20Deploy%20the%20smart%20contract/","title":"Deploy the Smart Contract","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Tired of complex coding and deployment hassles? Building a Smart Contract shouldn't feel like climbing Mount Everest. This guide is here to empower you with a clear and smooth path to creating your Smart Contract. We'll break down the process into easy-to-follow steps, ensuring you have the confidence and knowledge to bring your ideas to life on the blockchain.</p> <p>Smart contracts are digital agreements coded on a blockchain that automatically execute or enforce the terms of a contract when predefined conditions are met. They enable secure, transparent, and decentralized transactions without the need for intermediaries.</p> <p>So, let\u2019s begin with the Smart Contract creation on Kalp Studio.</p> <p>Note: To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/3.%20Deploy%20the%20smart%20contract/#_1","title":"Deploy the Smart Contract","text":"<p>Smart Contract Creation</p> <p>Step 1: Initiating Smart Contract Creation: For first-time users, the screen with no Smart Contract list will be displayed.</p> <p></p> <p>Figure 1: Initiate Smart Contract</p> <p>To create a Smart Contract you have to agree to Kalp Studio's Terms and Conditions.</p> <p></p> <p>Figure 2: Kalp Studio Terms and Conditions</p> <p>After you agree to the terms and conditions, you can start creating the Smart Contract. Click on Create Smart Contract.</p> <p></p> <p>Figure 3: Create Smart Contract</p> <p>Access the \"Smart Contract\" section via the left panel bar on Kalp Studio.</p> <p></p> <p>Figure 4: Contract Details</p> <p>Select the \"Create Smart Contract\" button. Alternatively, this can also be achieved through the \"Create Smart Contract\" option on the Dashboard.</p> <p>Step 2: Detailing the Smart Contract:</p> <p></p> <p>Figure 5: Smart Contract Details</p> <ul> <li> <p>Name: Assign a distinctive name to the Smart Contract.</p> </li> <li> <p>Project: Identify the overarching project or system the Smart Contract integrates with.</p> </li> <li> <p>Description: Offer a concise description outlining the contract's functionality.</p> </li> </ul> <p>Step 3: Environment Selection:</p> <p></p> <p>Figure 6: Setup Environment</p> <p>Opt for the appropriate environment for deployment: \"Development\", \"Staging\", or \"Production\".</p> <p>Step 4: Network Selection:</p> <p></p> <p>Figure 7: Network Selection</p> <p>Determine the deployment network - \"TestNet\".</p> <p>Step 5: Template Utilization and Submission:</p> <p></p> <p>Figure 8: Extension File/Template</p> <p>Kalp Studio provides ERC token templates. Select the relevant template for your needs.</p> <p></p> <p>Figure 9: Kalp Templates</p> <p>Download, complete, and upload the filled template to Kalp Studio for review and subsequent actions.</p> <p>Step 6: Final Review and Publication:</p> <p></p> <p>Figure 10: Review</p> <p>Save Draft</p> <p>If you want to pause the Smart Contract creation and would like to visit it later then Save Draft is a great option!</p> <p>In this option, all fields are editable and can be modified at a later point.</p> <p>Save &amp; Publish</p> <p>After you Save &amp; Publish the Smart Contract gets deployed on the Kalp blockchain. You can still edit the Smart Contract Name and Description. All other fields are non-editable.</p> <p>The published Smart Contract gets added to the list of Smart Contracts. If the user wants to make some changes in Smart Contract, Save Draft option can be used. The saved draft can be edited anytime by the user.</p> <p>List of Smart Contracts</p> <p>Adhering to these steps will ensure the professional and efficient creation of a Smart Contract on Kalp Studio, streamlining your project's development process. You can view the list of newly created Smart Contract after Save and Publish.</p> <p></p> <p>Figure 11: List of Smart Contacts</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/4.%20Interacting%20with%20smart%20contract/","title":"Interacting with smart contract","text":"<p>Interacting with Smart Contract</p> <p>Interacting with Your Smart Contract</p> <ol> <li> <p>Establish a connection to the relevant blockchain network, enabling your application to interact with the deployed smart contracts.</p> </li> <li> <p>Kalp Studio automatically generates API endpoints that directly map to the functionalities of your smart contracts. These endpoints simplify integration by providing a well-defined interface for your front-end application to interact with the underlying smart contract logic.</p> </li> </ol> <p></p> <p>Steps to Deploy and test the smart contract API endpoints:</p> <ul> <li>Deployment of Smart Contract through Kalp Studio:  Utilize the  generated API endpoints  directly within your front-end application (e.g., React.js, Next.js). This approach seamlessly integrates smart contract functionalities into your user interface, enabling dynamic interactions and data retrieval.</li> </ul> <p>Check out the Freshdesk Article: How to deploy a Smart Contract? or How Can I Perform Transactions using API Endpoints?</p> <ul> <li>Checking and Testing API Endpoints:  Employ  Postman, a popular API testing tool, to send requests to the generated API endpoints. This method facilitates individual function testing, allowing you to verify their behavior and outputs in a controlled environment before integrating them into your front-end application.</li> </ul> <p>Postman Testing for Kalp Smart Contract API Endpoints</p> <p>Following successful smart contract deployment and API endpoint generation within Kalp Studio, delve into the essential steps for testing these endpoints using Postman:</p> <ol> <li>Reading from the Smart Contract</li> </ol> <p>Kalp Studio enables efficient data retrieval from deployed smart contracts using  read-only methods. These methods allow your application to query the blockchain ledger without modifying its state.</p> <p>Example:  To retrieve a user's account balance, you would invoke the  <code>ClientAccountBalance</code>  function through the generated API endpoint. This function would fetch the relevant data from the ledger and return it to your application.</p> <p>By leveraging read-only methods, you can access crucial information from the blockchain without altering its state, ensuring data integrity and facilitating various application functionalities.</p> <p></p> <p>Sample Result: ClientAccountBalance Function</p> <ol> <li>Writing to the Smart Contract</li> </ol> <p>Kalp Studio empowers developers to perform  write operations, which involve modifying the state of the blockchain ledger through smart contract interactions. These operations typically involve sending transactions to specific contract functions provided by the Kalp SDK.</p> <p>Example:  To transfer tokens, you would utilize the appropriate function (e.g.,  <code>Transfer</code>) through the generated API endpoint. This function would initiate a transaction on the blockchain, deducting tokens from the sender's account and crediting them to the recipient's account.</p> <p></p> <p>Sample Result: MintBatch Function</p> <ol> <li>Transaction Management:  With the Kalp SDK, developers can efficiently manage transactions on the blockchain network. It provides functions for submitting transactions, querying transaction information, and retrieving transaction history. This simplifies the process of interacting with the blockchain and ensures the integrity of transactional operations.</li> </ol> <p>Example:  All the Functions provided as:  <code>PutStateWithKYC, DelStateWithoutKYC, DelStateWithKYC, GetState, GetTxID, GetChannelD, SetEvent, GetUserID.</code></p>"},{"location":"Dev%20documentation/3.%20Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/4.%20Interacting%20with%20smart%20contract/#conclusion","title":"Conclusion","text":"<p>You're now ready to begin your journey as a Kalp blockchain developer. Experiment with different types of smart contracts, explore the functionalities offered by the Kalp SDK, and start building innovative DApps on the Kalp blockchain.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/","title":"KRC1155 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-1155 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_1","title":"KRC 1155 Token Contract","text":"<p>Overview</p> <p>This document outlines the technical details and functionalities of an KRC1155 token contract implemented in Go, utilizing the Kalp SDK for blockchain operations. The KRC1155 standard enables efficient multi-token transactions and interactions, supporting both fungible and non-fungible token types within a single contract.</p> <p>Prerequisites</p> <ul> <li> <p>Basic understanding of Go programming language.</p> </li> <li> <p>Familiarity with blockchain concepts, KRC1155 token standards, and smart contract development.</p> </li> <li> <p>KalpSDK environment set up for blockchain interaction.</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_2","title":"KRC 1155 Token Contract","text":"<p>Contract Functions</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_3","title":"KRC 1155 Token Contract","text":"<p>Initialize Function</p> <p>Within the Kalp NFT contract, the <code>Initialize</code> method serves as a meticulous architect, establishing the foundational configurations that shape the contract's identity and functionality. It acts as a crucial starting point, ensuring essential parameters are set before any subsequent interactions can occur.</p> <pre><code>func (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Initialization logic here\n}\n</code></pre> <p>Key Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The chosen title that will gracefully adorn the token collection, defining its unique character within the Kalp ecosystem.</p> </li> <li> <p><code>**symbol**</code> (string): A concise and potent emblem that will serve as the collection's identifier, akin to a heraldic crest in the digital realm.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**bool**</code>: A boolean value indicating the outcome of the initialization endeavor:</p> <ul> <li> <p><code>**true**</code>: The initialization process has successfully crafted a solid foundation, and the contract is poised for further interactions.</p> </li> <li> <p><code>**false**</code>: Unexpected challenges have derailed the initialization attempt, requiring attention and corrective measures.</p> </li> </ul> </li> <li> <p><code>**error**</code>: If obstacles arose during initialization, an error object emerges, carrying valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_4","title":"KRC 1155 Token Contract","text":"<p>Mint Function</p> <p>The <code>Mint</code> method acts as a powerful sculptor, meticulously crafting and issuing NFTs into existence. It serves as the cornerstone for NFT creation, enabling the minting of a designated number of tokens and assigning them to a specified recipient.</p> <pre><code>func (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the intended recipient who will receive the newly minted NFTs.</p> </li> <li> <p><code>**id**</code> (uint64): A numerical identifier that serves as a starting point for minting a sequence of NFTs.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise number of NFTs to be minted and bestowed upon the recipient.</p> </li> </ul> <p>Return Value:<code>**error**</code>: In the event of unforeseen minting obstacles, an error object surfaces, shedding light on the nature of the difficulty. It is important to note that the method signature only explicitly indicates an error return type, implying a successful mint operation wouldn't return anything specific.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_5","title":"KRC 1155 Token Contract","text":"<p>MintBatch Function</p> <p>The <code>MintBatch</code> method embodies the spirit of efficiency, enabling the creation and allocation of multiple NFTs in a single, streamlined operation. It empowers the minting of diverse NFT types, each with its unique identifier and quantity, fostering a more efficient workflow for creators and distributors.</p> <pre><code>func (s *SmartContract) MintBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch minting logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the intended recipient who will receive the minted NFTs.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of numerical identifiers, meticulously assigned to each NFT within the batch, establishing their distinct identities.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): An array of corresponding values, precisely indicating the quantity of NFTs to be minted for each respective identifier within the batch.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_6","title":"KRC 1155 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> method serves as a transformative force, deliberately removing NFTs from existence and reducing their overall supply. It acts as a counterbalance to minting, fostering scarcity and potentially enhancing the value of remaining tokens.</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, account string, id uint64, amount uint64) error {\n    // Burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the individual or entity that will relinquish their ownership of the NFTs, triggering their removal.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier that pinpoints the specific type of NFTs destined for the burning process.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise quantity of NFTs to be extracted from the account and irrevocably removed from circulation.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_7","title":"KRC 1155 Token Contract","text":"<p>BurnBatch Function</p> <p>The <code>BurnBatch</code> method embodies efficiency and precision, enabling the coordinated removal and destruction of multiple NFT types within a single, streamlined transaction. It serves as an optimized approach to managing NFT supply and unlocking various functionalities within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BurnBatch(sdk kalpsdk.TransactionContextInterface, account string, ids []uint64, amounts []uint64) error {\n    // Batch burning logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating their irreversible removal.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, meticulously pinpointing the distinct types of NFTs destined for the synchronized burning process.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): An array of corresponding values, precisely indicating the quantities of each respective NFT type to be extracted from the account and permanently extinguished.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_8","title":"KRC 1155 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> method acts as a facilitator, enabling the seamless transfer of ownership for designated NFTs from one account to another. It empowers vibrant secondary markets and fosters dynamic ownership experiences within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, id uint64, amount uint64) error {\n    // Single transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**sender**</code> (string): The blockchain address of the individual or entity relinquishing ownership of the NFTs, initiating the transfer process.</p> </li> <li> <p><code>**recipient**</code> (string): The blockchain address of the intended recipient who will receive the NFTs and assume ownership.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier pinpointing the specific type of NFTs to be transferred.</p> </li> <li> <p><code>**amount**</code> (uint64): The precise quantity of NFTs to be extracted from the sender's account and bestowed upon the recipient.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_9","title":"KRC 1155 Token Contract","text":"<p>BatchTransferFrom Function</p> <p>The <code>BatchTransferFrom</code> method embodies efficiency and coordination, enabling the seamless transfer of ownership for diverse NFT types within a single, streamlined transaction. It fosters efficient exchange processes, minimizing transaction costs and enhancing user experience.</p> <pre><code>func (s *SmartContract) BatchTransferFrom(sdk kalpsdk.TransactionContextInterface, sender string, recipient string, ids []uint64, amounts []uint64) error {\n    // Batch transfer logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**sender**</code> (string): The blockchain address of the individual or entity initiating the transfer, relinquishing ownership of the NFTs.</p> </li> <li> <p><code>**recipient**</code> (string): The blockchain address of the intended recipient who will assume ownership of the transferred NFTs.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, pinpointing the precise types of NFTs to be included in the batch transfer.</p> </li> <li> <p><code>**amounts**</code> ([]uint64): A corresponding array of values, specifying the quantities of each respective NFT type to be transferred.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_10","title":"KRC 1155 Token Contract","text":"<p>SetApprovalForAll Function</p> <p>The <code>SetApprovalForAll</code> method acts as a delegation tool, enabling granular control over NFT management permissions. It empowers users to grant or revoke the ability for a designated operator (often another smart contract) to transfer all their NFTs on their behalf.</p> <pre><code>func (s *SmartContract) SetApprovalForAll(sdk kalpsdk.TransactionContextInterface, operator string, approved bool) error {\n    // Approval logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The blockchain address of the operator (typically another smart contract) to whom permissions are being granted or revoked.</p> </li> <li> <p><code>**approved**</code> (bool): A boolean value signifying the desired authorization state:</p> <ul> <li> <p><code>**true**</code>: Grants the specified operator permission to manage all of the caller's NFTs.</p> </li> <li> <p><code>**false**</code>: Revokes any previously granted permission for the operator to manage the caller's NFTs.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_11","title":"KRC 1155 Token Contract","text":"<p>IsApprovedForAll Function</p> <p>the <code>IsApprovedForAll</code> method acts as a transparency tool, enabling users and other smart contracts to verify the authorization status of a designated operator. It empowers informed decision-making and fosters trust within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) IsApprovedForAll(sdk kalpsdk.TransactionContextInterface, account string, operator string) (bool, error) {\n    // Check approval status here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the NFT owner whose permissions are being queried.</p> </li> <li> <p><code>**operator**</code> (string): The blockchain address of the operator whose authorization status is being investigated.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_12","title":"KRC 1155 Token Contract","text":"<p>BalanceOf Function</p> <p>the <code>BalanceOf</code> method serves as a meticulous bookkeeper, enabling the querying of NFT balances associated with a specific account and token type. It provides a transparent and accessible way to ascertain digital asset ownership within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string, id uint64) (uint64, error) {\n    // Balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**account**</code> (string): The blockchain address of the account whose NFT balance is being investigated.</p> </li> <li> <p><code>**id**</code> (uint64): The unique numerical identifier representing the specific type of NFTs for which the balance is sought.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_13","title":"KRC 1155 Token Contract","text":"<p>BalanceOfBatch Function</p> <p>The <code>BalanceOfBatch</code> method embodies optimization, enabling the efficient querying of NFT balances for multiple accounts and token types within a single operation. It streamlines data retrieval, minimizing transaction costs and enhancing user experience within the Kalp ecosystem.</p> <pre><code>func (s *SmartContract) BalanceOfBatch(sdk kalpsdk.TransactionContextInterface, accounts []string, ids []uint64) ([]uint64, error) {\n    // Batch balance query logic here\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**accounts**</code> ([]string): An array of blockchain addresses representing the accounts for which NFT balances are being queried.</p> </li> <li> <p><code>**ids**</code> ([]uint64): An array of unique numerical identifiers, each corresponding to a specific type of NFT for which balances are sought.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_14","title":"KRC 1155 Token Contract","text":"<p>Helper Functions</p> <p>Within the Kalp NFT smart contract, a suite of helper functions acts as the workhorses, meticulously handling fundamental operations. These functions encapsulate specific tasks, promoting code modularity, reusability, and maintainability.</p> <ul> <li> <p>Minting and Burning: Functions like <code>mintHelper</code>, <code>addBalance</code>, and <code>removeBalance</code> meticulously handle the creation and destruction of NFTs, ensuring accurate state updates and adherence to defined rules.</p> </li> <li> <p>Event Emissions: Dedicated functions manage the emission of events like <code>TransferSingle</code>, <code>TransferBatch</code>, and <code>ApprovalForAll</code>, keeping the Kalp ecosystem informed about crucial NFT-related activities.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_15","title":"KRC 1155 Token Contract","text":"<p>Event Structures</p> <p>The contract meticulously defines event structures, serving as blueprints for the information broadcasted when events occur. These structures specify the data elements associated with each event, ensuring clarity and consistency in event communication:</p> <ul> <li> <p>Transfer Events: <code>TransferSingle</code> and <code>TransferBatch</code> events capture and broadcast details surrounding NFT transfers, including the sender, recipient, NFT type, and quantity.</p> </li> <li> <p>Approval Events: The <code>ApprovalForAll</code> event transmits information about changes in operator permissions, indicating which operator possesses the ability to manage the owner's NFTs.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_16","title":"KRC 1155 Token Contract","text":"<p>Error Handling</p> <p>Robust error handling is a cornerstone of the contract, ensuring graceful management of exceptions and invalid operations. This includes:</p> <ul> <li> <p>Returning informative error objects: In case of unexpected issues, functions return error objects that precisely describe the encountered difficulty, aiding in troubleshooting and rectification.</p> </li> <li> <p>Validating user input: Meticulous input validation safeguards against invalid data being submitted to the contract, preventing unintended consequences and potential exploits.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_17","title":"KRC 1155 Token Contract","text":"<p>Security Considerations</p> <p>The contract prioritizes security, implementing robust mechanisms to protect NFT ownership and prevent malicious activity:</p> <ul> <li> <p>Access Controls: Granular access controls are enforced, meticulously restricting unauthorized access to critical functionalities like minting, burning, and transfers. Only authorized entities (e.g., contract owners or designated operators) can execute these actions.</p> </li> <li> <p>Validation of Operations: All operations undergo rigorous validation to ensure they adhere to pre-defined rules and restrictions, safeguarding against unauthorized actions or manipulation attempts.</p> </li> <li> <p>Arithmetic Safety: The contract employs safeguards to prevent overflow and underflow attacks during arithmetic operations, protecting against vulnerabilities that could manipulate NFT balances or lead to unexpected behavior.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%201155%20Token%20Contract/#_18","title":"KRC 1155 Token Contract","text":"<p>Conclusion</p> <p>This KRC1155 contract documentation provides a comprehensive overview for developers to interact with, including minting, burning, transferring, and managing tokens. Adherence to the KRC1155 standard enables efficient multi-token management within a single contract, supporting a wide range of use cases in digital assets.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/","title":"KRC20 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-20 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_1","title":"KRC 20 Token Contract","text":"<p>Overview</p> <p>This document outlines the technical details and functionalities of a KRC20 token contract implemented in Go. The contract leverages the Kalp SDK for operations within a blockchain network, providing a framework for issuing, transferring, and managing tokenized assets compliant with the KRC20 standard.</p> <p>Prerequisites</p> <ul> <li> <p>Familiarity with the Go programming language</p> </li> <li> <p>Basic understanding of blockchain concepts and KRC20 token standards</p> </li> <li> <p>Installation of the Kalp SDK</p> </li> <li> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_2","title":"KRC 20 Token Contract","text":"<p>Initialize Token Contract</p> <p>The <code>Initialize</code> function initializes a token contract with essential details, making it ready for subsequent interactions. This function must be called prior to any other contract functionalities to establish the token's name, symbol, and decimal places.</p> <p>Implementation (Go):</p> <pre><code>// Set information for a token and initialize contract.\nfunc (s *SmartContract) Initialize(sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error) {\n    // Authorization and initialization checks omitted for brevity\n\n    err := sdk.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n\n    // Symbol and decimals setting omitted for brevity\n\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The human-readable name of the token (e.g., \"MyCoin\").</p> </li> <li> <p><code>**symbol**</code> (string): The abbreviated symbol of the token (e.g., \"MYC\").</p> </li> <li> <p><code>**decimals**</code> (string): The number of decimal places the token utilizes (e.g., \"18\" for 18 decimal places representing cents).</p> </li> </ul> <p>Function Breakdown:</p> <ul> <li> <p><code>**Initialize (sdk kalpsdk.TransactionContextInterface, name string, symbol string, decimals string) (bool, error)**</code>:</p> <ul> <li> <p>This function accepts four arguments:</p> <ul> <li> <p><code>sdk</code>: Reference to the Kalp SDK for blockchain interaction.</p> </li> <li> <p><code>name</code>: The token name.</p> </li> <li> <p><code>symbol</code>: The token symbol.</p> </li> <li> <p><code>decimals</code>: The number of decimal places for the token.</p> </li> </ul> </li> <li> <p>Return: It returns a boolean value indicating success (<code>true</code>) or failure (<code>false</code>) along with any potential errors.</p> </li> </ul> </li> </ul> <p>Authorization: Yes, only authorized clients (e.g., Deployer) can call the <code>Initialize</code> function. This ensures proper control over token creation and prevents unauthorized deployments.</p> <p>Authorization checks are crucial and intentionally omitted for brevity. Specific authorization mechanisms depend on the smart contract's design and deployment environment.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_3","title":"KRC 20 Token Contract","text":"<p>Token Operations</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_4","title":"KRC 20 Token Contract","text":"<p>Mint Function</p> <p>The <code>Mint</code> function enables the creation of new tokens and subsequent additions to the minter's account balance. This operation also increases the total supply of the token in circulation.</p> <p>Implementation (Go):</p> <pre><code>// Mint creates new tokens and adds them to minter's account balance.\nfunc (s *SmartContract) Mint(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return fmt.Errorf(\"mint amount must be a positive integer\")\n    }\n\n    // Update balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**amount**</code> (int): The positive integer value represents the number of tokens to be minted.</li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the minting operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_5","title":"KRC 20 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> function permanently removes a specified number of tokens from the minter's account balance, effectively reducing the total supply of tokens in circulation.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Burn(sdk kalpsdk.TransactionContextInterface, amount int) error {\n    // Initialization and authorization checks omitted for brevity\n\n    if amount &lt;= 0 {\n        return errors.New(\"burn amount must be a positive integer\")\n    }\n\n    // Retrieve, update, and save the new balance and total supply logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**amount**</code> (int): The positive integer value represents the number of tokens to be burned.</li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the burning operation fails. The error message provides details about the encountered issue.</li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_6","title":"KRC 20 Token Contract","text":"<p>Transfer Function</p> <p>The <code>Transfer</code> function facilitates the movement of tokens between accounts within the Kalp ecosystem. It allows the caller (the account initiating the transaction) to send a specified number of tokens to a recipient account.</p> <p>Implementation (Go):</p> <pre><code>// Transfer transfers tokens from the client account to the recipient account.\nfunc (s *SmartContract) Transfer(sdk kalpsdk.TransactionContextInterface, recipient string, amount int) error {\n    // Initialization checks omitted for brevity\n\n    err := transferHelper(sdk, clientID, recipient, amount)\n    if err != nil {\n        return fmt.Errorf(\"failed to transfer: %v\", err)\n    }\n\n    // Emit Transfer event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**recipient**</code> (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p><code>**amount**</code> (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: This function returns an error object if the transfer operation fails. The error message provides details about the encountered issue, such as insufficient funds or an invalid recipient address.</li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_7","title":"KRC 20 Token Contract","text":"<p>BalanceOf Function</p> <p>The <code>BalanceOf</code> function serves as a key tool for retrieving the token balance associated with a specific account within the Kalp ecosystem. It provides a reliable and transparent way to query account holdings.</p> <p>Implementation (Go):</p> <pre><code>// BalanceOf returns the balance of the given account.\nfunc (s *SmartContract) BalanceOf(sdk kalpsdk.TransactionContextInterface, account string) (int, error) {\n    // Initialization checks omitted for brevity\n\n    balanceBytes, err := sdk.GetState(account)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read from world state: %v\", err)\n    }\n\n    balance, _ := strconv.Atoi(string(balanceBytes))\n\n    return balance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**account**</code> (string): The unique identifier of the account whose balance is to be queried.</li> </ul> <p>Return Value:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the token balance of the specified account.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the balance retrieval process, the function returns an error object along with a descriptive error message.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_8","title":"KRC 20 Token Contract","text":"<p>Approval Function</p> <p>The <code>Approve</code> function empowers the caller (the account initiating the transaction) to grant spending authorization to another account, designated as the spender. This allows the spender to withdraw tokens from the caller's account multiple times up to a predefined maximum amount. This functionality underpins various use cases within decentralized applications (dApps) built on the Kalp blockchain.</p> <p>Implementation (Go):</p> <pre><code>// Approve allows the spender to withdraw from the calling client's token account.\nfunc (s *SmartContract) Approve(sdk kalpsdk.TransactionContextInterface, spender string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Create allowanceKey and update the state with the value\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    err := sdk.PutStateWithoutKYC(allowanceKey, []byte(strconv.Itoa(value)))\n    if err != nil {\n        return fmt.Errorf(\"failed to update state of smart contract for key %s: %v\", allowanceKey, err)\n    }\n\n    // Emit Approval event logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**spender**</code> (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> <li> <p><code>**value**</code> (int): The positive integer value representing the maximum allowable withdrawal amount.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: The function returns an error object if the approval process fails. The error message provides details about the encountered issue, such as invalid parameters, permission errors, or issues with underlying SDK functions.</li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_9","title":"KRC 20 Token Contract","text":"<p>Allowance Function</p> <p>The <code>Allowance</code> function serves as a vital tool for retrieving the remaining allowance granted to a specific spender by the owner of a token account. This information is crucial for understanding the authorized spending capacity of the spender and ensuring proper control over token transfers within the Kalp ecosystem.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Allowance(sdk kalpsdk.TransactionContextInterface, owner string, spender string) (int, error) {\n    // Initialization checks omitted for brevity\n    allowanceKey, _ := sdk.CreateCompositeKey(allowancePrefix, []string{owner, spender})\n    allowanceBytes, err := sdk.GetState(allowanceKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to read allowance: %v\", err)\n    }\n    if allowanceBytes == nil {\n        return 0, nil // No allowance set\n    }\n    allowance, _ := strconv.Atoi(string(allowanceBytes))\n    return allowance, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**owner**</code> (string): The unique identifier of the account that owns the tokens.</p> </li> <li> <p><code>**spender**</code> (string): The unique identifier of the account authorized to withdraw tokens.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the remaining number of tokens that the spender is authorized to withdraw from the owner's account.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the encountered issue.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_10","title":"KRC 20 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> function empowers a designated spender to initiate token transfers on behalf of the owner, enabling a flexible and controlled mechanism for token movement within the Kalp ecosystem. It's particularly useful in scenarios where third-party services or applications need to manage tokens for users.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) TransferFrom(sdk kalpsdk.TransactionContextInterface, from string, to string, value int) error {\n    // Initialization checks omitted for brevity\n\n    // Retrieve and check the allowance of the spender\n    // Decrease the allowance\n    // Perform the transfer using `transferHelper`\n    // Logic omitted for brevity\n\n    return nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**from**</code> (string): The unique identifier of the account owning the tokens to be transferred.</p> </li> <li> <p><code>**to**</code> (string): The unique identifier of the recipient account that will receive the tokens.</p> </li> <li> <p><code>**value**</code> (int): The positive integer value representing the number of tokens to be transferred.</p> </li> </ul> <p>Return Value:</p> <ul> <li><code>**error**</code>: The function returns an error object if the transfer process fails. The error message provides details about the encountered issue, such as insufficient allowance, invalid parameters, or other potential errors.</li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_11","title":"KRC 20 Token Contract","text":"<p>Token Information Function</p> <p>The <code>Name</code> function serves as a fundamental tool for accessing the descriptive name associated with a token within the Kalp ecosystem. This information is crucial for identifying and understanding the token's purpose and characteristics within various applications and interactions.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Name(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(nameKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get token name: %v\", err)\n    }\n    return string(bytes), nil\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The function returns a string value representing the token's name. This name typically aligns with the token's intended use cases and branding.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message explaining the issue, such as potential database errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_12","title":"KRC 20 Token Contract","text":"<p>Symbol Function</p> <p>The <code>Symbol</code> function acts as a dedicated tool for retrieving the unique symbol associated with a token within the Kalp ecosystem. This symbol serves as a concise and recognizable identifier, enabling efficient communication and exchange across various applications and interfaces.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) Symbol(sdk kalpsdk.TransactionContextInterface) (string, error) {\n     // Initialization checks omitted for brevity\n    bytes, err := sdk.GetState(symbolKey)\n    if err != nil {\n        return \"\", fmt.Errorf(\"failed to get Symbol: %v\", err)\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The function returns a string value representing the token's symbol. This symbol typically adheres to conventional shorthand conventions for clarity and consistency (e.g., \"MTK,\" \"KALP\").</p> </li> <li> <p><code>**error**</code>: If an error occurs during retrieval, the function returns an error object along with a descriptive message detailing the issue, aiding in troubleshooting and issue resolution.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_13","title":"KRC 20 Token Contract","text":"<p>TotalSupply Function</p> <p>The <code>TotalSupply</code> function serves as a vital tool for retrieving the total number of tokens that have been created and issued within the Kalp ecosystem. This information provides a crucial metric for understanding the overall token distribution and scarcity, which are fundamental aspects of token economics and market dynamics.</p> <p>Implementation (Go):</p> <pre><code>func (s *SmartContract) TotalSupply(sdk kalpsdk.TransactionContextInterface) (int, error) {\n     // Initialization checks omitted for brevity\n    totalSupplyBytes, err := sdk.GetState(totalSupplyKey)\n    if err != nil {\n        return 0, fmt.Errorf(\"failed to retrieve total token supply: %v\", err)\n    }\n    if totalSupplyBytes == nil {\n        return 0, nil // No tokens minted yet\n    }\n    totalSupply, _ := strconv.Atoi(string(totalSupplyBytes))\n    return totalSupply, nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**int**</code>: The function returns an integer value representing the total number of tokens currently in circulation within the Kalp ecosystem.</p> </li> <li> <p><code>**error**</code>: If an error occurs during the retrieval process, the function returns an error object along with a descriptive message detailing the encountered issue, such as potential storage errors or invalid access attempts.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_14","title":"KRC 20 Token Contract","text":"<p>Helper Functions</p> <p>Included are several helper functions for internal logic, such as <code>transferHelper</code>, <code>add</code>, <code>sub</code>, and <code>checkInitialized</code>, which ensures the correct execution of token operations and state management.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_15","title":"KRC 20 Token Contract","text":"<p>Error Handling</p> <p>All operations include detailed error reporting to ensure developers can diagnose and resolve issues during integration and interaction with the contract.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_16","title":"KRC 20 Token Contract","text":"<p>Events</p> <p>The contract emits events for significant actions such as transfers and approvals, facilitating off-chain applications and services to react to contract state changes.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_17","title":"KRC 20 Token Contract","text":"<p>Security Considerations</p> <ul> <li> <p>Ensure proper access control is enforced, particularly for sensitive operations like <code>Mint</code> and <code>Burn</code>.</p> </li> <li> <p>Validate input parameters to mitigate risks such as reentrancy attacks and overflow/underflow vulnerabilities.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%2020%20Token%20Contract/#_18","title":"KRC 20 Token Contract","text":"<p>Conclusion</p> <p>This KRC20 token contract implemented in Go, utilizing the KalpSDK, provides a comprehensive suite of functionalities for managing digital assets on a blockchain network. The documentation outlined above offers a detailed guide for developers to integrate and leverage these capabilities within their applications.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/","title":"KRC721 Token Contract","text":"<p>This guide serves as a roadmap, navigating you through the intricacies of crafting and deploying secure, versatile, and feature-rich KRC-721 tokens that fuel innovation within the Kalp ecosystem.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_1","title":"KRC 721 Token Contract","text":"<p>Overview</p> <p>This document provides technical details and guidelines for interacting with an KRC721 token contract implemented in Go. This contract utilizes the Kalp SDK to facilitate operations within a blockchain network, enabling the creation, management, and transfer of non-fungible tokens (NFTs).</p> <p>Prerequisites</p> <ul> <li> <p>Understanding of Go programming language</p> </li> <li> <p>Basic knowledge of blockchain and NFT concepts</p> </li> <li> <p>Installed KalpSDK environment</p> </li> </ul> <p>Note</p> <p>The SDK is compatible with Go version 1.19&gt; or &lt;1.20.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_2","title":"KRC 721 Token Contract","text":"<p>Initialize Token Contract</p> <p>The <code>Initialize</code> method serves as a crucial first step in configuring a Kalp-based ERC721 token contract. It establishes the name and symbol that will be indelibly associated with the token collection, ensuring clarity and consistency throughout its lifecycle.</p> <p>Implementation (Go):</p> <pre><code>func (c *TokenERC721Contract) Initialize(ctx kalpsdk.TransactionContextInterface, name string, symbol string) (bool, error) {\n    // Authorization check omitted for brevity\n    err := ctx.PutStateWithoutKYC(nameKey, []byte(name))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token name: %v\", err)\n    }\n    err = ctx.PutStateWithoutKYC(symbolKey, []byte(symbol))\n    if err != nil {\n        return false, fmt.Errorf(\"failed to set token symbol: %v\", err)\n    }\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**name**</code> (string): The human-readable name that designates the token collection, often aligning with its intended use cases or branding.</p> </li> <li> <p><code>**symbol**</code> (string): A concise and recognizable symbol that serves as a shorthand identifier for the token collection, typically following conventional naming conventions (e.g., \"MTK\" or \"KALP\").</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method returns a boolean value indicating success or failure, accompanied by an error object if any issues arise during initialization.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_3","title":"KRC 721 Token Contract","text":"<p>MintWithTokenURI Function</p> <p>The <code>MintWithTokenURI</code> method holds the power to create brand-new NFTs (Non-Fungible Tokens) within the Kalp ecosystem, cementing their unique existence and linking them with rich metadata. It serves as a cornerstone for establishing ownership and unlocking the diverse possibilities that NFTs offer.</p> <pre><code>func (c *TokenERC721Contract) MintWithTokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string, tokenURI string) (*Nft, error) {\n    // Initialization and authorization checks omitted for brevity\n    nft := &amp;Nft{TokenId: tokenId, Owner: /* Owner's identity */, TokenURI: tokenURI}\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Balance and Transfer event logic omitted for brevity\n    return nft, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**tokenId**</code> (string): An unequivocally unique identifier assigned to the NFT, ensuring its individuality and preventing any chance of duplication.</p> </li> <li> <p><code>**tokenURI**</code> (string): A Universal Resource Identifier (URI), acting as a digital address that points to a JSON file containing comprehensive metadata about the NFT's attributes, details, and potential functionalities.</p> </li> </ul> <p>Return Values:<code>**(*Nft, error)**</code>: Upon successful minting, the method returns a pointer to the newly created <code>Nft</code> object, containing its essential information. It also includes an error object if any issues arise during the process.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_4","title":"KRC 721 Token Contract","text":"<p>Burn Function</p> <p>The <code>Burn</code> method wields the definitive power to permanently remove NFTs (Non-Fungible Tokens) from the Kalp ecosystem, executing an irreversible act of destruction that revokes their presence and ownership. It serves as a mechanism for managing token supply, addressing specific use cases, or even symbolizing artistic expression.</p> <pre><code>func (c *TokenERC721Contract) Burn(ctx kalpsdk.TransactionContextInterface, tokenId string) (bool, error) {\n    // Ownership and initialization checks omitted for brevity\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    ctx.DelStateWithoutKYC(nftKey)\n    // Remove from balance and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that pinpoints the specific NFT destined for elimination.</li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method indicates its success or failure by returning a boolean value, accompanied by an error object if any issues arise during the burning process.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_5","title":"KRC 721 Token Contract","text":"<p>TransferFrom Function</p> <p>The <code>TransferFrom</code> method sits at the heart of NFT (Non-Fungible Token) movement within the Kalp ecosystem, meticulously orchestrating the transfer of ownership from one entity to another. It stands as the cornerstone for enabling seamless transactions, trading, and sharing of NFTs.</p> <pre><code>func (c *TokenERC721Contract) TransferFrom(ctx kalpsdk.TransactionContextInterface, from string, to string, tokenId string) (bool, error) {\n    // Initialization, ownership, and approval checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Owner = to\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Update balance keys and emit Transfer event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**from**</code> (string): The current owner of the NFT, relinquishing their control.</p> </li> <li> <p><code>**to**</code> (string): The designated recipient who will assume ownership of the NFT.</p> </li> <li> <p><code>**tokenId**</code> (string): The unique identifier that unequivocally designates the specific NFT being transferred.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method signals its success or failure through a boolean value, also returning an error object if any issues arise during the transfer process.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_6","title":"KRC 721 Token Contract","text":"<p>Approve Function</p> <p>The <code>Approve</code> method empowers NFT (Non-Fungible Token) owners within the Kalp ecosystem to selectively bestow transfer authority upon designated accounts, granting them the ability to move specific NFTs on behalf of the owner. This flexibility facilitates a range of collaborative and trust-based interactions.</p> <pre><code>func (c *TokenERC721Contract) Approve(ctx kalpsdk.TransactionContextInterface, operator string, tokenId string) (bool, error) {\n    // Initialization and ownership checks omitted for brevity\n    nft, _ := _readNFT(ctx, tokenId)\n    nft.Approved = operator\n    nftKey, _ := ctx.CreateCompositeKey(nftPrefix, []string{tokenId})\n    nftBytes, _ := json.Marshal(nft)\n    ctx.PutStateWithoutKYC(nftKey, nftBytes)\n    // Omitted logic for emitting Approval event\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The account designated to receive transfer approval for the specified NFT.</p> </li> <li> <p><code>**tokenId**</code> (string): The unique identifier that pinpoints the NFT for which authorization is being granted.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method indicates success or failure through a boolean value, accompanied by an error object if any issues arise during the approval process.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_7","title":"KRC 721 Token Contract","text":"<p>SetApprovalForAll Function</p> <p>The <code>SetApprovalForAll</code> method within the Kalp ecosystem empowers NFT (Non-Fungible Token) owners to confer blanket approval to designated accounts (operators). This grants the operator the ability to transfer all of the owner's NFTs, acting as a powerful tool for managing large collections or streamlining specific use cases.</p> <pre><code>func (c *TokenERC721Contract) SetApprovalForAll(ctx kalpsdk.TransactionContextInterface, operator string, approved bool) (bool, error) {\n    // Initialization checks omitted for brevity\n    sender := /* Fetch sender's identity */\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{sender, operator})\n    approval := Approval{Owner: sender, Operator: operator, Approved: approved}\n    approvalBytes, _ := json.Marshal(approval)\n    ctx.PutStateWithoutKYC(approvalKey, approvalBytes)\n    // Emit ApprovalForAll event logic omitted for brevity\n    return true, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**operator**</code> (string): The account designated to receive approval for managing all the caller's NFTs.</p> </li> <li> <p><code>**approved**</code> (bool): A flag indicating whether to grant (<code>true</code>) or revoke (<code>false</code>) approval for the operator.</p> </li> </ul> <p>Return Values:<code>**(bool, error)**</code>: The method signals success or failure through a boolean value, along with an error object if any issues arise during the approval process.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_8","title":"KRC 721 Token Contract","text":"<p>BalanceOf Function</p> <p>The <code>BalanceOf</code> method acts as a digital accountant within the Kalp ecosystem, meticulously cataloging NFT (Non-Fungible Token) collections. It enables you to precisely determine the number of NFTs held by a specific account, serving as a crucial tool for understanding ownership patterns, token scarcity, and personal collections.</p> <pre><code>func (c *TokenERC721Contract) BalanceOf(ctx kalpsdk.TransactionContextInterface, owner string) int {\n    // Initialization checks omitted for brevity\n    iterator, _ := ctx.GetStateByPartialCompositeKey(balancePrefix, []string{owner})\n    balance := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        balance++\n    }\n    return balance\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**owner**</code> (string): The account whose NFT holdings you wish to inspect.</li> </ul> <p>Return Value:<code>**int**</code>: A concise integer representing the exact quantity of NFTs owned by the specified account.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_9","title":"KRC 721 Token Contract","text":"<p>OwnerOf Function</p> <p>Within the Kalp NFT landscape, the <code>OwnerOf</code> method serves as a steadfast guide, revealing the rightful owner of a specified NFT. It acts as a fundamental tool for establishing ownership, ensuring responsible transfer, and upholding accountability within this dynamic ecosystem.</p> <pre><code>func (c *TokenERC721Contract) OwnerOf(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Owner, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that singles out the NFT for which ownership information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Owner Account: A string representing the account holding ownership of the inquired NFT.</p> </li> <li> <p>Error: In the event of unforeseen retrieval obstacles, an error object is returned, shedding light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_10","title":"KRC 721 Token Contract","text":"<p>GetApproved Function</p> <p>The <code>GetApproved</code> method acts as a trustworthy informant, revealing the account specifically authorized to transfer a designated NFT on behalf of its owner. It serves as a vital tool for understanding transfer permissions and managing collaborative ownership scenarios.</p> <pre><code>func (c *TokenERC721Contract) GetApproved(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.Approved, nil\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The unique identifier that pinpoints the NFT for which authorization information is sought.</li> </ul> <p>Return Values:</p> <ul> <li> <p>Approved Account: A string disclosing the account granted transfer authority for the queried NFT.</p> </li> <li> <p>Error: In the event of retrieval obstacles, an error object is returned, clarifying the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_11","title":"KRC 721 Token Contract","text":"<p>IsApprovedForAll Function</p> <p>The <code>IsApprovedForAll</code> method assumes the role of a meticulous gatekeeper, determining whether a designated account (operator) holds sweeping authority to manage the entire collection of NFTs belonging to a specific owner. It acts as a cornerstone for managing extensive collections and facilitating collaborative ownership structures.</p> <pre><code>func (c *TokenERC721Contract) IsApprovedForAll(ctx kalpsdk.TransactionContextInterface, owner string, operator string) (bool, error) {\n    approvalKey, _ := ctx.CreateCompositeKey(approvalPrefix, []string{owner, operator})\n    approvalBytes, err := ctx.GetState(approvalKey)\n    if len(approvalBytes) &lt; 1 {\n        return false, nil\n    }\n    approval := new(Approval)\n    _ = json.Unmarshal(approvalBytes, approval)\n    return approval.Approved, err\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>**owner**</code> (string): The account whose NFTs are potentially subject to management by an operator.</p> </li> <li> <p><code>**operator**</code> (string): The account seeking verification of their blanket approval status.</p> </li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**bool**</code>: A boolean value unequivocally indicating whether the operator holds comprehensive approval to manage the owner's entire NFT collection.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of unforeseen challenges, an error object emerges, revealing the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_12","title":"KRC 721 Token Contract","text":"<p>Name Function</p> <p>the <code>Name</code> method fulfills the role of a skillful archivist, divulging the distinct title bestowed upon a token collection. It serves as a fundamental means of identifying and referencing collections, fostering clarity and discoverability.</p> <pre><code>func (c *TokenERC721Contract) Name(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(nameKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The collection's carefully chosen name, representing its unique identity.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of retrieval obstacles, an error object surfaces to illuminate the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_13","title":"KRC 721 Token Contract","text":"<p>Symbol Function</p> <p>The <code>Symbol</code> method acts as a herald, disclosing the succinct and potent symbol that serves as a collection's emblematic signature. It empowers concise identification and efficient referencing, akin to a heraldic crest in the digital realm.</p> <pre><code>func (c *TokenERC721Contract) Symbol(ctx kalpsdk.TransactionContextInterface) (string, error) {\n    bytes, err := ctx.GetState(symbolKey)\n    if err != nil {\n        return \"\", err\n    }\n    return string(bytes), nil\n}\n</code></pre> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The collection's meticulously chosen symbol, acting as its concise identifier and resonant emblem.</p> </li> <li> <p><code>**error**</code>: Should retrieval obstacles arise, an error object emerges to shed light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_14","title":"KRC 721 Token Contract","text":"<p>TokenURI Function</p> <p>Returns the metadata URI of an NFT.</p> <p>Parameters:</p> <ul> <li><code>tokenId</code> (string): Unique identifier for the NFT.</li> </ul> <p>Function: TokenURI</p> <pre><code>func (c *TokenERC721Contract) TokenURI(ctx kalpsdk.TransactionContextInterface, tokenId string) (string, error) {\n    nft, err := _readNFT(ctx, tokenId)\n    if err != nil {\n        return \"\", err\n    }\n    return nft.TokenURI, nil\n}\n</code></pre> <p>Returns: (string, error) - Metadata URI and error if any.</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_15","title":"KRC 721 Token Contract","text":"<p>TotalSupply Function</p> <p>the <code>TokenURI</code> method plays the role of a trusty navigator, leading explorers to a digital harbor brimming with an NFT's rich metadata. It serves as a fundamental gateway to an NFT's unique traits, captivating imagery, and captivating stories.</p> <pre><code>func (c *TokenERC721Contract) TotalSupply(ctx kalpsdk.TransactionContextInterface) int {\n    iterator, _ := ctx.GetStateByPartialCompositeKey(nftPrefix, []string{})\n    totalSupply := 0\n    for iterator.HasNext() {\n        iterator.Next()\n        totalSupply++\n    }\n    return totalSupply\n}\n</code></pre> <p>Parameters:</p> <ul> <li><code>**tokenId**</code> (string): The distinct identifier that pinpoints the specific NFT whose secrets await revelation.</li> </ul> <p>Return Values:</p> <ul> <li> <p><code>**string**</code>: The metadata URI, a web address leading to a wellspring of descriptive details, vibrant visuals, and captivating stories.</p> </li> <li> <p><code>**error**</code>: In the unlikely event of retrieval obstacles, an error object emerges, casting light on the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_16","title":"KRC 721 Token Contract","text":"<p>Helper Methods</p>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_17","title":"KRC 721 Token Contract","text":"<p>checkInitialized Function</p> <p>the <code>checkInitialized</code> method serves as a vigilant sentinel, safeguarding system integrity and ensuring the contract is in a fit state for operation. It acts as a crucial checkpoint, guaranteeing all essential setup procedures have been meticulously completed before transactions and interactions can commence.</p> <p>Returns:</p> <ul> <li> <p><code>**bool**</code>: A boolean value indicating the initialization status of the contract:</p> <ul> <li> <p><code>**true**</code>: The contract has been successfully initialized and is ready for use.</p> </li> <li> <p><code>**false**</code>: The contract has not yet undergone initialization and remains inoperable.</p> </li> </ul> </li> <li> <p><code>**error**</code>: If unforeseen challenges arise during the check, an error object surfaces, providing valuable insights into the nature of the difficulty.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_18","title":"KRC 721 Token Contract","text":"<p>Error Handling</p> <p>The Kalp NFT contract prioritizes exceptional user experience by meticulously incorporating error-handling mechanisms. This ensures:</p> <ul> <li> <p>Clear and actionable feedback: When operations encounter roadblocks or invalid inputs are provided, informative error messages are conveyed, empowering users to rectify mistakes and navigate the system effectively.</p> </li> <li> <p>Reduced risk: By pinpointing the source of errors, developers and system operators can swiftly identify and address potential issues, mitigating operational risks and safeguarding the system's integrity.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_19","title":"KRC 721 Token Contract","text":"<p>Events</p> <p>The contract leverages events as potent messengers, broadcasting crucial information about significant actions to external applications and services. This fosters:</p> <ul> <li> <p>Real-time monitoring: Off-chain applications can remain keenly aware of contract state changes, such as NFT transfers or approvals, enabling them to react dynamically and provide users with up-to-date information.</p> </li> <li> <p>Enhanced user experience: By staying abreast of contract events, external applications can trigger relevant functionalities, such as updating user interfaces or executing automated tasks, enriching the overall user experience.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_20","title":"KRC 721 Token Contract","text":"<p>Security Considerations</p> <p>Security remains paramount within the Kalp NFT ecosystem. To safeguard the contract and its users, the following measures are implemented:</p> <ul> <li> <p>Granular access control: Sensitive operations, such as minting NFTs with custom URIs or burning existing ones, are subject to rigorous access control mechanisms. This ensures that only authorized individuals or processes can execute these actions, safeguarding against unauthorized modifications and potential misuse.</p> </li> <li> <p>Input validation: To thwart common vulnerabilities, the contract meticulously validates all user-provided input parameters. This involves verifying data formats and ensuring adherence to predefined constraints, effectively preventing malicious actors from exploiting unintended loopholes within the system.</p> </li> </ul>"},{"location":"Dev%20documentation/KRC%20Token%20Standard/KRC%20721%20Token%20Contract/#_21","title":"KRC 721 Token Contract","text":"<p>Conclusion</p> <p>This KRC721 token contract provides a comprehensive set of functionalities for managing NFTs, including the creation, transfer, and querying of ownership and metadata. The above documentation offers a detailed guide for developers to effectively interact with and integrate these capabilities within their applications or platforms.</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Deploy%20the%20smart%20contract/","title":"Deploy the Smart Contract","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Tired of complex coding and deployment hassles? Building a Smart Contract shouldn't feel like climbing Mount Everest. This guide is here to empower you with a clear and smooth path to creating your Smart Contract. We'll break down the process into easy-to-follow steps, ensuring you have the confidence and knowledge to bring your ideas to life on the blockchain.</p> <p>Smart contracts are digital agreements coded on a blockchain that automatically execute or enforce the terms of a contract when predefined conditions are met. They enable secure, transparent, and decentralized transactions without the need for intermediaries.</p> <p>So, let\u2019s begin with the Smart Contract creation on Kalp Studio.</p> <p>Note</p> <p>To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Deploy%20the%20smart%20contract/#_1","title":"Deploy the smart contract","text":"<p>Smart Contract Creation</p> <p>Step 1: Initiating Smart Contract Creation: For first-time users, the screen with no Smart Contract list will be displayed.</p> <p></p> <p>Figure 1: Initiate Smart Contract</p> <p>To create a Smart Contract you have to agree to Kalp Studio's Terms and Conditions.</p> <p></p> <p>Figure 2: Kalp Studio Terms and Conditions</p> <p>After you agree to the terms and conditions, you can start creating the Smart Contract. Click on Create Smart Contract.</p> <p></p> <p>Figure 3: Create Smart Contract</p> <p>Access the \"Smart Contract\" section via the left panel bar on Kalp Studio.</p> <p></p> <p>Figure 4: Contract Details</p> <p>Select the \"Create Smart Contract\" button. Alternatively, this can also be achieved through the \"Create Smart Contract\" option on the Dashboard.</p> <p>Step 2: Detailing the Smart Contract:</p> <p></p> <p>Figure 5: Smart Contract Details</p> <ul> <li> <p>Name: Assign a distinctive name to the Smart Contract.</p> </li> <li> <p>Project: Identify the overarching project or system the Smart Contract integrates with.</p> </li> <li> <p>Description: Offer a concise description outlining the contract's functionality.</p> </li> </ul> <p>Step 3: Environment Selection:</p> <p></p> <p>Figure 6: Setup Environment</p> <p>Opt for the appropriate environment for deployment: \"Development\", \"Staging\", or \"Production\".</p> <p>Step 4: Network Selection:</p> <p></p> <p>Figure 7: Network Selection</p> <p>Determine the deployment network - \"TestNet\".</p> <p>Step 5: Template Utilization and Submission:</p> <p></p> <p>Figure 8: Extension File/Template</p> <p>Kalp Studio provides ERC token templates. Select the relevant template for your needs.</p> <p></p> <p>Figure 9: Kalp Templates</p> <p>Download, complete, and upload the filled template to Kalp Studio for review and subsequent actions.</p> <p>Step 6: Final Review and Publication:</p> <p></p> <p>Figure 10: Review</p> <p>Save Draft</p> <p>If you want to pause the Smart Contract creation and would like to visit it later then Save Draft is a great option!</p> <p>In this option, all fields are editable and can be modified at a later point.</p> <p>Save &amp; Publish</p> <p>After you Save &amp; Publish the Smart Contract gets deployed on the Kalp blockchain. You can still edit the Smart Contract Name and Description. All other fields are non-editable.</p> <p>The published Smart Contract gets added to the list of Smart Contracts. If the user wants to make some changes in Smart Contract, Save Draft option can be used. The saved draft can be edited anytime by the user.</p> <p>List of Smart Contracts</p> <p>Adhering to these steps will ensure the professional and efficient creation of a Smart Contract on Kalp Studio, streamlining your project's development process. You can view the list of newly created Smart Contract after Save and Publish.</p> <p></p> <p>Figure 11: List of Smart Contacts</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Interacting%20with%20smart%20contract/","title":"Interacting with smart contract","text":"<p>Interacting with Your Smart Contract</p> <ol> <li> <p>Establish a connection to the relevant blockchain network, enabling your application to interact with the deployed smart contracts.</p> </li> <li> <p>Kalp Studio automatically generates API endpoints that directly map to the functionalities of your smart contracts. These endpoints simplify integration by providing a well-defined interface for your front-end application to interact with the underlying smart contract logic.</p> </li> </ol> <p></p> <p>Steps to Deploy and test the smart contract API endpoints:</p> <ul> <li>Deployment of Smart Contract through Kalp Studio:  Utilize the  generated API endpoints  directly within your front-end application (e.g., React.js, Next.js). This approach seamlessly integrates smart contract functionalities into your user interface, enabling dynamic interactions and data retrieval.</li> </ul> <p>Check out the Freshdesk Article: How to deploy a Smart Contract? or How Can I Perform Transactions using API Endpoints?</p> <ul> <li>Checking and Testing API Endpoints:  Employ  Postman, a popular API testing tool, to send requests to the generated API endpoints. This method facilitates individual function testing, allowing you to verify their behavior and outputs in a controlled environment before integrating them into your front-end application.</li> </ul> <p>Postman Testing for Kalp Smart Contract API Endpoints</p> <p>Following successful smart contract deployment and API endpoint generation within Kalp Studio, delve into the essential steps for testing these endpoints using Postman:</p> <ol> <li>Reading from the Smart Contract</li> </ol> <p>Kalp Studio enables efficient data retrieval from deployed smart contracts using  read-only methods. These methods allow your application to query the blockchain ledger without modifying its state.</p> <p>Example:  To retrieve a user's account balance, you would invoke the  <code>ClientAccountBalance</code>  function through the generated API endpoint. This function would fetch the relevant data from the ledger and return it to your application.</p> <p>By leveraging read-only methods, you can access crucial information from the blockchain without altering its state, ensuring data integrity and facilitating various application functionalities.</p> <p></p> <p>Sample Result: ClientAccountBalance Function</p> <ol> <li>Writing to the Smart Contract</li> </ol> <p>Kalp Studio empowers developers to perform  write operations, which involve modifying the state of the blockchain ledger through smart contract interactions. These operations typically involve sending transactions to specific contract functions provided by the Kalp SDK.</p> <p>Example:  To transfer tokens, you would utilize the appropriate function (e.g.,  <code>Transfer</code>) through the generated API endpoint. This function would initiate a transaction on the blockchain, deducting tokens from the sender's account and crediting them to the recipient's account.</p> <p></p> <p>Sample Result: MintBatch Function</p> <ol> <li>Transaction Management:  With the Kalp SDK, developers can efficiently manage transactions on the blockchain network. It provides functions for submitting transactions, querying transaction information, and retrieving transaction history. This simplifies the process of interacting with the blockchain and ensures the integrity of transactional operations.</li> </ol> <p>Example:  All the Functions provided as:  <code>PutStateWithKYC, DelStateWithoutKYC, DelStateWithKYC, GetState, GetTxID, GetChannelD, SetEvent, GetUserID.</code></p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Interacting%20with%20smart%20contract/#conclusion","title":"Conclusion","text":"<p>You're now ready to begin your journey as a Kalp blockchain developer. Experiment with different types of smart contracts, explore the functionalities offered by the Kalp SDK, and start building innovative DApps on the Kalp blockchain.</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Test%20the%20smart%20contract/","title":"Test the Smart Contract","text":""},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Test%20the%20smart%20contract/#_1","title":"Test the smart contract","text":"<p>Smart Contract Verification and Testing</p> <p>Step 1: Verify your smart contract's syntax and functionality by compiling it using the following command:</p> <pre><code>$ go build .\n</code></pre> <p>Step 2: A successful compilation signifies that your code adheres to Go language syntax rules and is free of errors.</p> <p>Step 3: Proceed to test your smart contract to ensure its behavior aligns with your expectations. Utilize appropriate testing frameworks or unit tests to simulate interactions with your smart contract and verify its outputs. This step is crucial for identifying and rectifying any potential issues before deployment.</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/","title":"Write the Smart Contract","text":""},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_1","title":"Write the smart contract","text":"<p>Overview</p> <p>We require Kalp SDK to a comprehensive Golang package that simplifies the development of smart contracts on the Kalp blockchain network. It is specifically designed to enable developers to write and create Aa Kalp-blockchain-compliant smart contracts with a set of powerful functionalities.</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_2","title":"Write the smart contract","text":"<p>Prerequisites</p> <ul> <li> <p>Golang installation and setup</p> <p>A recent version of Go is recommended preferably 1.19 or earlier 1.20. Compatibility with newer versions might not be guaranteed for all Kalp functionalities.</p> </li> <li> <p>Kalp Software Development Kit (SDK) Installation:</p> <ul> <li> <p>Installation: Install the Kalp SDK by following the official installation instructions provided by the Kalp team. These instructions may involve downloading a pre-built binary or building the SDK from the source code.</p> </li> <li> <p>Documentation: Familiarize yourself with the Kalp SDK documentation, which outlines available functionalities, usage examples, and best practices for interacting with the Kalp platform through your Go applications.</p> </li> </ul> </li> <li> <p>Basic Understanding of Blockchain Fundamentals:</p> <p>Possess a basic understanding of blockchain networks, including concepts like distributed ledgers, consensus mechanisms, and smart contracts.</p> </li> <li> <p>Go Programming Proficiency:</p> <p>Prior experience and proficiency in the Go programming language are essential prerequisites for contributing to Kalp development. This includes understanding core Go syntax, data structures, control flow statements, and error-handling mechanisms.</p> </li> </ul>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_3","title":"Write the smart contract","text":"<p>Set up your Development Environment</p> <ul> <li> <p>Download and install the appropriate Golang binary for your operating system from the official Golang download page:  https://go.dev/doc/install. Follow the provided installation instructions to ensure proper integration with your system.</p> </li> <li> <p>Set up your Go workspace, with the following process:</p> <ul> <li> <p>GOPATH: Set the <code>GOPATH</code> environment variable to define your preferred location for storing Go source code, compiled packages, and downloaded dependencies. It's recommended to choose a dedicated directory outside your system directories (e.g., <code>/home/your_username/go</code>).</p> </li> <li> <p>PATH Update: Add the <code>$GOPATH/bin</code> directory to your system's <code>PATH</code> environment variable. This allows you to execute Go commands (like <code>go build</code>, <code>go run</code>) from any terminal location without specifying the full path.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_4","title":"Write the smart contract","text":"<p>Creating and Starting Chaincode</p> <ol> <li> <p>Create a new directory for your project.</p> <ol> <li> <p>Execute the following command to create a new directory named <code>my-smart-contract</code></p> </li> <li> <p>Change the directory into the newly created project directory.</p> </li> </ol> </li> </ol> <pre><code>$ mkdir my-smart-contract\n$ cd my-smart-contract\n</code></pre> <ol> <li>Initialize a new Go module: Within the <code>my-smart-contract</code> directory, run the following command to initialize a new Go module named <code>my-smart-contract</code>:</li> </ol> <pre><code>$ go mod init my-smart-contract\n</code></pre> <ol> <li>Getting Started with Kalp-SDK: Use the <code>go get</code> command to download and install the Kalp SDK library:</li> </ol> <pre><code>$ go get -u github.com/p2eengineering/kalp-sdk-public/kalp\n</code></pre> <p>Response:</p> <pre><code>go: downloading golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: downloading golang.org/x/sys v0.17.0\ngo: downloading google.golang.org/grpc v1.62.0\ngo: downloading golang.org/x/net v0.21.0\ngo: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading google.golang.org/genproto v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading github.com/go-openapi/spec v0.20.14\ngo: downloading github.com/go-openapi/swag v0.22.9\ngo: downloading google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: downloading golang.org/x/mod v0.15.0\ngo: added github.com/go-openapi/jsonpointer v0.20.2\ngo: added github.com/go-openapi/jsonreference v0.20.4\ngo: added github.com/go-openapi/spec v0.20.14\ngo: added github.com/go-openapi/swag v0.22.9\ngo: added github.com/gobuffalo/envy v1.10.2\ngo: added github.com/gobuffalo/packd v1.0.2\ngo: added github.com/gobuffalo/packr v1.30.1\ngo: added github.com/golang/protobuf v1.5.3\ngo: added github.com/hyperledger/fabric-chaincode-go v0.0.0-20240124143825-7dec3c7e7d45\ngo: added github.com/hyperledger/fabric-contract-api-go v1.2.2\ngo: added github.com/hyperledger/fabric-protos-go v0.3.3\ngo: added github.com/joho/godotenv v1.5.1\ngo: added github.com/josharian/intern v1.0.0\ngo: added github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: added github.com/mailru/easyjson v0.7.7\ngo: added github.com/p2eengineering/kalp-sdk-public v0.0.0-20240118070807-283512298976\ngo: added github.com/rogpeppe/go-internal v1.12.0\ngo: added github.com/sirupsen/logrus v1.9.3\ngo: added github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb\ngo: added github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415\ngo: added github.com/xeipuuv/gojsonschema v1.2.0\ngo: added golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: added golang.org/x/mod v0.15.0\ngo: added golang.org/x/net v0.21.0\ngo: added golang.org/x/sys v0.17.0\ngo: added golang.org/x/text v0.14.0\ngo: added google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: added google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: added google.golang.org/grpc v1.62.0\ngo: added google.golang.org/protobuf v1.32.0\ngo: added gopkg.in/yaml.v2 v2.4.0\ngo: added gopkg.in/yaml.v3 v3.0.1\n</code></pre> <ol> <li>Create a new Go source file<code>.go</code> within your project directory. This file will house the core logic of your smart contract. Utilize your preferred text editor or IDE to create the file and ensure it's saved with the <code>.go</code> extension.</li> </ol> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/p2eengineering/kalp-sdk-public/kalpsdk\"\n)\n\ntype SmartContract struct {\n     kalpsdk.Contract\n}\n\nfunc (sc *SmartContract) ExecuteTransaction() {\n    // Implement the logic for executing transactions\n    fmt.Println(\"Executing transaction...\")\n}\n\nfunc (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\n</code></pre> <p>This newly created file will encompass the following core elements:</p> <ul> <li> <p>Package Declaration: <code>package main</code>: This line specifies that the code within this file belongs to the <code>main</code> package, which is the entry point for your smart contract application.</p> </li> <li> <p>Imports:</p> <ul> <li> <p><code>fmt</code>: This import statement allows you to utilize the <code>fmt</code> package, providing functionalities for formatted printing and input/output operations.</p> </li> <li> <p><code>github.com/p2eengineering/kalp-sdk-public/kalpsdk</code>: This import statement brings the Kalp SDK library into your project, granting access to the necessary functionalities for interacting with the Kalp blockchain ecosystem.</p> </li> </ul> </li> <li> <p>Smart Contract Definition: <code>type SmartContract struct { ... }</code>: This part defines a custom struct named <code>SmartContract</code> which serves as the blueprint for your smart contract. It embeds the <code>kalpsdk.Contract</code> type, inheriting functionalities offered by the Kalp SDK framework.</p> </li> <li> <p>Transaction Execution Function: <code>func (sc *SmartContract) ExecuteTransaction() { ... }</code>: This function, named <code>ExecuteTransaction</code>, represents the core logic that will be executed whenever a transaction interacts with your smart contract. Customize this function to encapsulate the specific business logic your smart contract is designed to handle.</p> </li> <li> <p>Initialization Function: <code>func (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error { ... }</code>: This function, named <code>Init</code>, serves as the initialization entry point for your smart contract. It typically defines any setup tasks or initialization logic required for your smart contract to function correctly. It takes a <code>kalpsdk.TransactionContextInterface</code> argument, providing access to contextual information about the ongoing transaction.</p> </li> <li> <p>Create <code>main.go</code> file in the following way.</p> </li> </ul> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/p2eengineering/kalp-sdk/kalpsdk\"\n)\n\nfunc main() {\n\n    contract := kalpsdk.Contract{IsPayableContract: true}\n\n    contract.Logger = kalpsdk.NewLogger()\n    chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})\n    contract.Logger.Info(\"My KAPL SDK sm4\")\n\n    // Create a new instance of your KalpContractChaincode with your smart contract\n    // chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{kalpsdk.Contract{IsPayableContract: true}})\n    // kalpsdk.NewLogger()\n    if err != nil {\n        log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n    }\n\n    // Start the chaincode\n    if err := chaincode.Start(); err != nil {\n        log.Panicf(\"Error starting chaincode: %v\", err)\n    }\n</code></pre> <p>The <code>main.go</code> file stands as the conductor that orchestrates the initialization and execution of your smart contract within the Kalp blockchain environment. It serves as the entry point for your application, bringing your carefully crafted smart contract logic to life. Here's a detailed explanation of its structure:</p> <ul> <li> <p>Necessary Imports:</p> <ul> <li> <p><code>**log**</code> package: This package empowers you to issue logging messages, providing valuable insights into the execution flow and potential errors for debugging purposes.</p> </li> <li> <p><code>**github.com/p2eengineering/kalp-sdk/kalpsdk**</code> package: This import statement grants access to the essential Kalp SDK functionalities for interacting with the blockchain network and managing your smart contract.</p> </li> </ul> </li> <li> <p>The <code>**main**</code> Function: This function serves as the starting point for your application when it's executed. It undertakes the following crucial tasks:</p> </li> <li> <p>Contract Configuration:</p> <ul> <li> <p><code>**contract := kalpsdk.Contract{IsPayableContract: true}**</code>: This line initializes a new <code>Contract</code> object, defining key properties of your smart contract. The <code>IsPayableContract: true</code> setting designates that your contract will be capable of receiving payments from users.</p> </li> <li> <p><code>**contract.Logger = kalpsdk.NewLogger()**</code>: This statement creates a new logger instance and assigns it to the contract, enabling you to generate logging messages for tracking events and debugging.</p> </li> </ul> </li> <li> <p>Chaincode Instantiation:</p> <ul> <li> <p><code>**chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})**</code>: This line constructs a new instance of the <code>KalpContractChaincode</code> type. It integrates your custom <code>SmartContract</code> implementation, effectively bridging your contract logic with the Kalp SDK framework.</p> </li> <li> <p><code>**contract.Logger.Info(\"My KAPL SDK sm4\")**</code>: This statement logs an informative message using the logger, indicating that the chaincode is initialized and ready to commence operations.</p> </li> </ul> </li> <li> <p>Crucial Error Handling:<code>**if err != nil { ... }**</code> blocks: These conditional blocks diligently check for potential errors during chaincode creation and startup. If errors occur, the <code>panicf</code> the function is invoked, terminating execution with an informative error message. This assertive error handling safeguards the integrity of your application and facilitates debugging efforts.</p> </li> <li> <p>Chaincode Activation:<code>**if err := chaincode.Start(); err != nil { ... }**</code>: This block calls the <code>Start()</code> function on the instantiated chaincode, triggering the execution of your smart contract within the Kalp blockchain environment. Once again, error handling is incorporated to gracefully address any issues that might impede chaincode startup.</p> </li> </ul> <p>Payment Tracking for Payable Contracts</p> <p>Pass your contract_ <code>_struct_</code> as an argument to the <code>_NewChaincode_</code> _function and specify whether the contract is payable or not.  This places the external dependencies for your smart contract into a local <code>vendor</code> directory.</p> <pre><code>$ go mod vendor\n</code></pre> <ol> <li>Folder Structure: After Executing the above command the folder Structure shows up as below:</li> </ol> <pre><code>Folder name\n\u251c\u2500\u2500vendor\n\u251c\u2500\u2500go.mod\n\u251c\u2500\u2500go.sum\n\u251c\u2500\u2500main.go\n\u2514\u2500\u2500 contract\n    \u2514\u2500\u2500 contract.go\n</code></pre> <ol> <li>Save your changes.</li> </ol>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_5","title":"Write the smart contract","text":"<p>Implementation Steps with Kalp SDK</p> <ol> <li>Define a New Go Struct: Represent your contract with a new Go struct and embed the <code>kalpsdk.Contract</code> struct to inherit base contract functionalities.</li> </ol> <pre><code>type MyContract struct {\nkalpsdk.Contract\n}\n</code></pre> <ol> <li>Implement the Contract Interface: Define the <code>Init</code> and <code>Invoke</code> methods for initialization logic and invocation handling.</li> </ol> <pre><code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n// Invoke logic return nil\n}\n</code></pre>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_6","title":"Write the smart contract","text":"<ol> <li>Blockchain Data Management</li> </ol> <p>This section details the core functionalities available for managing data on the blockchain:</p> <p>Writing to the Blockchain:</p> <ul> <li> <p><code>**PutStateWithKyc**</code>: This function facilitates writing data onto the blockchain ledger. Crucially, it enforces mandatory KYC (Know Your Customer) verification as part of the write operation, ensuring compliance with regulatory requirements or specific platform policies.</p> </li> <li> <p><code>**PutStateWithoutKyc**</code>: This function enables writing data to the blockchain ledger. Unlike its counterpart, it bypasses the KYC verification step, potentially catering to situations where regulatory constraints are not applicable or KYC checks have already been performed at an earlier stage.</p> </li> </ul> <p>Reading from the Blockchain:</p> <ul> <li><code>**GetState**</code>: This function retrieves the data from the blockchain ledger. It allows querying the current state of the ledger to obtain information relevant to your application's needs.</li> </ul> <p>Deleting from the Blockchain:</p> <ul> <li> <p><code>**DelStateWithKyc**</code>: This function enables deleting data from the blockchain ledger. Similar to <code>PutStateWithKyc</code>, it enforces mandatory KYC verification before proceeding with the deletion operation.</p> </li> <li> <p><code>**DelStateWithoutKyc**</code>: This function allows the deleting data from the blockchain ledger. Just as with <code>PutStateWithoutKyc</code>, it bypasses the KYC verification step, potentially catering to specific scenarios where deletion is permitted without additional verification.</p> </li> </ul>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_7","title":"Write the smart contract","text":"<p>Sample Code Examples</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_8","title":"Write the smart contract","text":"<p>Writing to the Blockchain</p>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_9","title":"Write the smart contract","text":"<p>PutStateWithKyc</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\")) \nif err != nil {\n  // Handle error \n } else {\n  // Data successfully written to the blockchain with KYC verification\n }\n</code></pre>"},{"location":"Dev%20documentation/Smart%20Contract%20Write%2C%20Test%2C%20Deploy%20%26%20Interact/Write%20the%20smart%20contract/#_10","title":"Write the smart contract","text":"<p>PutStateWithoutKyc</p> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/","title":"Kalp Golang SDK","text":"<p>This documentation provides an in-depth guide to the Kalp Software Development Kit (SDK), tailored for developers aiming to interact with the Kalp blockchain network.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_1","title":"Kalp Golang SDK","text":"<p>Overview</p> <p>The Kalp SDK is engineered to streamline the development process for Kalp blockchain applications. It offers a suite of tools and functionalities that enable developers to efficiently read and write data, manage transactions, perform KYC checks, track payments for payable contracts, and enhance debugging through logger functionality.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_2","title":"Kalp Golang SDK","text":"<p>Key Features</p> <p>The Kalp SDK empowers developers with a robust suite of functionalities designed to simplify and enhance smart contract interaction:</p> <ul> <li> <p>Data Management:: Key-Value Storage: Efficiently store and retrieve data on the blockchain using a key-value pair structure. This functionality allows persistent data management within your smart contracts.</p> </li> <li> <p>Transaction Handling:: Comprehensive Transaction Management: Seamlessly submit, query, and retrieve the history of transactions associated with your smart contracts. This comprehensive suite of tools streamlines transaction management workflows.</p> </li> <li> <p>KYC Integration:: Integrated KYC Checks: Enforce compliance with regulatory requirements or implement access control mechanisms by integrating KYC verification processes directly within your smart contracts.</p> </li> <li> <p>Payment Tracking:: Streamlined Payment Monitoring: Effortlessly track payments initiated through your smart contracts, particularly within the context of payable contracts. This functionality facilitates accurate record-keeping and financial reconciliation.</p> </li> <li> <p>Debugging Support:: Enhanced Logging: Gain valuable insights into the behavior and execution of your smart contracts through comprehensive logging capabilities. This functionality aids in debugging and troubleshooting potential issues.</p> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_3","title":"Kalp Golang SDK","text":"<p>Prerequisites</p> <p>Before you begin, ensure you have the following installed:</p> <p>Go Programming Language: Kalp blockchain contracts are written in Go. Make sure you have Go installed on your system. Download Go.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_4","title":"Kalp Golang SDK","text":"<p>Kalp SDK Installation</p> <p>Integrating the Kalp SDK into your project is a breeze. To install the Kalp-SDK, use the following Go command:</p> <pre><code>go get -u github.com/p2eengineering/kalp-sdk-public/kalpsdk\n</code></pre> <p>This command utilizes the <code>go get</code> package management tool within Go to download and install the Kalp SDK from the specified GitHub repository. The <code>-u</code> flag ensures you receive the latest available version.</p> <p>Done! The Kalp SDK is ready to be imported and utilized within your Go project, empowering you to interact with Kalp smart contracts and leverage the platform's functionalities.</p> <p>Note</p> <p>The SDK is compatible with_ Go version 1.19__. For newer versions of Go, update your <code>_go.mod_</code> file to specify version 1.19.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_5","title":"Kalp Golang SDK","text":"<p>Examples</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_6","title":"Kalp Golang SDK","text":"<p>Creating a Contract</p> <p>Define a Go struct to represent your contract and embed <code>kalpsdk.Contract</code> for base functionalities.</p> <pre><code>type MyContract struct {\n    kalpsdk.Contract\n}\n</code></pre> <p>Struct Creation: Begin by defining a Go struct to represent your smart contract. This <code>struct</code>will serve as the foundation for encapsulating your contract's state variables, functions, and other relevant attributes.</p> <p>Embedding <code>**kalpsdk.Contract**</code>: To leverage the core functionalities provided by the Kalp SDK, embed the <code>kalpsdk.Contract</code> type within your custom contract <code>struct</code>. This grants your contract access to essential features like transaction management, key-value storage, and more.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_7","title":"Kalp Golang SDK","text":"<p>Implementing the Contract Interface</p> <p>Implement <code>Init</code> and <code>Invoke</code> methods for contract initialization and invocation.</p> <pre><code> func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n    // Initialization logic\n    return nil\n}\n\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n    // Invocation logic\n    return nil\n</code></pre> <p>To breathe functionality into your smart contract, implement the following crucial methods:</p> <ul> <li> <p><code>**Init**</code> Method:</p> <ul> <li> <p>Purpose: Responsible for initializing your contract's state variables and performing any actions required upon first deployment to the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error</code></p> </li> </ul> </li> <li> <p><code>**Invoke**</code> Method:</p> <ul> <li> <p>Purpose: Handles calls made to your contract's functions after deployment. This method orchestrates the execution of the requested actions and interactions with the blockchain.</p> </li> <li> <p>Signature: <code>func (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error</code></p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_8","title":"Kalp Golang SDK","text":"<p>Creating and Starting Chaincode</p> <p>Instantiate your contract and start the chaincode.</p> <pre><code>// Sample payable contract object\ncontract := kalpsdk.Contract{IsPayableContract: true}\n\n// KalpSDK Logger object for enhanced operation visibility\ncontract.Logger = kalpsdk.NewLogger()\n\n// New instance of KalpContractChaincode with your contract\nchaincode, err := kalpsdk.NewChaincode(&amp;MyContract{contract})\nif err != nil {\n    log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n}\n\n// Start the chaincode\nif err := chaincode.Start(); err != nil {\n    panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Once your smart contract is defined and implemented, proceed with these steps to instantiate it and launch the chaincode:</p> <ul> <li> <p>Contract Configuration:</p> <ul> <li> <p>Payable Contract: If your contract involves receiving payments, set the <code>IsPayableContract</code> field of the <code>kalpsdk.Contract</code> struct to <code>true</code>. This enables your contract to handle incoming payments.</p> </li> <li> <p>Logger Integration: (Optional) For enhanced visibility into chaincode execution and potential debugging assistance, consider assigning an instance of <code>kalpsdk.NewLogger()</code> to the <code>Logger</code> field of the <code>kalpsdk.Contract</code> struct.</p> </li> </ul> </li> <li> <p>Chaincode Creation: Create a new instance of <code>kalpsdk.Chaincode</code> by passing your custom contract struct (<code>MyContract</code>) wrapped within an instance of <code>MyContract</code>. This establishes the connection between your contract logic and the chaincode runtime environment.</p> </li> <li> <p>Error Handling: Employ proper error-handling mechanisms using <code>if</code> statements and appropriate logging or panic functions (e.g., <code>log.Panicf</code>) to catch potential errors during chaincode creation and gracefully handle any issues that might arise.</p> </li> <li> <p>Chaincode Startup: Once the chaincode object is created, initiate its execution by calling the <code>Start()</code> method. This method triggers the chaincode's lifecycle and activates your smart contract, making it ready to receive transactions and interact with the blockchain.</p> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_9","title":"Kalp Golang SDK","text":"<p>Start the Chaincode</p> <p>Call the <code>Start</code> function on the chaincode instance to start your chaincode.</p> <pre><code>if err := chaincode.Start(); err != nil {\n  panic(fmt.Sprintf(\"Error starting chaincode: %v\", err))\n}\n</code></pre> <p>Call the <code>Start()</code> method on the chaincode object to initiate its execution and activate your smart contract.</p> <p>Usage:</p> <ul> <li> <p>Function Call: <code>chaincode.Start()</code>: It directly calls the <code>Start()</code> function on the chaincode instance, signaling its readiness to commence operations.</p> </li> <li> <p>Error Handling:</p> <ul> <li> <p><code>if err := chaincode.Start(); err != nil</code>: This conditional statement meticulously checks for errors that may arise during the chaincode's startup process.</p> </li> <li> <p>If an error occurs (<code>err != nil</code>), the code gracefully handles it using a panic statement, logging a descriptive message to facilitate debugging.</p> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_10","title":"Kalp Golang SDK","text":"<p>Blockchain Data Management</p> <p>This section details the core functionalities available for managing data on the blockchain.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_11","title":"Kalp Golang SDK","text":"<p>Writing to the Kalp Blockchain</p> <p>This section delves into the process of writing data onto the Kalp blockchain, enabling persistent storage and facilitating diverse applications.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_12","title":"Kalp Golang SDK","text":"<p>PutStateWithKyc</p> <p>This function allows writing data to the ledger with KYC verification, ensuring only KYC-verified users can make ledger modifications.</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain with KYC verification\n}\n</code></pre> <p>It writes a key-value pair to the Kalp blockchain ledger, ensuring only users who have passed KYC verification can write data.</p> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing information about the current transaction and blockchain environment.</p> </li> <li> <p><code>myKey</code>: A unique string key for the data being stored.</p> </li> <li> <p><code>[]byte(\"myValue\")</code>: The actual data to be written, represented as a byte array.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By leveraging <code>PutStateWithKyc</code>, you can ensure secure and compliant data storage on the Kalp blockchain, fostering trust and reliability within your applications. Remember to tailor the error handling and success logic within your code to suit your specific use case and application requirements.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_13","title":"Kalp Golang SDK","text":"<p>PutStateWithoutKyc</p> <p>The <code>PutStateWithoutKyc</code> function within the Kalp SDK offers an alternative approach for writing data onto the blockchain ledger. Unlike its counterpart, this function bypasses the KYC verification step, enabling broader access to data modification capabilities:</p> <p>Functionality:</p> <ul> <li> <p>Data Writing: Similar to <code>PutStateWithKyc</code>, this function facilitates writing a key-value pair to the blockchain ledger.</p> </li> <li> <p>No KYC Enforcement: It does not require mandatory KYC verification before proceeding with the data storage operation. This approach can be suitable for scenarios where:</p> <ul> <li> <p>KYC verification is not applicable or has already been performed at an earlier stage.</p> </li> <li> <p>The data being written has minimal privacy or security concerns.</p> </li> </ul> </li> </ul> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern for <code>PutStateWithoutKyc</code> mirrors that of <code>PutStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>key</code>: Specifies the unique key for the data.</p> </li> <li> <p><code>value</code>: Represents the actual data to be written.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data writing, similar to <code>PutStateWithKyc</code>.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is written successfully without encountering errors.</p> </li> </ul> <p>By understanding the distinct functionalities of <code>PutStateWithKyc</code> and <code>PutStateWithoutKyc</code>, you can make informed decisions about data storage on the Kalp blockchain, balancing security, compliance, and accessibility according to your application's needs.</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_14","title":"Kalp Golang SDK","text":"<p>Reading from the Kalp Blockchain</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_15","title":"Kalp Golang SDK","text":"<p>GetState</p> <p>The <code>GetState</code> function within the Kalp SDK empowers you to retrieve data stored on the blockchain ledger. This function acts as a key-value store lookup mechanism, allowing you to access previously written data based on its unique identifier.</p> <p>Functionality:</p> <ul> <li> <p>Data Retrieval: This function retrieves the value associated with a specific key from the ledger.</p> </li> <li> <p>Key-Value Lookup: It operates like a traditional key-value store, where each key maps to a corresponding value.</p> </li> </ul> <pre><code>value, err := ctx.GetState(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Process the retrieved value\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to retrieve.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the data retrieval process. These errors could indicate issues like:</p> <ul> <li> <p>Invalid key (key not found in the ledger)</p> </li> <li> <p>Network connectivity problems</p> </li> <li> <p>Permission issues (user not authorized to access the data)</p> </li> </ul> </li> <li> <p>Success Scenario:</p> </li> <li> <p>The <code>else</code> block executes if the data retrieval is successful and no errors occur.</p> </li> <li> <p>The <code>value</code> variable stores the retrieved data, which can be of various types depending on how it was originally stored using <code>PutState</code> functions.</p> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_16","title":"Kalp Golang SDK","text":"<p>Deleting from the Kalp Blockchain</p>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_17","title":"Kalp Golang SDK","text":"<p>DelStateWithKyc</p> <p>The <code>DelStateWithKyc</code> function within the Kalp SDK grants authorized users the ability to remove data from the blockchain ledger, enforcing mandatory KYC verification before proceeding with the deletion process.</p> <p>This functionality safeguards the integrity of the ledger by ensuring only authorized and verified users can modify its state:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: This function facilitates the removal of a key-value pair from the blockchain ledger.</p> </li> <li> <p>KYC Enforcement: It mandates successful KYC verification as a prerequisite for data deletion. This verification process ensures that the user attempting to delete data is authorized to do so, adhering to security best practices and potentially complying with regulatory requirements.</p> </li> </ul> <pre><code>err := ctx.DelStateWithKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain with KYC verification\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"myKey\"</code>: This string argument specifies the unique key of the data you intend to delete.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles any potential errors that might arise during the KYC verification process or data deletion operation. It's crucial to implement appropriate error-handling mechanisms to gracefully address any issues and prevent unexpected behavior.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the KYC verification is successful and the data is deleted from the ledger without errors. This block typically performs actions like logging success messages or updating internal state variables within your application.</p> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_18","title":"Kalp Golang SDK","text":"<p>DelStateWithoutKyc</p> <p>The <code>DelStateWithoutKyc</code> function within the Kalp SDK offers a way to remove data from the blockchain ledger but bypasses mandatory KYC verification. While it simplifies deletion, it's crucial to approach this function with caution due to potential security concerns:</p> <p>Functionality:</p> <ul> <li> <p>Data Deletion: Similar to <code>DelStateWithKyc</code>, this function removes a key-value pair from the ledger.</p> </li> <li> <p>No KYC Enforcement: Unlike its counterpart, it does not require KYC verification before proceeding with deletion. This can be suitable for specific scenarios where:</p> <ul> <li> <p>KYC verification has already been performed at an earlier stage.</p> </li> <li> <p>The data being deleted is non-sensitive and deletion consequences are minimal.</p> </li> </ul> </li> </ul> <pre><code>err := ctx.DelStateWithoutKyc(\"myKey\")\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully deleted from the blockchain without KYC verification\n}\n</code></pre> <p>The usage pattern mirrors <code>DelStateWithKyc</code>:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context.</p> </li> <li> <p><code>\"myKey\"</code>: Specifies the unique key of the data to be deleted.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors encountered during data deletion.</p> </li> <li> <p>Success Scenario: The <code>else</code> block executes if the data is deleted successfully.</p> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_19","title":"Kalp Golang SDK","text":"<p>GetKYC</p> <p>The <code>GetKYC</code> function within the Kalp SDK empowers you to verify a user's KYC (Know Your Customer) status on the network. This functionality is essential for implementing access control mechanisms and ensuring that only verified users can perform specific actions or access sensitive data within your application.</p> <p>Functionality:</p> <p>KYC Verification Check: This function queries the network to determine if a particular user identified by their user ID (<code>userId</code>) has successfully completed the KYC verification process.</p> <pre><code>Kyced, err := ctx.GetKYC(\"userId\")\nif err != nil {\n    // Handle error\n} else if Kyced {\n    // User has completed KYC, proceed with the desired action\n} else {\n    // User has not completed KYC, handle accordingly\n}\n</code></pre> <p>Usage:</p> <ul> <li> <p>Arguments:</p> <ul> <li> <p><code>ctx</code>: Represents the transaction context, providing access to information about the current transaction and the blockchain environment.</p> </li> <li> <p><code>\"userId\"</code>: This string argument specifies the user ID for whom you want to check the KYC status.</p> </li> </ul> </li> <li> <p>Error Handling: The <code>if err != nil</code> block handles potential errors that might arise during the KYC verification check, such as network issues or invalid user IDs.</p> </li> <li> <p>KYC Verification Result: The <code>Kyced</code> boolean variable stores the result of the KYC check.</p> <ul> <li> <p><code>true</code>: Indicates the user has completed KYC verification.</p> </li> <li> <p><code>false</code>: Indicates the user has not completed KYC verification.</p> </li> <li> <p>Based on the <code>Kyced</code> value, you can implement conditional logic within your application:</p> <ul> <li> <p>If <code>Kyced</code> is <code>true</code>, proceed with actions that require KYC verification (e.g., allowing access to sensitive data or functionalities).</p> </li> <li> <p>If <code>Kyced</code> is <code>false</code>, handle scenarios where the user has not completed KYC verification (e.g., display an informative message, prompt the user to complete KYC, or restrict access to certain features).</p> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Dev%20documentation/Use%20the%20kalp%20SDK/Kalp%20Golang%20SDK/#_20","title":"Kalp Golang SDK","text":"<p>Conclusion</p> <p>The Kalp-SDK offers a robust set of tools for developers building decentralized applications on the Kalp blockchain network. By leveraging the SDK's functionalities, developers can efficiently manage data, transactions, and compliance requirements, facilitating a streamlined development process.</p> <p>Happy coding with the Kalp-SDK on the Kalp blockchain network!</p>"},{"location":"Getting%20started/1.%20User%20onboarding/1.%20Create%20an%20account/","title":"Create an Account","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>We acknowledge your self-reliance, but we're excited to stand by your side throughout your Kalp Studio experience. In addition, we'll provide you with valuable tips and information about how to make the most of Kalp Studio functionalities.</p> <p>So, let\u2019s begin with your onboarding process on the Kalp Studio platform.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/1.%20Create%20an%20account/#_1","title":"Create an Account","text":"<p>Sign Up Process</p> <p>Kalp Studio sign-up represents the user(s) first interaction with the platform before entering the login page of the Kalp Studio platform. If you are new to the platform, you must undergo the registration process via the signup page and verify your credentials.</p> <p>The below steps describe the user journey throughout the registration process.</p> <p>Step 1:</p> <p>Click  console.kalp.studio  to redirect to the Kalp Studio application page.</p> <p>Step 2:</p> <p>If you are a new user of the Kalp Studio platform, click on Sign Up for free to redirect to the Signup page.</p> <p></p> <p>Figure 1: Welcome Page</p> <p>The sign-up screen will be displayed.</p> <p>Step 3:</p> <p></p> <p>Figure 2: Sign-up page</p> <ol> <li>Enter your Name in the input box.</li> </ol> <p>Criteria for entering the Name:</p> <ul> <li> <p>Alphabetical Requirement: Your name should only contain letters (A-Z, a-z). No numbers or symbols.</p> </li> <li> <p>Length: It must be at least 3 characters and not exceed 25 characters. This ensures readability and compatibility with the system. </p> </li> </ul> <ol> <li>Enter your Organization Name or School Name in the input box.</li> </ol> <p>This field is optional for the end user.</p> <ol> <li>Enter your Email ID in the input box.</li> </ol> <p>Criteria for entering an Email ID:</p> <ul> <li>Format Compliance: Your email should follow the standard format, which is usually something like username@domainextension. This is necessary for communication and verification purposes. </li> </ul> <ol> <li>Enter your Phone Number in the input box.</li> </ol> <p>Criteria for entering Phone number: It is country specific. Enter the phone number based on country code.</p> <ol> <li>Enter the Password in the input box.</li> </ol> <p>Criteria for selecting a valid password:</p> <ul> <li> <p>Length: Your password needs to be a minimum of 8 characters but no more than 20. This range ensures security while being user-friendly.</p> </li> <li> <p>Uppercase Letter: At least one capital letter for added password strength.</p> </li> <li> <p>Lowercase Letter: At least one small letter to ensure complexity.</p> </li> <li> <p>Special Character: Include at least one character like !, @, $, #, or % for enhanced security.</p> </li> <li> <p>Number: At least one numeral is required for an additional layer of complexity. </p> </li> </ul> <ol> <li>Enter your Confirm Password in the input box.</li> </ol> <p>Matching Criteria: You need to re-enter your password to confirm it. This step is crucial to prevent typing errors in your password.</p> <p>Step 4:</p> <p>Click on Sign Up.</p> <p>Initiate Process: After filling in all the details, clicking this button will submit your information for the creation of your account.</p> <p>A 4-digit OTP is sent to your email ID and registered mobile number. This is a security measure to verify the authenticity of your email ID and mobile number.</p> <p></p> <p>Figure 3: OTP on Email ID</p> <p>Step 5:</p> <p>Enter the 4-digit OTP from your email ID and mobile number. Click on Verify.</p> <p></p> <p>Figure 4: OTP</p> <p>OTP Validation: Please note this OTP is valid for 5 minutes.</p> <p>The sign up screen displays the Terms &amp; Conditions and Privacy Policy to which you will have to adhere as a user of Kalp Studio Platform.</p> <p></p> <p>Figure 5: Terms &amp; Conditions</p> <p></p> <p>Figure 6: Terms &amp; Conditions</p> <p>After completing these steps, your account is set up, and you're ready to log in to Kalp Studio. This process ensures the security of your account and the authenticity of your information.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/1.%20Create%20an%20account/#_2","title":"Create an Account","text":"<p>Login Process</p> <p>This section displays the Kalp Studio user Login feature. The Login feature is for existing users who have completed Sign up. After successful sign-up, a user is ready to use their account and log in to the portal.</p> <p>Verification Process</p> <p>Kalp Studio will place a call to the signed up user to confirm his successful login to the Kalp Studio application. You will be able to access the Kalp Studio platform after this verification.</p> <p></p> <p>Figure 7: Login Verification</p> <p>The below steps describe the user journey throughout the login process.</p> <p>Step 1:</p> <p>Click console.kalp.studio  to redirect to the Kalp Studio application page.</p> <p>Step 2:</p> <ol> <li> <p>Enter your registered Email ID.</p> </li> <li> <p>Enter your Password.</p> </li> </ol> <p>Click on the Login button.</p> <p></p> <p>Figure 1: Login</p> <p>You will reach the Dashboard. In the dashboard, you can check the last updates, view existing or create new smart contracts and projects.</p> <p></p> <p>Figure 2: Dashboard</p>"},{"location":"Getting%20started/1.%20User%20onboarding/1.%20Create%20an%20account/#_3","title":"Create an Account","text":"<p>Login Error Scenario:</p> <p>If you log in through one browser (such as Chrome) and then log in again using a different browser (like Microsoft Edge). Afterward, the previous login will expire automatically.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/1.%20Create%20an%20account/#_4","title":"Create an Account","text":"<p>Forgot Password</p> <p>The \"Forgot Password\" feature is an essential component of any website or platform that allows users to recover access to their accounts when they have forgotten their passwords.</p> <p>Resetting a password successfully is a seamless and straightforward process through the Kalp Studio. User(s) cannot enter Kalp Studio without logging in with the individual\u2019s email and a correct password, matching with the database.</p> <p>The below steps describe the user journey throughout the Reset Password process.</p> <p>Step 1:</p> <p>Click  console.kalp.studio to redirect to the Kalp Studio application page. Click on Forgot Password.</p> <p></p> <p>Figure 1: Forgot Password</p> <p>Step 2:</p> <p>Enter your email ID to receive a link to reset your password. Click on Reset Password.</p> <p></p> <p>Figure 2: Reset Password</p> <p>The reset password link is sent to your email ID. Click on Reset Password.</p> <p></p> <p>Figure 3: Reset Password</p> <p>Step 3:</p> <p>The reset password page is displayed on the screen. Enter your new password.</p> <p>Criteria for selecting a valid password</p> <ul> <li> <p>Password must contain at least 8-20 characters.</p> </li> <li> <p>It should always be an alphanumeric string.</p> </li> <li> <p>Password must contain at least one lowercase and uppercase letter.</p> </li> <li> <p>Password must contain at least one special character, including \u201c!, @, #, $, %, &amp;, *, (), -, +, =, ^\u201d</p> </li> <li> <p>The new password should not match the last 3 passwords.</p> </li> </ul> <p>Repeat your new password on the Confirm Password input box for confirmation.</p> <p></p> <p>Figure 4: Reset Password</p> <p>Click on Update Password. You have successfully changed your password. You will get an email about the successful password change in your registered email ID.</p> <p>Click on Login Now to log in to the Kalp Studio application.</p> <p></p> <p>Figure 5: Password changed successfully</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/2.%20KYC%20Process%20-%20International%20Users/","title":"KYC Process - International Users","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>To ensure the security of your identity on Kalp Studio, we have implemented a KYC (or Know Your Customer) authentication and verification process that enables you to deploy your smart contracts on Kalp Blockchain in a few simple steps.</p> <p>Let\u2019s check out how it's done.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/2.%20KYC%20Process%20-%20International%20Users/#_1","title":"KYC Process - International Users","text":"<p>KYC: International Users</p> <p>Let us now go through the KYC process for International users.</p> <p>Step 1:</p> <p>Login to the Kalp Studio application. For new users, Complete KYC is displayed as you log in. Click on the Complete KYC button.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Step 2:</p> <p>Select your Country to initiate the KYC Process. Click on Initiate Process.</p> <p></p> <p>Figure 2: Initiate Process</p> <p>The verification process varies based on country selection.</p> <p></p> <p>Figure 3: Select Country</p> <p>Step 3:</p> <p>Select your Issuing Country.</p> <p></p> <p>Figure 4: Issuing Country</p> <p>Step 4:</p> <p>Select your preferred mode of verification types. These can be Identity cards, Passports, Driver's License, and Residence Permits.</p> <p></p> <p>Figure 5: Document Types</p> <p>KYC via Mobile Phone</p> <p>Step 5:</p> <p>A message will be displayed \u201cWeb portal wants to use your camera\u201d. This process involves a web camera and the use of a mobile phone. We will first show the KYC through Mobile phone followed by the web process.</p> <p>Continue further verification on the phone screen.</p> <p></p> <p>Figure 6: Continue Verification on mobile phone</p> <p>You can copy the link to your mobile phone or scan the QR code.</p> <p></p> <p>Figure 7: Continue Verification on mobile phone</p> <p>Step 6:</p> <p>Click Selfie. To do this click on I'm Ready.</p> <p>Note: Ensure your face is within the frame. Move your head in a circular direction.</p> <p></p> <p>Figure 8: Take Selfie</p> <p></p> <p>Figure 9: Selfie</p> <p>Step 7:</p> <p>Check and edit/confirm your uploaded document image and selfie. Click on the NEXT afterward.</p> <p></p> <p>Figure 10: Click Next</p> <p>Step 8: Post KYC</p> <p>Your data has been submitted for KYC processing and verification. Your KYC will be confirmed in less than 24 to 48 hours.</p> <p></p> <p>Figure 11: Data Processing</p> <p>KYC Pending status will be displayed on top.</p> <p></p> <p>Figure 12: KYC Pending popup</p> <p>Step 9: Post KYC</p> <p>Post KYC validation, the KYC status successful or failed will be displayed on top.</p> <p></p> <p>Figure 13: KYC Failed</p> <p>KYC via Web</p> <p>Step 1:</p> <p>After completing Step 4 above, the  Selfie screen is displayed. Click on \"I'm Ready\" to click a Selfie.</p> <p></p> <p>Figure 6: Selfie</p> <p>Step 2:</p> <p>A message is displayed that the camera access is needed to capture the selfie.</p> <p></p> <p>Figure 7: Camera Access</p> <p>Step 3:</p> <p>Now move your head in a circular motion to capture the selfie correctly.</p> <p></p> <p>Figure 8: Selfie</p> <p>Step 4:</p> <p>Check for edits or confirm your uploaded document image and selfie. Click on the NEXT afterward.</p> <p></p> <p>Figure 9: Identity Documents</p> <p>Step 5: Post KYC</p> <p>Your data has been submitted for KYC processing and verification. Your KYC will be confirmed in less than 24 to 48 hours.</p> <p>KYC Pending status will be displayed.</p> <p></p> <p>Figure 10: KYC Pending</p> <p>Step 6: Post KYC</p> <p>Post KYC validation, KYC status successful or failed is displayed.</p> <p></p> <p>Figure 11: KYC Failed</p> <p>After successfully completing these steps, you are KYC verified. You can now create projects, create smart contracts in the Kalp Studio application.</p> <p>Hope this article helped with your KYC journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/3.%20KYC%20Process%20-%20Indian%20Users/","title":"KYC Process - Indian Users","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>To ensure the security of your identity on Kalp Studio, we have implemented a KYC (or Know Your Customer) authentication and verification process that enables you to deploy your projects on Kalp Blockchain in a few simple steps.</p> <p>Let us now go through the KYC process for Indian users</p>"},{"location":"Getting%20started/1.%20User%20onboarding/3.%20KYC%20Process%20-%20Indian%20Users/#_1","title":"KYC Process - Indian Users","text":"<p>KYC: Indian Users</p> <p>Step 1:</p> <p>Login to Kalp Studio Application. For new users Complete KYC is displayed as you log in. Click on Complete KYC.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Step 2:</p> <p>Select your Country to initiate KYC.</p> <p></p> <p>Figure 2: Select Country</p> <p>Step 3:</p> <p>Perform Liveness Verification by taking a selfie. The Liveness verification in Know Your Customer (KYC) processes refers to the procedure of verifying that a person attempting to open an account or perform a transaction is physically present and alive during the authentication process.</p> <p></p> <p>Figure 2: Liveness Verification</p> <p>Step 4:</p> <p>Click on Take a Selfie to capture your selfie.</p> <p></p> <p>Figure 3: Take a Selfie</p> <p>Step 5:</p> <p>The Selfie is uploaded here.</p> <p></p> <p>Figure 4: Selfie</p> <p>Step 6:</p> <p>For the next step, you need to upload your PAN Card as proof of identity verification. Then, click \"CONTINUE\" to move forward.</p> <p></p> <p>Figure 5: Upload Pan Card</p> <p>In this screen, the PAN card has been uploaded.</p> <p></p> <p>Figure 6: Pan Card uploaded</p> <p>Step 7:</p> <p>Now you'll need to upload your AADHAR Card as proof of address verification.</p> <p>Note: Maximum allowed file size is 64MB.</p> <p></p> <p>Figure 7: Aadhar Card</p> <p>Step 8:</p> <p>Click on VERIFY AADHAR to open Digilocker. Again, click \"CONTINUE\" to proceed. Now you'll need to upload your AADHAR Card as proof of address verification.</p> <p></p> <p>Figure 9: Verify Aadhar</p> <p>Step 9: Digilocker Account</p> <p>Enter your Aadhaar number in Digilocker and complete the captcha to proceed.</p> <p></p> <p>Figure 10: Digilocker Account</p> <p>Step 10:</p> <p>Now the Digilocker account will link to Authbridge by sending an OTP to your mobile number.</p> <p></p> <p>Figure 11: Digilocker Account</p> <p>Step 11:</p> <p>Once your Digilocker account is linked with Authbridge eAadhaar, you\u2019ll be redirected back to verification details.</p> <p></p> <p>Figure 12: Linking with AuthBridge</p> <p>Step 12:</p> <p>This step verifies successfully the documents submitted. Click on CONTINUE.</p> <p></p> <p>Figure 13: Verified successfully</p> <p>Step 13:</p> <p>You can now preview user details. After confirming the user details click on SUBMIT.</p> <p></p> <p>Figure 14: SUBMIT</p> <p>Step 14: Post KYC</p> <p>After completing these steps, your KYC application will be submitted for review. You will receive an email confirmation on your registered email ID after the KYC process is completed.</p> <p></p> <p>Figure 15: KYC Pending</p> <p>Step 15: Post KYC</p> <p>Post KYC validation, the KYC status successful or failed will be displayed.</p> <p></p> <p>Figure 12: KYC Failed</p> <p>After successfully completing these steps, you are KYC verified. You can now create projects and create smart contracts in the Kalp Studio application.</p> <p>Hope this article helped with your KYC journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/1.%20User%20onboarding/4.%20Explore%20kalp%20studio/","title":"Explore Kalp Studio","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>While accessing the homepage, you will be greeted with a clean and intuitive interface that is designed to maximize efficiency and ease of use. Here are some key functionalities and elements you can expect to find.</p> <p>Complete KYC</p> <p>As you login to the Kalp Studio Application for the first time, you will be notified that your KYC needs to be completed. After you complete the KYC, you can explore the Dashboard further.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Post KYC</p> <p>Post KYC you can explore Dashboard in detail.</p> <p></p> <p>Figure 2: Kalp Studio Homepage</p>"},{"location":"Getting%20started/1.%20User%20onboarding/4.%20Explore%20kalp%20studio/#_1","title":"Explore Kalp Studio","text":"<p>Homepage</p> <p>Kalp Studio Homepage provides an overview of the user's projects, recent actions, and smart contracts. It also provides quick access to settings, help, and the ability to create new projects.</p> <p></p> <p>Figure 3: Testnet Balance, Notification Bell, and Profile Icon</p> <p>Testnet balance</p> <p>This section displays the current balance of your account on the Kalp Studio testnet. The balance you see here likely represents a certain amount of testnet credits. It's used to pay for transaction fees and deployment fees.</p> <p>Notification bell</p> <p>It indicates that you have unread notifications related to your projects, smart contracts, or other activities within the app. Clicking on the icon could then take you to a notification center where you can view and manage these notifications.</p> <p>Profile icon</p> <p>This icon opens the profile section where you can view and manage your account information.</p> <p></p> <p>Figure 4: Profile Icon</p> <p>Your Profile: This text indicates that clicking on the profile icon will take you to a section where you can view and edit your profile information, such as your name, email address, and preferences.</p> <ul> <li> <p>Kalp Testnet ID: This section displays your unique identifier on the Kalp Studio testnet. The testnet is a simulated blockchain environment allowing you to test and develop your smart contracts. Your Kalp Testnet ID is used to track your activity and balances on the testnet.</p> </li> <li> <p>Logout: This button allows you to log out of the Kalp Studio app. Once you log out, you will need to enter your credentials again to access the app.</p> </li> </ul>"},{"location":"Getting%20started/1.%20User%20onboarding/4.%20Explore%20kalp%20studio/#_2","title":"Explore Kalp Studio","text":"<p>Dashboard</p> <p></p> <p>Figure 5: Dashboard</p> <p>Create a Project: This button allows you to initiate the process of creating a new project within Kalp Studio. Creating a project would likely be the first step for managing smart contracts and associated activities within Kalp Studio.</p> <p>Last Update: This section might display a list of recent actions or events related to your projects and smart contracts.</p> <p>Smart Contract: The \"Smart Contract\" section you described seems to provide an overview of a specific smart contract within the Kalp Studio app.</p> <ul> <li> <p>Transaction ID: This is a unique identifier assigned to the smart contract and is used to trace and identify it on the Kalp blockchain.</p> </li> <li> <p>Name: This is the user-defined name given to the smart contract, making it easier to identify and differentiate among multiple contracts.</p> </li> <li> <p>Project: This indicates the project to which the smart contract belongs. This helps organize and categorize your smart contracts based on their specific use cases.</p> </li> <li> <p>Environment: This specifies the environment where the smart contract is deployed or intended to be deployed.</p> </li> <li> <p>Status: This indicates the current state of the smart contract, such as \"Success,\" \"Failed,\" \"In Review,\" \"Pending\", or \"Save as Draft\".</p> </li> <li> <p>Network: This specifies the blockchain network on which the smart contract is deployed or designed to run. \"Testnet\" is used for deploying Smart Contracts on Kalp Studio.</p> </li> <li> <p>Created on: This shows the date and time when the smart contract was created within the Kalp Studio platform.</p> </li> <li> <p>Edit Smart Contract: This button allows you to modify the code, configuration, or settings of the smart contract. Users can only edit Smart Contracts that are saved to draft.</p> </li> </ul>"},{"location":"Getting%20started/1.%20User%20onboarding/4.%20Explore%20kalp%20studio/#_3","title":"Explore Kalp Studio","text":"<p>Left Menu</p> <p>The following outlines the functionalities available in the left menu of Kalp Studio's interface, designed to provide users with a comprehensive suite of tools for project development and management:</p> <p></p> <p>Figure 6: Left Menu</p> <p>Projects</p> <ul> <li>This module serves as a centralized hub for managing and organizing distinct projects within Kalp Studio. Each project encapsulates a separate application or use case, ensuring resource and configuration isolation for streamlined project administration.</li> </ul> <p>Smart Contract</p> <ul> <li>This segment provides a comprehensive suite of tools for the lifecycle management of smart contracts, encompassing creation, testing, deployment, and interaction phases. It facilitates the direct integration of blockchain technology into applications through self-executing contractual agreements codified in blockchain.</li> </ul> <p>KALP Wallet</p> <ul> <li>The KALP Wallet interface enables secure management of KALP testnet credits essential for facilitating transactions within the Kalp Studio ecosystem. Features include deployment status, transaction history, and added fund history.</li> </ul> <p>Billing</p> <ul> <li>This area is dedicated to the financial management aspects of Kalp Studio services, offering functionalities for payment method configuration, subscription management, and historical payment records.</li> </ul> <p>Docs</p> <ul> <li>This repository provides exhaustive documentation on Kalp Studio's API offerings, designed to aid users in the integration and utilization of platform services. It encompasses detailed guides, example use cases, and API reference material to ensure effective platform adoption.</li> </ul> <p>Settings</p> <ul> <li>The Settings module allows for the customization and configuration of user preferences and project-specific parameters within Kalp Studio. It encompasses account management, security settings, and user interface customization options to enhance the platform's utility and user experience.</li> </ul> <p>Help &amp; Support</p> <ul> <li>The \"Help &amp; Support\" section in Kalp Studio navigates users to a resourceful collection of Frequently Asked Questions (FAQs) and insightful articles, aimed at offering immediate assistance and guidance on various aspects of the platform's usage and features.</li> </ul> <p>Error Scenarios</p> <p>Internet Access not available:</p> <p>When internet access is not available following error is displayed.</p> <p></p> <p>Figure 7: Internet Error</p> <p>Error 404: Page not found</p> <p>Error 404 is displayed when the page is not found by the browser.</p> <p></p> <p>Figure 8: Page not found</p>"},{"location":"Getting%20started/2.%20Project%20management/1.%20Creating%20a%20kalp%20studio%20project/","title":"Creating a Kalp Studio project","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Feeling overwhelmed by multiple smart contracts for a single project? Worry not! Creating a well-organized project folder is your key to conquering complexity. This folder will neatly encapsulate all your smart contracts, and essential project details, keeping you focused and in control throughout the development process.</p> <p>So, let's dive in and explore how to effortlessly set up your project folder and say goodbye to scattered files and chaotic workflows!</p>"},{"location":"Getting%20started/2.%20Project%20management/1.%20Creating%20a%20kalp%20studio%20project/#_1","title":"Creating a Kalp Studio project","text":"<p>Create My Project</p> <p>The Create Project process is essential to experience and explore the diverse functionalities of Kalp Studio. Users need to name, categorize, and describe their projects to work with them in the future.</p> <p>Step 1:</p> <p>Click app.kalp.studio to redirect to the Kalp Studio application page. After a successful login, you will reach the Dashboard.</p> <p></p> <p>Figure 1: Dashboard</p> <p>Step 2:</p> <p>Click on Projects on the left pane bar. You can create a new Project by clicking on Create Project.</p> <p></p> <p>Figure 2: Create Project</p> <p>Step 3: Create Project</p> <p>Click on Create Project. Create New Project is displayed.</p> <p></p> <p>Figure 3: Create a New Project</p> <ol> <li>Enter the Project Name in the input box.</li> </ol> <p>Criteria to enter your Project Name field:</p> <ul> <li> <p>It must have only one space between two words.</p> </li> <li> <p>It must be alpha-numeric.</p> </li> <li> <p>It must not be a repeated name.</p> </li> <li> <p>It must be at least 1 characters.</p> </li> <li> <p>It must not exceed 25 characters. </p> </li> </ul> <ol> <li>Select Category. You can select any of the following categories:</li> </ol> <p>These are the following categories for a project:</p> <ul> <li> <p>Art</p> </li> <li> <p>Photography</p> </li> <li> <p>Literature</p> </li> <li> <p>Design</p> </li> <li> <p>Legal</p> </li> <li> <p>Technical</p> </li> <li> <p>Architecture</p> </li> <li> <p>Movies</p> </li> <li> <p>Music</p> </li> <li> <p>NFT</p> </li> <li> <p>Enter Description. It is optional for the user(s) to put a description of their project.</p> </li> <li> <p>Click on Create Project Now to successfully create a project.</p> </li> </ul> <p></p> <p>Figure 4: Project created successfully</p> <p>Step 3: View Project</p> <p>Click on the project module from the left menu bar  to view the newly created project.</p> <p></p> <p>Figure 5: Project</p> <p></p> <p>Figure 6: Project Details</p> <p>The Project details are editable.</p> <p>Hope this article helped you to create a project in the Kalp Studio platform.</p>"},{"location":"Getting%20started/2.%20Project%20management/2.%20How%20do%20view%20%26%20edit%20my%20projects/","title":"How do I view/edit my projects?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Project created? Awesome! Now, let's explore the exciting world of managing your masterpiece. This article unravels the mysteries of viewing and editing projects on Kalp Studio. Whether you're a seasoned code warrior or a budding blockchain explorer, we'll equip you with the knowledge to navigate your projects with ease. Dive in and discover how to access, tweak, and master your creations on Kalp Studio!</p>"},{"location":"Getting%20started/2.%20Project%20management/2.%20How%20do%20view%20%26%20edit%20my%20projects/#_1","title":"How do I view/edit my projects?","text":"<p>View List of Projects</p> <p>The View List of Projects provides a list of all projects that have been created so far. It includes details like Project ID, Project Name, Category, etc.</p> <p>Step 1:</p> <p>After you have successfully created a project, click on View Project to view the list of projects. You can also reach the list of projects from the Dashboard-Projects option.</p> <p></p> <p>Figure 1: View Project</p> <p>Step 2: List of Projects</p> <p>The following fields are displayed here:</p> <ul> <li> <p>Project ID: A unique project ID.</p> </li> <li> <p>Project Name: Name of the project.</p> </li> <li> <p>Category: Category to which the project belongs like NFT, Photography, Art, etc.</p> </li> <li> <p>Created On: Date on which the project is created.</p> </li> </ul> <p>Note: 10 records per page are displayed.</p> <p></p> <p>Figure 2: List of Projects</p> <p>Step 3: Filters</p> <p>You can organize projects based on Category and Date filters.</p> <p></p> <p>Figure 5: Category</p> <p></p> <p>Figure 6: Date</p> <p>On applying appropriate filters the specific search results are available.</p> <p>Click on Clear Filters to reset the applied filters.</p> <p>You can also arrange Project Name, Category, and Created on fields in both alphabetical and ascending, descending orders.</p> <p></p> <p>Figure 7: List of Projects</p>"},{"location":"Getting%20started/2.%20Project%20management/2.%20How%20do%20view%20%26%20edit%20my%20projects/#_2","title":"How do I view/edit my projects?","text":"<p>Edit Project</p> <p>Step 4: View Project Details</p> <p>As you click on the particular project, a pop-up will appear containing the details of the project.</p> <p></p> <p>Figure 8: Edit Project</p> <ol> <li>Click on the either pencil icon or edit option present on the pop-up to edit project details.</li> </ol> <p></p> <p>Figure 3: Edit icon</p> <ol> <li>Edit Project screen is displayed.</li> </ol> <p></p> <p>Figure 4: Edit Project</p> <p>You can edit the Project Name, Category, and Description. Click on Save Changes to save the modified details.</p> <p>Hope this article helped you to view/edit a project in the Kalp Studio platform.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/","title":"How do I write a Smart Contract?","text":"<p>This documentation provides an in-depth guide on the steps to follow in writing Smart Contracts tailored for developers aiming to interact with the Kalp blockchain network.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_1","title":"How do I write a Smart Contract?","text":"<p>Overview</p> <p>We require Kalp-SDK to a comprehensive Golang package that simplifies the development of smart contracts on the Kalp blockchain network. It is specifically designed to enable developers to write and create Aa Kalp-blockchain-compliant smart contracts with a set of powerful functionalities.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_2","title":"How do I write a Smart Contract?","text":"<p>Prerequisites </p> <ul> <li> <p>Golang installation and setup</p> <p>A recent version of Go is recommended preferably 1.19 or earlier 1.20. Compatibility with newer versions might not be guaranteed for all Kalp functionalities.</p> </li> <li> <p>Kalp Software Development Kit (SDK) Installation:</p> <ul> <li> <p>Installation: Install the Kalp SDK by following the official installation instructions provided by the Kalp team. These instructions may involve downloading a pre-built binary or building the SDK from the source code.</p> </li> <li> <p>Documentation: Familiarize yourself with the Kalp SDK documentation, which outlines available functionalities, usage examples, and best practices for interacting with the Kalp platform through your Go applications.</p> </li> </ul> </li> <li> <p>Basic Understanding of Blockchain Fundamentals:</p> <p>Possess a basic understanding of blockchain networks, including concepts like distributed ledgers, consensus mechanisms, and smart contracts.</p> </li> <li> <p>Go Programming Proficiency:</p> <p>Prior experience and proficiency in the Go programming language are essential prerequisites for contributing to Kalp development. This includes understanding core Go syntax, data structures, control flow statements, and error-handling mechanisms.</p> </li> </ul>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_3","title":"How do I write a Smart Contract?","text":"<p>Set up your Development Environment</p> <ul> <li> <p>Download and install the appropriate Golang binary for your operating system from the official Golang download page: https://go.dev/doc/install. Follow the provided installation instructions to ensure proper integration with your system.</p> </li> <li> <p>Set up your Go workspace, with the following process:</p> <ul> <li> <p>GOPATH: Set the <code>GOPATH</code> environment variable to define your preferred location for storing Go source code, compiled packages, and downloaded dependencies. It's recommended to choose a dedicated directory outside your system directories (e.g., <code>/home/your_username/go</code>).</p> </li> <li> <p>PATH Update: Add the <code>$GOPATH/bin</code> directory to your system's <code>PATH</code> environment variable. This allows you to execute Go commands (like <code>go build</code>, <code>go run</code>) from any terminal location without specifying the full path.</p> </li> </ul> </li> </ul>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_4","title":"How do I write a Smart Contract?","text":"<p>Creating and Starting Chaincode</p> <ol> <li> <p>Create a new directory for your project.</p> <ol> <li> <p>Execute the following command to create a new directory named <code>my-smart-contract</code></p> </li> <li> <p>Change the directory into the newly created project directory.</p> </li> </ol> </li> </ol> <p>Copy</p> <pre><code>$ mkdir my-smart-contract\n$ cd my-smart-contract\n</code></pre> <ol> <li>Initialize a new Go module: Within the <code>my-smart-contract</code> directory, run the following command to initialize a new Go module named <code>my-smart-contract</code>:</li> </ol> <p>Copy</p> <pre><code>$ go mod init my-smart-contract\n</code></pre> <ol> <li>Getting Started with Kalp-SDK: Use the <code>go get</code> command to download and install the Kalp SDK library:</li> </ol> <p>Copy</p> <pre><code>$ go get -u github.com/p2eengineering/kalp-sdk-public/kalp\n</code></pre> <p>Response:</p> <p>Copy</p> <pre><code>go: downloading golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: downloading golang.org/x/sys v0.17.0\ngo: downloading google.golang.org/grpc v1.62.0\ngo: downloading golang.org/x/net v0.21.0\ngo: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading google.golang.org/genproto v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading github.com/go-openapi/spec v0.20.14\ngo: downloading github.com/go-openapi/swag v0.22.9\ngo: downloading google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: downloading golang.org/x/mod v0.15.0\ngo: added github.com/go-openapi/jsonpointer v0.20.2\ngo: added github.com/go-openapi/jsonreference v0.20.4\ngo: added github.com/go-openapi/spec v0.20.14\ngo: added github.com/go-openapi/swag v0.22.9\ngo: added github.com/gobuffalo/envy v1.10.2\ngo: added github.com/gobuffalo/packd v1.0.2\ngo: added github.com/gobuffalo/packr v1.30.1\ngo: added github.com/golang/protobuf v1.5.3\ngo: added github.com/hyperledger/fabric-chaincode-go v0.0.0-20240124143825-7dec3c7e7d45\ngo: added github.com/hyperledger/fabric-contract-api-go v1.2.2\ngo: added github.com/hyperledger/fabric-protos-go v0.3.3\ngo: added github.com/joho/godotenv v1.5.1\ngo: added github.com/josharian/intern v1.0.0\ngo: added github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: added github.com/mailru/easyjson v0.7.7\ngo: added github.com/p2eengineering/kalp-sdk-public v0.0.0-20240118070807-283512298976\ngo: added github.com/rogpeppe/go-internal v1.12.0\ngo: added github.com/sirupsen/logrus v1.9.3\ngo: added github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb\ngo: added github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415\ngo: added github.com/xeipuuv/gojsonschema v1.2.0\ngo: added golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: added golang.org/x/mod v0.15.0\ngo: added golang.org/x/net v0.21.0\ngo: added golang.org/x/sys v0.17.0\ngo: added golang.org/x/text v0.14.0\ngo: added google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: added google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: added google.golang.org/grpc v1.62.0\ngo: added google.golang.org/protobuf v1.32.0\ngo: added gopkg.in/yaml.v2 v2.4.0\ngo: added gopkg.in/yaml.v3 v3.0.1\n</code></pre> <ol> <li>Create a new Go source file<code>.go</code> within your project directory. This file will house the core logic of your smart contract. Utilize your preferred text editor or IDE to create the file and ensure it's saved with the <code>.go</code> extension.</li> </ol> <p>Copy</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/p2eengineering/kalp-sdk-public/kalpsdk\"\n)\n\ntype SmartContract struct {\n     kalpsdk.Contract\n}\n\nfunc (sc *SmartContract) ExecuteTransaction() {\n    // Implement the logic for executing transactions\n    fmt.Println(\"Executing transaction...\")\n}\n\nfunc (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\n</code></pre> <p>This newly created file will encompass the following core elements:</p> <ul> <li> <p>Package Declaration: <code>package main</code>: This line specifies that the code within this file belongs to the <code>main</code> package, which is the entry point for your smart contract application.</p> </li> <li> <p>Imports:</p> <ul> <li> <p><code>fmt</code>: This import statement allows you to utilize the <code>fmt</code> package, providing functionalities for formatted printing and input/output operations.</p> </li> <li> <p><code>github.com/p2eengineering/kalp-sdk-public/kalpsdk</code>: This import statement brings the Kalp SDK library into your project, granting access to the necessary functionalities for interacting with the Kalp blockchain ecosystem.</p> </li> </ul> </li> <li> <p>Smart Contract Definition: <code>type SmartContract struct { ... }</code>: This part defines a custom struct named <code>SmartContract</code> which serves as the blueprint for your smart contract. It embeds the <code>kalpsdk.Contract</code> type, inheriting functionalities offered by the Kalp SDK framework.</p> </li> <li> <p>Transaction Execution Function: <code>func (sc *SmartContract) ExecuteTransaction() { ... }</code>: This function, named <code>ExecuteTransaction</code>, represents the core logic that will be executed whenever a transaction interacts with your smart contract. Customize this function to encapsulate the specific business logic your smart contract is designed to handle.</p> </li> <li> <p>Initialization Function: <code>func (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error { ... }</code>: This function, named <code>Init</code>, serves as the initialization entry point for your smart contract. It typically defines any setup tasks or initialization logic required for your smart contract to function correctly. It takes a <code>kalpsdk.TransactionContextInterface</code> argument, providing access to contextual information about the ongoing transaction.</p> </li> <li> <p>Create <code>main.go</code> file in the following way.</p> </li> </ul> <p>Copy</p> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/p2eengineering/kalp-sdk/kalpsdk\"\n)\n\nfunc main() {\n\n    contract := kalpsdk.Contract{IsPayableContract: true}\n\n    contract.Logger = kalpsdk.NewLogger()\n    chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})\n    contract.Logger.Info(\"My KAPL SDK sm4\")\n\n    // Create a new instance of your KalpContractChaincode with your smart contract\n    // chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{kalpsdk.Contract{IsPayableContract: true}})\n    // kalpsdk.NewLogger()\n    if err != nil {\n        log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n    }\n\n    // Start the chaincode\n    if err := chaincode.Start(); err != nil {\n        log.Panicf(\"Error starting chaincode: %v\", err)\n    }\n</code></pre> <p>The <code>main.go</code> file stands as the conductor that orchestrates the initialization and execution of your smart contract within the Kalp blockchain environment. It serves as the entry point for your application, bringing your carefully crafted smart contract logic to life. Here's a detailed explanation of its structure:</p> <ul> <li> <p>Necessary Imports:</p> <ul> <li> <p><code>**log**</code> package: This package empowers you to issue logging messages, providing valuable insights into the execution flow and potential errors for debugging purposes.</p> </li> <li> <p><code>**github.com/p2eengineering/kalp-sdk/kalpsdk**</code> package: This import statement grants access to the essential Kalp SDK functionalities for interacting with the blockchain network and managing your smart contract.</p> </li> </ul> </li> <li> <p>The <code>**main**</code> Function: This function serves as the starting point for your application when it's executed. It undertakes the following crucial tasks:</p> </li> <li> <p>Contract Configuration:</p> <ul> <li> <p><code>**contract := kalpsdk.Contract{IsPayableContract: true}**</code>: This line initializes a new <code>Contract</code> object, defining key properties of your smart contract. The <code>IsPayableContract: true</code> setting designates that your contract will be capable of receiving payments from users.</p> </li> <li> <p><code>**contract.Logger = kalpsdk.NewLogger()**</code>: This statement creates a new logger instance and assigns it to the contract, enabling you to generate logging messages for tracking events and debugging.</p> </li> </ul> </li> <li> <p>Chaincode Instantiation:</p> <ul> <li> <p><code>**chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})**</code>: This line constructs a new instance of the <code>KalpContractChaincode</code> type. It integrates your custom <code>SmartContract</code> implementation, effectively bridging your contract logic with the Kalp SDK framework.</p> </li> <li> <p><code>**contract.Logger.Info(\"My KAPL SDK sm4\")**</code>: This statement logs an informative message using the logger, indicating that the chaincode is initialized and ready to commence operations.</p> </li> </ul> </li> <li> <p>Crucial Error Handling:<code>**if err != nil { ... }**</code> blocks: These conditional blocks diligently check for potential errors during chaincode creation and startup. If errors occur, the <code>panicf</code> the function is invoked, terminating execution with an informative error message. This assertive error handling safeguards the integrity of your application and facilitates debugging efforts.</p> </li> <li> <p>Chaincode Activation:<code>**if err := chaincode.Start(); err != nil { ... }**</code>: This block calls the <code>Start()</code> function on the instantiated chaincode, triggering the execution of your smart contract within the Kalp blockchain environment. Once again, error handling is incorporated to gracefully address any issues that might impede chaincode startup.</p> </li> </ul> <p>Note:</p> <p>Payment Tracking for Payable Contracts: Pass your contract <code>_struct_</code> as an argument to the <code>_NewChaincode_</code> function and specify whether the contract is payable or not.</p> <ol> <li>Vendoring the dependencies: This places the external dependencies for your smart contract into a local <code>vendor</code> directory.</li> </ol> <p>Copy</p> <pre><code>$ go mod vendor\n</code></pre> <ol> <li>Folder Structure: After Executing the above command the folder Structure shows up as below:</li> </ol> <p>Copy</p> <pre><code>Folder name\n\u251c\u2500\u2500vendor\n\u251c\u2500\u2500go.mod\n\u251c\u2500\u2500go.sum\n\u251c\u2500\u2500main.go\n\u2514\u2500\u2500 contract\n    \u2514\u2500\u2500 contract.go\n</code></pre> <ol> <li>Save your changes.</li> </ol>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_5","title":"How do I write a Smart Contract?","text":"<p>Implementation Steps with Kalp SDK</p> <ol> <li>Define a New Go Struct: Represent your contract with a new Go struct and embed the <code>kalpsdk.Contract</code> struct to inherit base contract functionalities.</li> </ol> <p>Copy</p> <pre><code>type MyContract struct {\nkalpsdk.Contract\n}\n</code></pre> <ol> <li>Implement the Contract Interface: Define the <code>Init</code> and <code>Invoke</code> methods for initialization logic and invocation handling.</li> </ol> <p>Copy</p> <pre><code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n// Invoke logic return nil\n}\n</code></pre>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_6","title":"How do I write a Smart Contract?","text":"<ol> <li>Blockchain Data Management</li> </ol> <p>This section details the core functionalities available for managing data on the blockchain:</p> <p>Writing to the Blockchain:</p> <ul> <li> <p><code>**PutStateWithKyc**</code>: This function facilitates writing data onto the blockchain ledger. Crucially, it enforces mandatory KYC (Know Your Customer) verification as part of the write operation, ensuring compliance with regulatory requirements or specific platform policies.</p> </li> <li> <p><code>**PutStateWithoutKyc**</code>: This function enables writing data to the blockchain ledger. Unlike its counterpart, it bypasses the KYC verification step, potentially catering to situations where regulatory constraints are not applicable or KYC checks have already been performed at an earlier stage.</p> </li> </ul> <p>Reading from the Blockchain:</p> <ul> <li><code>**GetState**</code>: This function retrieves the data from the blockchain ledger. It allows querying the current state of the ledger to obtain information relevant to your application's needs.</li> </ul> <p>Deleting from the Blockchain:</p> <ul> <li> <p><code>**DelStateWithKyc**</code>: This function enables deleting data from the blockchain ledger. Similar to <code>PutStateWithKyc</code>, it enforces mandatory KYC verification before proceeding with the deletion operation.</p> </li> <li> <p><code>**DelStateWithoutKyc**</code>: This function allows the deleting data from the blockchain ledger. Just as with <code>PutStateWithoutKyc</code>, it bypasses the KYC verification step, potentially catering to specific scenarios where deletion is permitted without additional verification.</p> </li> </ul>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_7","title":"How do I write a Smart Contract?","text":"<p>Sample Code Examples</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_8","title":"How do I write a Smart Contract?","text":"<p>Writing to the Blockchain</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_9","title":"How do I write a Smart Contract?","text":"<p>PutStateWithKyc</p> <p>Copy</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\")) if err != nil {\n // Handle error \n } else {\n  // Data successfully written to the blockchain with KYC verification\n   }\n</code></pre>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/1.%20How%20do%20i%20write%20a%20smart%20contract/#_10","title":"How do I write a Smart Contract?","text":"<p>PutStateWithoutKyc</p> <p>Copy</p> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre> <p>For more information, visit: Kalp Golang SDK</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/2.%20How%20do%20i%20deploy%20a%20smart%20contract/","title":"How do I deploy a Smart Contract?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Tired of complex coding and deployment hassles? Building a Smart Contract shouldn't feel like climbing Mount Everest. This guide is here to empower you with a clear and smooth path to creating your Smart Contract. We'll break down the process into easy-to-follow steps, ensuring you have the confidence and knowledge to bring your ideas to life on the blockchain.</p> <p>Smart contracts are digital agreements coded on a blockchain that automatically execute or enforce the terms of a contract when predefined conditions are met. They enable secure, transparent, and decentralized transactions without the need for intermediaries.</p> <p>So, let\u2019s begin with the Smart Contract creation on Kalp Studio.</p> <p>Note: To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/2.%20How%20do%20i%20deploy%20a%20smart%20contract/#_1","title":"How do I deploy a Smart Contract?","text":"<p>Smart Contract Creation</p> <p>Step 1: Initiating Smart Contract Creation: For first-time users, the screen with no Smart Contract list will be displayed.</p> <p></p> <p>Figure 1: Initiate Smart Contract</p> <p>To create a Smart Contract you have to agree to Kalp Studio's Terms and Conditions.</p> <p></p> <p>Figure 2: Kalp Studio Terms and Conditions</p> <p>After you agree to the terms and conditions, you can start creating the Smart Contract. Click on Create Smart Contract.</p> <p></p> <p>Figure 3: Create Smart Contract</p> <p>Access the \"Smart Contract\" section via the left panel bar on Kalp Studio.</p> <p></p> <p>Figure 4: Contract Details</p> <p>Select the \"Create Smart Contract\" button. Alternatively, this can also be achieved through the \"Create Smart Contract\" option on the Dashboard.</p> <p>Step 2: Detailing the Smart Contract:</p> <p></p> <p>Figure 5: Smart Contract Details</p> <ul> <li> <p>Name: Assign a distinctive name to the Smart Contract.</p> </li> <li> <p>Project: Identify the overarching project or system the Smart Contract integrates with.</p> </li> <li> <p>Description: Offer a concise description outlining the contract's functionality.</p> </li> </ul> <p>Step 3: Environment Selection:</p> <p></p> <p>Figure 6: Setup Environment</p> <p>Opt for the appropriate environment for deployment: \"Development\", \"Staging\", or \"Production\".</p> <p>Step 4: Network Selection:</p> <p></p> <p>Figure 7: Network Selection</p> <p>Determine the deployment network - \"TestNet\".</p> <p>Step 5: Template Utilization and Submission:</p> <p></p> <p>Figure 8: Extension File/Template</p> <p>Kalp Studio provides ERC token templates. Select the relevant template for your needs.</p> <p></p> <p>Figure 9: Kalp Templates</p> <p>Download, complete, and upload the filled template to Kalp Studio for review and subsequent actions.</p> <p>Step 6: Final Review and Publication:</p> <p></p> <p>Figure 10: Review</p> <p>Save Draft</p> <p>If you want to pause the Smart Contract creation and would like to visit it later then Save Draft is a great option!</p> <p>In this option, all fields are editable and can be modified at a later point.</p> <p>Save &amp; Publish</p> <p>After you Save &amp; Publish the Smart Contract gets deployed on the Kalp blockchain. You can still edit the Smart Contract Name and Description. All other fields are non-editable.</p> <p>The published Smart Contract gets added to the list of Smart Contracts. If the user wants to make some changes in Smart Contract, Save Draft option can be used. The saved draft can be edited anytime by the user.</p> <p>List of Smart Contracts</p> <p>Adhering to these steps will ensure the professional and efficient creation of a Smart Contract on Kalp Studio, streamlining your project's development process. You can view the list of newly created Smart Contract after Save and Publish.</p> <p></p> <p>Figure 11: List of Smart Contacts</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/3.%20How%20can%20i%20test%20my%20smart%20contract/","title":"How can I test my Smart Contract?","text":"<p>This guide empowers you to leverage Kalp Studio for efficient smart contract deployment and streamlined testing. Discover how to seamlessly deploy your smart contracts and effectively test them.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/3.%20How%20can%20i%20test%20my%20smart%20contract/#_1","title":"How can I test my Smart Contract?","text":"<p>Smart Contract Verification and Testing</p> <p>Step 1: Verify your smart contract's syntax and functionality by compiling it using the following command:</p> <p>Copy</p> <pre><code>$ go build .\n</code></pre> <p>Step 2: A successful compilation signifies that your code adheres to Go language syntax rules and is free of errors.</p> <p>Step 3: Proceed to test your smart contract to ensure its behavior aligns with your expectations. Utilize appropriate testing frameworks or unit tests to simulate interactions with your smart contract and verify its outputs. This step is crucial for identifying and rectifying any potential issues before deployment.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/3.%20How%20can%20i%20test%20my%20smart%20contract/#_2","title":"How can I test my Smart Contract?","text":"<p>Interacting with Your Smart Contract</p> <ol> <li> <p>Establish a connection to the relevant blockchain network, enabling your application to interact with the deployed smart contracts.</p> </li> <li> <p>Kalp Studio automatically generates API endpoints that directly map to the functionalities of your smart contracts. These endpoints simplify integration by providing a well-defined interface for your front-end application to interact with the underlying smart contract logic.</p> </li> </ol> <p></p> <p>Steps to Deploy and test the smart contract API endpoints:</p> <ul> <li>Deployment of Smart Contract through Kalp Studio: Utilize the generated API endpoints directly within your front-end application (e.g., React.js, Next.js). This approach seamlessly integrates smart contract functionalities into your user interface, enabling dynamic interactions and data retrieval.</li> </ul> <p>Check out the Freshdesk Article: How to deploy a Smart Contract? or How Can I Perform Transactions using API Endpoints?</p> <ul> <li>Checking and Testing API Endpoints: Employ Postman, a popular API testing tool, to send requests to the generated API endpoints. This method facilitates individual function testing, allowing you to verify their behavior and outputs in a controlled environment before integrating them into your front-end application.</li> </ul>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/3.%20How%20can%20i%20test%20my%20smart%20contract/#_3","title":"How can I test my Smart Contract?","text":"<p>Postman Testing for Kalp Smart Contract API Endpoints</p> <p>Following successful smart contract deployment and API endpoint generation within Kalp Studio, delve into the essential steps for testing these endpoints using Postman:</p> <ol> <li>Reading from the Smart Contract</li> </ol> <p>Kalp Studio enables efficient data retrieval from deployed smart contracts using read-only methods. These methods allow your application to query the blockchain ledger without modifying its state.</p> <p>Example: To retrieve a user's account balance, you would invoke the <code>ClientAccountBalance</code> function through the generated API endpoint. This function would fetch the relevant data from the ledger and return it to your application.</p> <p>By leveraging read-only methods, you can access crucial information from the blockchain without altering its state, ensuring data integrity and facilitating various application functionalities.</p> <p></p> <p>Sample Result: ClientAccountBalance Function</p> <ol> <li>Writing to the Smart Contract</li> </ol> <p>Kalp Studio empowers developers to perform write operations, which involve modifying the state of the blockchain ledger through smart contract interactions. These operations typically involve sending transactions to specific contract functions provided by the Kalp SDK.</p> <p>Example: To transfer tokens, you would utilize the appropriate function (e.g., <code>Transfer</code>) through the generated API endpoint. This function would initiate a transaction on the blockchain, deducting tokens from the sender's account and crediting them to the recipient's account.</p> <p></p> <p>Sample Result: MintBatch Function</p> <ol> <li>Transaction Management: With the Kalp SDK, developers can efficiently manage transactions on the blockchain network. It provides functions for submitting transactions, querying transaction information, and retrieving transaction history. This simplifies the process of interacting with the blockchain and ensures the integrity of transactional operations.</li> </ol> <p>Example: All the Functions provided as: <code>PutStateWithKYC, DelStateWithoutKYC, DelStateWithKYC, GetState, GetTxID, GetChannelD, SetEvent, GetUserID.</code></p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/3.%20How%20can%20i%20test%20my%20smart%20contract/#_4","title":"How can I test my Smart Contract?","text":"<p>Conclusion</p> <p>You're now ready to begin your journey as a Kalp blockchain developer. Experiment with different types of smart contracts, explore the functionalities offered by the Kalp SDK, and start building innovative DApps on the Kalp blockchain.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/4.%20How%20can%20I%20view%20the%20list%20of%20my%20Smart%20Contracts/","title":"How can I view the list of my Smart Contracts ?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Keeping track of your smart contracts can feel overwhelming, but it doesn't have to be. Kalp Studio is here to simplify your experience, offering a streamlined and efficient way to view and manage all your smart contracts in one place.</p> <p>Smart contracts are automated contracts coded on a blockchain, facilitating secure, transparent, and decentralized transactions without intermediaries. They execute or enforce contract terms when certain conditions are met.</p> <p>Let's dive into how you can view your list of smart contracts on Kalp Studio.</p> <ol> <li>Smart Contract</li> </ol> <p>Figure 1: Dashboard</p> <p>Go to the smart contract section on the left menu.</p> <p>Once there, you'll see a list of smart contracts. Each entry in this list is composed of several components:</p> <p>Figure 2: Smart Contract List</p> <p>ID: A unique identifier for the smart contract.</p> <p>Name: The name given to the smart contract.</p> <p>Project: The project or initiative the smart contract is part of.</p> <p>Environment: The development or deployment environment of the smart contract</p> <p>Status: The current state of the smart contract (e.g., Success, In Review, Pending or Failed).</p> <p>Network: The blockchain network on which the smart contract operates, i.e. Testnet.</p> <p>Created on: The date when the smart contract was created.</p> <ol> <li>Tools &amp; Filters</li> </ol> <p>Figure 3: Tools &amp; Filters</p> <p>Select Network: This dropdown allows you to filter the list of smart contracts by the blockchain network they operate on. The network can be a test network.</p> <p>Select Status: This dropdown lets you filter the smart contracts based on their current status. Options might include Success, In Review, Pending, or Failed helping you to find contracts that match your criteria for operational status.</p> <p>Date: This filter allows you to select smart contracts based on their creation date or any significant date markers relevant to the contract's lifecycle. You can often choose from a date range picker to view contracts created.</p> <p>Additional Scenarios (When the user clicks on the edit button) When you click the edit icon in the Smart Contract Details, you'll be able to edit the following fields:</p> <p>Figure 4: Edit Icon</p> <p>A user will only be able to use the edit icon when the smart contract is saved in drafts.</p> <ol> <li> <p>On selecting the edit icon against any contract, the all details present in the drafts can be changed.</p> </li> <li> <p>If the status is set to success, pending or in review, the user can change only the name and description.</p> </li> </ol> <p>Smart Contract Name: Allows you to update the name of the smart contract.</p> <p>Project Name: Enables you to change the project or initiative the smart contract is associated with.</p> <p>Network: It lets you select or change the blockchain network on which the smart contract operates i.e. test network</p> <p>Environment: You can update the environment setting of the smart contract Development, Staging, and Production.</p> <p>Description: Provides a text area where you can edit or add a detailed description of the smart contract\u2019s purpose and functionality.</p> <p>Figure5: Edit Smart Contract</p> <p>When you select a deployed smart contract (with a success status) from the list, you'll be presented with the Smart Contract Details section where you can gain details on your selected Smart Contract.</p> <ol> <li>Gain Details</li> </ol> <p>For more details regarding a particular Smart Contract, you can click on the smart contract details and you'll get a screen where you can change tabs between details, Transactions, and API Endpoints of the Smart Contract.</p> <p>Figure 6: Smart Contract Details</p> <p>Smart Contract Details The \"Smart Contract Details\" provide specific information about a particular smart contract in a Kalp network.</p> <p>Figure 7: Smart Contract Details</p> <p>ID: A blank field where the unique identifier of the smart contract will be displayed.</p> <p>Environment: The stage of deployment, such as development, staging, or production.</p> <p>Network: Specifies on which net the smart contract is deployed i.e. testnet.</p> <p>Project: The name or identifier of the project associated with the smart contract.</p> <p>Created On: The date and time the smart contract was created.</p> <p>Description: A brief description of the smart contract's purpose and functionality.</p> <p>The above details can be fetched from this section.</p> <p>As the user switches the tab, the next section will appear.</p> <p>Transaction</p> <p>This section displays the all transaction details for the smart contract.</p> <p>Figure 8: Transaction</p> <p>ID: Each transaction may be assigned a unique identifier for reference.</p> <p>Block ID: The ID of the blockchain block that contains the transaction, useful for locating it within the Kalp.</p> <p>TxHash (Transaction Hash): A unique alphanumeric string that identifies each transaction. It can be used to track and verify the transaction details on the Kalp.</p> <p>Created On: The date and time when the transaction was recorded on the blockchain.</p> <p>Status: Shows the current state of the transaction, such as pending, success, or failed.</p> <p>These details help users track the transaction activities of a smart contract.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/4.%20How%20can%20I%20view%20the%20list%20of%20my%20Smart%20Contracts/#_1","title":"How can I view the list of my Smart Contracts ?","text":"<p>API Endpoint</p> <p></p> <p>The \"API Endpoint\" tab within a smart contract interface provides users with access to the web API endpoints associated with a specific smart contract.</p> <p></p> <p>Figure 9: API Endpoint</p> <p>\u200b</p> <ul> <li> <p>API Endpoint URL: The base URL for making API requests to interact with the smart contract.</p> </li> <li> <p>Smart Contract Address: The unique address of the smart contract on the blockchain.</p> </li> <li> <p>Environment: Specifies whether the smart contract is in a development, staging, or production environment.</p> </li> <li> <p>Network: The blockchain network where the smart contract is deployed.</p> </li> </ul> <p>The list of operations includes:</p> <ul> <li> <p>HTTP Method: The type of request (POST) used to interact with the API.</p> </li> <li> <p>Function: The action or function that the API endpoint will perform.</p> </li> <li> <p>Route: The specific path appended to the base URL to access a particular function or resource.</p> </li> <li> <p>Check Params: A feature to validate the parameters for the API request, ensuring they meet the required format or data type before sending the request.</p> </li> </ul> <p>This tab is essential for developers to test and ensure that their applications can communicate correctly with the smart contract through the API.</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/5.%20How%20can%20i%20check%20if%20my%20smart%20contract%20is%20deployed%20on%20kalp%20blockchain/","title":"How can I check if my smart contract is deployed on Kalp Blockchain?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Developed a groundbreaking smart contract and are eager to see it live on the Kalp Blockchain? You've come to the right place! This guide will be your trusty companion as you navigate the simple process of verifying your smart contract's deployment on the Kalp network.</p> <p>To check if your smart contract is deployed on the Kalp blockchain, you can follow the given steps.</p> <p>Deployment on Kalp Blockchain</p> <p>After you have successfully</p> <p>created a smart contract</p> <p>it is deployed on Kalp blockchain. This deployed Smart Contract can be viewed in Kalp Explorer.</p> <p>Kalp Explorer</p> <p>Kalp Explorer allows users to access live and historical data on transactions, blocks, fees, and other relevant information. This data can be crucial for developers building applications on the Kalp blockchain and for traders looking to analyze market trends. Traders and developers can explore wallet addresses and smart contract details through Kalp Explorer. This functionality enables users to gain insights into how funds are distributed and how smart contracts operate on the blockchain.</p> <p>Kalp Explorer appears to be a comprehensive and user-friendly platform that fulfills the needs of both developers and traders within the Kalp blockchain ecosystem. Its ability to provide real-time data, facilitate analysis, and support record-keeping makes it an essential tool in the world of decentralized finance (DeFi) and blockchain technology.</p> <p>Step 1:</p> <p>To view the deployed Smart Contract access Kalp Explorer by clicking Kalp Explorer.</p> <p>The following screen will be displayed.</p> <p></p> <p>Figure 1: Kalp Explorer</p> <p>Step 2:</p> <p>Click on Smart Contracts. You can see the deployed smart contracts details like name, transaction count, and version.</p> <p></p> <p>Figure 2: Kalp Explorer</p> <p>Hope this article helped you understand how to check the Smart contract deployed on the Kalp blockchain.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/6.%20What%20are%20my%20smart%20contract%20details%2C%20Transactions%2C%20and%20API%20Endpoints/","title":"What are my Smart Contract Details, Transactions, and API Endpoints?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Smart contracts might sound complex, but understanding their transactions and endpoints doesn't have to be intimidating. Ever wondered how to check a contract's details, explore its history, or interact with its functionalities? You've come to the right place!</p> <p>This guide will break down the world of smart contracts, making their transactions and endpoints clear and accessible. We'll take you on a journey to unlock the mysteries and empower you to confidently navigate this exciting realm.</p> <p>Step 1: Go to Dashboard or go to the smart contract section on the left menu. For details regarding a particular Smart Contract, you can click on the smart contract details and you'll get a screen where you can change tabs between details, Transactions, and API Endpoints of the Smart Contract.</p> <p>Figure 1: Tabs</p> <ol> <li>Smart Contract Details The \"Smart Contract Details\" provide specific information about a particular smart contract in a Kalp network.</li> </ol> <p>Figure 2: Smart Contract Details</p> <p>ID: A blank field where the unique identifier of the smart contract will be displayed.</p> <p>Environment: The stage of deployment, such as development, staging, and production.</p> <p>Network: Specifies on which net the smart contract is deployed i.e. testing.</p> <p>Project: The name or identifier of the project associated with the smart contract.</p> <p>Created On: The date and time the smart contract was created.</p> <p>Description: A brief description of the smart contract's purpose and functionality.</p> <p>This form is used to input or modify details about a smart contract.</p> <ol> <li>Transaction</li> </ol> <p>This section displays the transaction-related information for the smart contract.</p> <p>Figure 3: Transactions</p> <p>ID: Each transaction may be assigned a unique identifier for reference.</p> <p>Block ID: The ID of the blockchain block that contains the transaction, useful for locating it within the Kalp.</p> <p>TxHash (Transaction Hash): A unique alphanumeric string that identifies each transaction. It can be used to track and verify the transaction details on the Kalp.</p> <p>Created On: The date and time when the transaction was recorded on the blockchain.</p> <p>Status: Shows the current state of the transaction, such as pending, success, or failed.</p> <p>These details help users audit the activity of a smart contract, tracking its use and the movement of assets or data it manages.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/6.%20What%20are%20my%20smart%20contract%20details%2C%20Transactions%2C%20and%20API%20Endpoints/#_1","title":"What are my Smart Contract Details, Transactions, and API Endpoints?","text":"<p>3. API Endpoint</p> <p></p> <p>The \"API Endpoint\" tab within a smart contract interface provides developers with access to the web API endpoints associated with a specific smart contract.</p> <p></p> <p>Figure 4: API Endpoints</p> <ul> <li> <p>API Endpoint URL: The base URL for making API requests to interact with the smart contract.</p> </li> <li> <p>Smart Contract Address: The unique address of the smart contract on the blockchain.</p> </li> <li> <p>Environment: Specifies whether the smart contract is in a development, staging, and production environment.</p> </li> <li> <p>Network: The blockchain network where the smart contract is deployed i.e. Test Net.</p> </li> </ul> <p>The list of operations includes:</p> <ul> <li> <p>HTTP Method: The type of request ( POST) used to interact with the API.</p> </li> <li> <p>Function: The action or function that the API endpoint will perform.</p> </li> <li> <p>Route: The specific path appended to the base URL to access a particular function or resource.</p> </li> <li> <p>Check Params: A feature to validate the parameters for the API request, ensuring they meet the required format or data type before sending the request.</p> </li> </ul> <p>This tab is essential for developers to test and ensure that their applications can communicate correctly with the smart contract through the API. Hope this article helped with beginning your journey to navigate Smart Contract details along with Transactions and Endpoints.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/7.%20How%20do%20i%20deploy%20my%20smart%20contract/","title":"How do I deploy my Smart Contract with kalp template?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Crafting your Smart Contract with Kalp's template was just the first step. Now, it's time to bring it to life on the blockchain! This guide will be your trusty companion as you navigate the deployment process on Kalp Studio. Whether you're a seasoned developer or a curious newcomer, we'll break down the steps in a clear and user-friendly way. So, buckle up and get ready to witness your Smart Contract take flight!</p> <p>Let's explore Smart Contract deployment using Kalp Template on Kalp Studio together.</p> <p>Note: To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p> <p>Step 4: Create a Smart Contract</p> <p>Go to the Smart Contract Section and click on Create Smart Contract.</p> <p>i) Enter your Name and select the project under which you want to deploy the smart contract.</p> <p></p> <p>Figure 4: Contract details</p> <p>ii) Setup Environment</p> <p>The next, step is to select the environment, whether it is development, staging, or Production.</p> <p></p> <p>Figure 5: Setup Environment</p> <p>iii) Network Selection</p> <p></p> <p>Figure 6: Network selection</p> <p>iv) Extension File/ Template</p> <p></p> <p>Figure 7: Extension File/ Template</p> <p>To select a template, switch the tab from Upload Extension files to Kalp Template.</p> <p>Step 5: Select Kalp Template</p> <p>Kalp Studio offers you 3 smart contract templates that are ERC20, ERC721, and ERC1155. You can use the Kalp Template for your smart contract deployment. This template provides predefined code, or settings tailored for specific functionalities or use cases.</p> <p></p> <p>Figure 8: Kalp Template</p> <ul> <li>Select a template and click on download.</li> </ul> <p></p> <p>Figure 9: Template Selection</p> <ul> <li>View Downloaded File</li> </ul> <p></p> <p>Figure 10: Downloaded File</p> <p>Here, you can see that the smart contract is downloaded in zip format that contains multiple folders.</p> <ul> <li>Upload Downloaded Extension File</li> </ul> <p></p> <p>Figure 11: Upload Extension File</p> <ul> <li>Click on the Continue option.</li> </ul> <p></p> <p>Figure 12: Upload successfully</p> <p>Step 6: Review Details</p> <ul> <li>After successful upload you can review the information</li> </ul> <p></p> <p>Figure 13: Review details</p> <p>On this page three options will be given to you as follows:</p> <ul> <li> <p>Back: In case there is any error, you can simply go Back and edit information as required.</p> </li> <li> <p>Save Draft: You can use Save Draft option in case of any dilemma that later you want to change or update anything.</p> </li> <li> <p>Save &amp; Publish: Once everything is completely verified you can click on the final step Save &amp; Publish option to finally deploy your smart contract.</p> </li> </ul> <p>Step 7: Smart Contract generation</p> <p></p> <p>Figure 14: Smart Contract Generated Successfully</p> <p>As you can see your smart contract is generated successfully with the smart contract ID. Happy Generation!</p> <p>Hope this article helped you understand the homepage of the Kalp Studio platform.</p>"},{"location":"Getting%20started/3.%20Smart%20contract%20management/8.%20How%20can%20i%20perform%20transactions%20using%20API%20endpoints/","title":"How Can I Perform Transactions using API Endpoints?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Performing transactions using API endpoints involves interacting with an API by a service that supports transactional operations.</p> <p>Let's explore Transactions using API Endpoints on Kalp Studio together.</p> <p>Step 1:</p> <p>To view the deployed Smart Contract access any Smart contract details by clicking on it.</p> <p></p> <p>Figure 1: List of Smart Contracts</p> <p>Step 2:</p> <p>API Endpoint is displayed. Click on Check Params to get the parameters that can be copied to your Postman or any other API platform to generate the transaction records.</p> <p></p> <p>Figure 2: Check Params</p> <p>Step 3:</p> <p>Copy and paste the parameters to the  in the Postman or any other API platform that you are using. Generate and copy the AUTH Key in the request header as . <p>Note: If AUTH key is not generated, create the API AUTH key as it is required to complete the transaction.</p> <p></p> <p>Figure 3: Parameters</p> <p>Step 4:</p> <p>Now send the API request and wait for the response in Postman.</p> <p>Step 5:</p> <p>After a successful API response in Postman, all the successful transactions will be shown under the Transactions tab in the Smart Contract details section.</p> <p></p> <p>Figure 4: Transactions</p> <p>Hope this article helped you understand how to perform transactions using API Endpoints on the Kalp blockchain.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/1.%20How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/","title":"How can I add funds to my Kalp Wallet?","text":"<p>Hi Users! Welcome to the Kalp Studio Developer platform.</p> <p>Kalp Wallet has a facility to add funds to the wallet if there are insufficient funds. It allows users to deposit or add funds to their wallet addresses within the blockchain network. This feature is essential for users to store, manage, and transact funds securely.</p> <p>Let us see how to add funds to my Kalp Wallet.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/1.%20How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/#_1","title":"How can I add funds to my Kalp Wallet?","text":"<p>Kalp Wallet</p> <p>Kalp Wallet is used to showcase deployment, transactions, and to add fund history on Kalp Studio. To access Kalp Wallet, a user account must be KYCed.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/1.%20How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/#_2","title":"How can I add funds to my Kalp Wallet?","text":"<p>Add Funds</p> <p>Step 1:</p> <p>Navigate to the Dashboard of the Kalp Studio application. Click on the Kalp Wallet on the left panel bar. The wallet details are displayed. Click on Add Funds.</p> <p></p> <p>Figure 1: Add Funds</p> <p>Step 2:</p> <p>The Add Funds Amount screen is displayed. Enter the Amount to be added to the wallet. Click on Pay.</p> <p></p> <p>Figure 2: Add Funds Amount</p> <p>Complete payment through two options as displayed. You can complete your payment transaction here.</p> <p></p> <p>Figure 3: PayPal</p> <p>Now you have successfully added funds to the wallet.</p> <p></p> <p>Figure 4: Successfully Added Funds</p> <p>Hope this article helped with your Add Funds journey in the Kalp wallet of the Kalp Studio platform.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/2.%20How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/","title":"How can I view Fund balance and payment transactions?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Kalp Wallet has a facility to add funds to the wallet if there are insufficient funds. It allows users to deposit or add funds to their wallet addresses within the blockchain network. You can check the fund balance anytime and also check the payment transactions.</p> <p>Let us see how can I view the fund balance and payment transactions.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/2.%20How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/#_1","title":"How can I view Fund balance and payment transactions?","text":"<p>Kalp Wallet</p> <p>Kalp Wallet is used to showcase deployment, transactions, and to add fund history on Kalp Studio. To access Kalp Wallet, a user account must be KYCed.</p>"},{"location":"Getting%20started/4.%20Kalp%20Wallet%20Management/2.%20How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/#_2","title":"How can I view Fund balance and payment transactions?","text":"<p>View fund balance and payment transactions</p> <p>Step 1:</p> <p>Navigate to the Dashboard of the Kalp Studio application. Click on Kalp Wallet on the left panel bar. The wallet details are displayed.</p> <p></p> <p>Figure 1: Fund balance and Payment transactions</p> <p>Kalp Wallet Details</p> <p>Kalp ID: This shows the unique KALP ID of the particular transaction.</p> <p>Test Faucet Balance: This shows the Testnet balance available.</p> <p>Click on the Add Funds to add funds to the wallet</p> <p>Two tabs are displayed: The Deployment and Transaction History and Add Funds History</p> <p>Deployment and Transaction History</p> <p></p> <p>Figure 2: Deployment and Transaction History</p> <p>These are the following columns shown within the deployment and transaction history tab:</p> <ul> <li> <p>Transaction ID: This shows the unique transaction ID.</p> </li> <li> <p>Name: This shows the name of the Smart Contract.</p> </li> <li> <p>Type: The type of action on the blockchain can be categorized as either a deployment or a transaction.</p> <ul> <li> <p>Deployments involve creating and placing a smart contract on the blockchain.</p> </li> <li> <p>While transactions represent any subsequent interaction with the deployed contract, such as invoking its functions or transferring data.</p> </li> </ul> </li> <li> <p>Environment: This shows the deployment environment like development, staging, or production.</p> </li> <li> <p>Status: The transaction status is shown here as success, pending, or failure.</p> </li> <li> <p>Timestamp: The time and date of the transaction is shown.</p> </li> <li> <p>Fees: This shows the transaction/deployment fees.</p> </li> </ul> <p>Add Fund History</p> <p>In this section, the Add Funds transaction details are displayed.</p> <ul> <li> <p>Order ID: The unique order ID of the add fund transaction.</p> </li> <li> <p>Network: The network on which the add fund happened - Testnet</p> </li> <li> <p>Fees: This is the amount of funds added.</p> </li> <li> <p>Status: This shows the add fund status whether successful, pending, or failure.</p> </li> <li> <p>Timestamp: This shows the date and time of the add fund.</p> </li> </ul> <p>Note: 10 records per page are displayed.</p> <p>Paging</p> <p>You can paginate the Add Fund records using &lt; &gt; as given below.</p> <p></p> <p>Figure 3: Paging</p> <p>Hope this article helped you to view fund balance and payment transactions in the Kalp wallet of the Kalp Studio platform as a Developer.</p>"},{"location":"Getting%20started/5.%20Settings/1.%20How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/","title":"How can I view/edit my profile through settings?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Ever wondered how to tweak your profile? Want to make it shine brighter than a diamond (virtually, of course)? You've come to the right place! This guide will walk you through the magical land of settings, showing you exactly how to view and edit your profile like a seasoned pro.</p> <p>Your profile in settings refers to the section where you can manage your account information, preferences, and security settings.</p> <p>You can view/edit your profile any time you want by following simple steps.</p>"},{"location":"Getting%20started/5.%20Settings/1.%20How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/#_1","title":"How can I view/edit my profile through settings?","text":"<p>View Profile</p> <p>Step 1:</p> <p>To view your profile information, click on the \u201cProfile icon\u201d at the top of the screen.</p> <p>A pop-up box appears with the following options:</p> <ul> <li> <p>Your Profile</p> </li> <li> <p>KALP Testnet ID</p> </li> <li> <p>Log Out</p> </li> </ul> <p>Step 2:</p> <p>Click on Your Profile.</p> <p></p> <p>Figure 1: Your Profile</p> <p>Step 3:</p> <p>The Settings window is displayed with two tabs. Personal and API Auth Key.</p> <p></p> <p>Figure 2: Settings</p> <p>Personal Tab</p> <p>Step 4:</p> <p>The Personal tab shows your profile details, security (password details), KALP ID, and KYC status.</p> <p></p> <p>Figure 3: Your Profile</p> <p>The following details are displayed:</p> <ul> <li> <p>Name: Name of the user.</p> </li> <li> <p>User ID: Unique user ID of the user.</p> </li> <li> <p>Email: The email id of the user.</p> </li> <li> <p>Security: Password details of the user.</p> </li> <li> <p>KALP Testnet ID: KALP ID generated in Kalp blockchain.</p> </li> <li> <p>KYC Status: The KYC Status whether Verified, Pending, or Failed.</p> </li> </ul> <p>Step 5: Change Password</p> <p>Click on Change Password to change the current password and enter a new password.</p> <p></p> <p>Figure 4: Change Password</p> <ol> <li> <p>Enter your Old Password.</p> </li> <li> <p>Enter New Password.</p> </li> </ol> <ul> <li>Length: Your password needs to be a minimum of 8 characters but no more than 20. This range ensures security while being user-friendly. </li> </ul> <p>Character Variety:</p> <ul> <li> <p>Uppercase Letter: At least one capital letter for added password strength.</p> </li> <li> <p>Lowercase Letter: At least one small letter to ensure complexity.</p> </li> <li> <p>Special Character: Include at least one character like !, @, $, #, or % for enhanced security.</p> </li> <li> <p>Number: At least one numeral is required for an additional layer of complexity. </p> </li> </ul> <ol> <li>Confirm Password.</li> </ol> <p>Matching Requirement: You need to re-enter your password to confirm it. This step is crucial to prevent typing errors in your password.</p> <p>Click on Save to save the entered password details.</p>"},{"location":"Getting%20started/5.%20Settings/1.%20How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/#_2","title":"How can I view/edit my profile through settings?","text":"<p>Edit Profile</p> <p>Step 6:</p> <p>On the Personal tab, click on Edit to modify profile details.</p> <p></p> <p>Figure 5: Edit</p> <p>You can modify the Name. Email and User ID cannot be changed. Click on Save to save the entered details.</p> <p>API Auth Key Tab</p> <p>Step 7:</p> <p>Click on the API Auth Key tab. Details of previously generated API Auth Key are displayed. This includes fields like Key Name, Last Used, Status, API Auth Key, and Date Created.</p> <p>Note: 10 records per page are displayed.</p> <p></p> <p>Figure 6: API Auth Key</p> <p>Click on Create API Auth Key to create a new API Auth Key.</p> <p></p> <p>Figure 7: Create Key</p> <ol> <li> <p>Enter the Key Name.</p> </li> <li> <p>Enter Key Description. Key Description is optional.</p> </li> <li> <p>Click on Create API Auth Key. A new API Auth Key is generated.</p> </li> </ol> <p>Hope this article helped you with understanding how to view/edit your profile on the Kalp Studio platform.</p>"},{"location":"Getting%20started/5.%20Settings/2.%20How%20can%20i%20create%20an%20API%20Auth%20key/","title":"How can I create an API Auth Key?","text":"<p>Hey User! Welcome to Kalp Studio User Articles.</p> <p>Keeping your data and transactions secure is a top priority. That's why Kalp Studio offers API Auth keys, an extra layer of protection for your interactions with our platform.</p> <p>This article will guide you through the simple process of creating an API Auth key and explain how it benefits you.</p> <p>Let's explore the creation of the API Auth Key on Kalp Studio together.</p> <p>Step 1: Navigate to Settings</p> <p>Log in to your Kalp Studio account and locate the Settings option in the dropdown menu.</p> <p></p> <p>Figure 1: Settings Page</p> <p>Step 2: Explore the Settings option.</p> <ul> <li>Personal Details</li> </ul> <p>Within the Settings menu, you'll find a section labeled \"Personal Details.\" Click on or navigate to this section to view and manage your personal information.</p> <p></p> <p>Figure 2: Personal Tab</p> <p>In the Personal Details section, you will see various fields such as:</p> <ul> <li> <p>Name: Name of the user</p> </li> <li> <p>User ID: Dedicated ID of the user</p> </li> <li> <p>Email ID: Registered email address</p> </li> <li> <p>Password: The user will have the change password option</p> </li> <li> <p>KALP ID: Kalp Test net ID of the user</p> </li> <li> <p>KYC status: Status of the user, whether the KYC is verified or not.</p> </li> </ul> <p>API Auth Key</p> <p>Within the Settings menu, locate and click on the \"API Auth Key\" section. This is where you can manage your API authentication keys.</p> <p></p> <p>Figure 3: API Auth Key Tab</p> <p>In the API Auth Key section, you will see details for each API authentication key you have created, including:</p> <ul> <li> <p>Key Name: Assigned key name given by user</p> </li> <li> <p>Last Used: Last updated date &amp; time</p> </li> <li> <p>Status: Icon to enable and disable the key</p> </li> <li> <p>API Auth Key: API authentication key</p> </li> <li> <p>Date Created: Creation and activation date</p> </li> </ul> <p>Manage API key: You can perform various actions on your API authentication keys, such as enabling or disabling them, editing their settings, or creating API Auth keys.</p> <p>Step 3: Create Auth Key</p> <p>Click on the Create API Auth Key option.</p> <p></p> <p>Figure 4: Create API Auth Key Button</p> <p>In order to Create a Key, you must enter a key name and description.</p> <p></p> <p>Figure 5: Create Key</p> <p>Once you've entered the key name and description, locate the Create API Auth Key button. Click on this button to initiate the key creation process.</p> <p>If you're sure that you want to create the API authentication key, click on the Create API Auth Key to proceed. Alternatively, if you've changed your mind or made a mistake, you can click Cancel to abort the key creation process.</p> <p></p> <p>Figure 6: API Auth Key Generated</p> <p>After confirmation, the platform will generate a new API authentication key using the provided name and description. This key will be displayed on the screen along with its status and creation date.</p> <p></p> <p>Figure 6: API Auth Key Details</p> <p>By following these steps, you should be able to create an API authentication key in the Kalp Studio platform efficiently and securely. If you encounter any issues or have further questions, refer to the platform's documentation or support resources for assistance.</p> <p>Hope this article helped you understand the homepage of the Kalp Studio platform.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/","title":"How can I add funds to my Kalp Wallet?","text":"<p>Hi Users! Welcome to the Kalp Studio Developer platform.</p> <p>Kalp Wallet has a facility to add funds to the wallet if there are insufficient funds. It allows users to deposit or add funds to their wallet addresses within the blockchain network. This feature is essential for users to store, manage, and transact funds securely.</p> <p>Let us see how to add funds to my Kalp Wallet.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/#_1","title":"How can i add funds to my kalp wallet","text":"<p>Kalp Wallet</p> <p>Kalp Wallet is used to showcase deployment, transactions, and to add fund history on Kalp Studio. To access Kalp Wallet, a user account must be KYCed.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20add%20funds%20to%20my%20kalp%20wallet/#_2","title":"How can i add funds to my kalp wallet","text":"<p>Add Funds</p> <p>Step 1:</p> <p>Navigate to the Dashboard of the Kalp Studio application. Click on the Kalp Wallet on the left panel bar. The wallet details are displayed. Click on Add Funds.</p> <p></p> <p>Figure 1: Add Funds</p> <p>Step 2:</p> <p>The Add Funds Amount screen is displayed. Enter the Amount to be added to the wallet. Click on Pay.</p> <p></p> <p>Figure 2: Add Funds Amount</p> <p>Complete payment through two options as displayed. You can complete your payment transaction here.</p> <p></p> <p>Figure 3: PayPal</p> <p>Now you have successfully added funds to the wallet.</p> <p></p> <p>Figure 4: Successfully Added Funds</p> <p>Hope this article helped with your Add Funds journey in the Kalp wallet of the Kalp Studio platform.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/","title":"How can I view Fund balance and payment transactions?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Kalp Wallet has a facility to add funds to the wallet if there are insufficient funds. It allows users to deposit or add funds to their wallet addresses within the blockchain network. You can check the fund balance anytime and also check the payment transactions.</p> <p>Let us see how can I view the fund balance and payment transactions.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/#_1","title":"How can i view fund balance and payment transactions","text":"<p>Kalp Wallet</p> <p>Kalp Wallet is used to showcase deployment, transactions, and to add fund history on Kalp Studio. To access Kalp Wallet, a user account must be KYCed.</p>"},{"location":"Getting%20started/Kalp%20Wallet%20Management/How%20can%20i%20view%20fund%20balance%20and%20payment%20transactions/#_2","title":"How can i view fund balance and payment transactions","text":"<p>View fund balance and payment transactions</p> <p>Step 1:</p> <p>Navigate to the Dashboard of the Kalp Studio application. Click on Kalp Wallet on the left panel bar. The wallet details are displayed.</p> <p></p> <p>Figure 1: Fund balance and Payment transactions</p> <p>Kalp Wallet Details</p> <p>Kalp ID: This shows the unique KALP ID of the particular transaction.</p> <p>Test Faucet Balance: This shows the Testnet balance available.</p> <p>Click on the Add Funds to add funds to the wallet</p> <p>Two tabs are displayed: The Deployment and Transaction History and Add Funds History</p> <p>Deployment and Transaction History</p> <p></p> <p>Figure 2: Deployment and Transaction History</p> <p>These are the following columns shown within the deployment and transaction history tab:</p> <ul> <li> <p>Transaction ID: This shows the unique transaction ID.</p> </li> <li> <p>Name: This shows the name of the Smart Contract.</p> </li> <li> <p>Type: The type of action on the blockchain can be categorized as either a deployment or a transaction.</p> <ul> <li> <p>Deployments involve creating and placing a smart contract on the blockchain.</p> </li> <li> <p>While transactions represent any subsequent interaction with the deployed contract, such as invoking its functions or transferring data.</p> </li> </ul> </li> <li> <p>Environment: This shows the deployment environment like development, staging, or production.</p> </li> <li> <p>Status: The transaction status is shown here as success, pending, or failure.</p> </li> <li> <p>Timestamp: The time and date of the transaction is shown.</p> </li> <li> <p>Fees: This shows the transaction/deployment fees.</p> </li> </ul> <p>Add Fund History</p> <p>In this section, the Add Funds transaction details are displayed.</p> <ul> <li> <p>Order ID: The unique order ID of the add fund transaction.</p> </li> <li> <p>Network: The network on which the add fund happened - Testnet</p> </li> <li> <p>Fees: This is the amount of funds added.</p> </li> <li> <p>Status: This shows the add fund status whether successful, pending, or failure.</p> </li> <li> <p>Timestamp: This shows the date and time of the add fund.</p> </li> </ul> <p>Note</p> <p>10 records per page are displayed._</p> <p>Paging</p> <p>You can paginate the Add Fund records using &lt; &gt; as given below.</p> <p></p> <p>Figure 3: Paging</p> <p>Hope this article helped you to view fund balance and payment transactions in the Kalp wallet of the Kalp Studio platform as a Developer.</p>"},{"location":"Getting%20started/Project%20management/Creating%20a%20kalp%20studio%20project/","title":"Creating a Kalp Studio project","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Feeling overwhelmed by multiple smart contracts for a single project? Worry not! Creating a well-organized project folder is your key to conquering complexity. This folder will neatly encapsulate all your smart contracts, and essential project details, keeping you focused and in control throughout the development process.</p> <p>So, let's dive in and explore how to effortlessly set up your project folder and say goodbye to scattered files and chaotic workflows!</p>"},{"location":"Getting%20started/Project%20management/Creating%20a%20kalp%20studio%20project/#_1","title":"Creating a kalp studio project","text":"<p>Create My Project</p> <p>The Create Project process is essential to experience and explore the diverse functionalities of Kalp Studio. Users need to name, categorize, and describe their projects to work with them in the future.</p> <p>Step 1:</p> <p>Click app.kalp.studio to redirect to the Kalp Studio application page. After a successful login, you will reach the Dashboard.</p> <p></p> <p>Figure 1: Dashboard</p> <p>Step 2:</p> <p>Click on Projects on the left pane bar. You can create a new Project by clicking on Create Project.</p> <p></p> <p>Figure 2: Create Project</p> <p>Step 3: Create Project</p> <p>Click on Create Project. Create New Project is displayed.</p> <p></p> <p>Figure 3: Create a New Project</p> <ol> <li>Enter the Project Name in the input box.</li> </ol> <p>Criteria to enter your Project Name field:</p> <ul> <li> <p>It must have only one space between two words.</p> </li> <li> <p>It must be alpha-numeric.</p> </li> <li> <p>It must not be a repeated name.</p> </li> <li> <p>It must be at least 1 characters.</p> </li> <li> <p>It must not exceed 25 characters. </p> </li> </ul> <ol> <li>Select Category. You can select any of the following categories:</li> </ol> <p>These are the following categories for a project:</p> <ul> <li> <p>Art</p> </li> <li> <p>Photography</p> </li> <li> <p>Literature</p> </li> <li> <p>Design</p> </li> <li> <p>Legal</p> </li> <li> <p>Technical</p> </li> <li> <p>Architecture</p> </li> <li> <p>Movies</p> </li> <li> <p>Music</p> </li> <li> <p>NFT</p> </li> <li> <p>Enter Description. It is optional for the user(s) to put a description of their project.</p> </li> <li> <p>Click on Create Project Now to successfully create a project.</p> </li> </ul> <p></p> <p>Figure 4: Project created successfully</p> <p>Step 3: View Project</p> <p>Click on the project module from the left menu bar  to view the newly created project.</p> <p></p> <p>Figure 5: Project</p> <p></p> <p>Figure 6: Project Details</p> <p>The Project details are editable.</p> <p>Hope this article helped you to create a project in the Kalp Studio platform.</p>"},{"location":"Getting%20started/Project%20management/How%20do%20view%20%26%20edit%20my%20projects/","title":"How do I view/edit my projects?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Project created? Awesome! Now, let's explore the exciting world of managing your masterpiece. This article unravels the mysteries of viewing and editing projects on Kalp Studio. Whether you're a seasoned code warrior or a budding blockchain explorer, we'll equip you with the knowledge to navigate your projects with ease. Dive in and discover how to access, tweak, and master your creations on Kalp Studio!</p>"},{"location":"Getting%20started/Project%20management/How%20do%20view%20%26%20edit%20my%20projects/#_1","title":"How do view & edit my projects","text":"<p>View List of Projects</p> <p>The View List of Projects provides a list of all projects that have been created so far. It includes details like Project ID, Project Name, Category, etc.</p> <p>Step 1:</p> <p>After you have successfully created a project, click on View Project to view the list of projects. You can also reach the list of projects from the Dashboard-Projects option.</p> <p></p> <p>Figure 1: View Project</p> <p>Step 2: List of Projects</p> <p>The following fields are displayed here:</p> <ul> <li> <p>Project ID: A unique project ID.</p> </li> <li> <p>Project Name: Name of the project.</p> </li> <li> <p>Category: Category to which the project belongs like NFT, Photography, Art, etc.</p> </li> <li> <p>Created On: Date on which the project is created.</p> </li> </ul> <p>Note</p> <p>10 records per page are displayed._</p> <p></p> <p>Figure 2: List of Projects</p> <p>Step 3: Filters</p> <p>You can organize projects based on Category and Date filters.</p> <p></p> <p>Figure 5: Category</p> <p></p> <p>Figure 6: Date</p> <p>On applying appropriate filters the specific search results are available.</p> <p>Click on Clear Filters to reset the applied filters.</p> <p>You can also arrange Project Name, Category, and Created on fields in both alphabetical and ascending, descending orders.</p> <p></p> <p>Figure 7: List of Projects</p>"},{"location":"Getting%20started/Project%20management/How%20do%20view%20%26%20edit%20my%20projects/#_2","title":"How do view & edit my projects","text":"<p>Edit Project</p> <p>Step 4: View Project Details</p> <p>As you click on the particular project, a pop-up will appear containing the details of the project.</p> <p></p> <p>Figure 8: Edit Project</p> <ol> <li>Click on the either pencil icon or edit option present on the pop-up to edit project details.</li> </ol> <p></p> <p>Figure 3: Edit icon</p> <ol> <li>Edit Project screen is displayed.</li> </ol> <p></p> <p>Figure 4: Edit Project</p> <p>You can edit the Project Name, Category, and Description. Click on Save Changes to save the modified details.</p> <p>Hope this article helped you to view/edit a project in the Kalp Studio platform.</p>"},{"location":"Getting%20started/Settings/How%20can%20i%20create%20an%20API%20Auth%20key/","title":"How can I create an API Auth Key?","text":"<p>Hey User! Welcome to Kalp Studio User Articles.</p> <p>Keeping your data and transactions secure is a top priority. That's why Kalp Studio offers API Auth keys, an extra layer of protection for your interactions with our platform.</p> <p>This article will guide you through the simple process of creating an API Auth key and explain how it benefits you.</p> <p>Let's explore the creation of the API Auth Key on Kalp Studio together.</p> <p>Step 1: Navigate to Settings</p> <p>Log in to your Kalp Studio account and locate the Settings option in the dropdown menu.</p> <p></p> <p>Figure 1: Settings Page</p> <p>Step 2: Explore the Settings option.</p> <ul> <li>Personal Details</li> </ul> <p>Within the Settings menu, you'll find a section labeled \"Personal Details.\" Click on or navigate to this section to view and manage your personal information.</p> <p></p> <p>Figure 2: Personal Tab</p> <p>In the Personal Details section, you will see various fields such as:</p> <ul> <li> <p>Name: Name of the user</p> </li> <li> <p>User ID: Dedicated ID of the user</p> </li> <li> <p>Email ID: Registered email address</p> </li> <li> <p>Password: The user will have the change password option</p> </li> <li> <p>KALP ID: Kalp Test net ID of the user</p> </li> <li> <p>KYC status: Status of the user, whether the KYC is verified or not.</p> </li> </ul> <p>API Auth Key</p> <p>Within the Settings menu, locate and click on the \"API Auth Key\" section. This is where you can manage your API authentication keys.</p> <p></p> <p>Figure 3: API Auth Key Tab</p> <p>In the API Auth Key section, you will see details for each API authentication key you have created, including:</p> <ul> <li> <p>Key Name: Assigned key name given by user</p> </li> <li> <p>Last Used: Last updated date &amp; time</p> </li> <li> <p>Status: Icon to enable and disable the key</p> </li> <li> <p>API Auth Key: API authentication key</p> </li> <li> <p>Date Created: Creation and activation date</p> </li> </ul> <p>Manage API key: You can perform various actions on your API authentication keys, such as enabling or disabling them, editing their settings, or creating API Auth keys.</p> <p>Step 3: Create Auth Key</p> <p>Click on the Create API Auth Key option.</p> <p></p> <p>Figure 4: Create API Auth Key Button</p> <p>In order to Create a Key, you must enter a key name and description.</p> <p></p> <p>Figure 5: Create Key</p> <p>Once you've entered the key name and description, locate the Create API Auth Key button. Click on this button to initiate the key creation process.</p> <p>If you're sure that you want to create the API authentication key, click on the Create API Auth Key to proceed. Alternatively, if you've changed your mind or made a mistake, you can click Cancel to abort the key creation process.</p> <p></p> <p>Figure 6: API Auth Key Generated</p> <p>After confirmation, the platform will generate a new API authentication key using the provided name and description. This key will be displayed on the screen along with its status and creation date.</p> <p></p> <p>Figure 6: API Auth Key Details</p> <p>By following these steps, you should be able to create an API authentication key in the Kalp Studio platform efficiently and securely. If you encounter any issues or have further questions, refer to the platform's documentation or support resources for assistance.</p> <p>Hope this article helped you understand the homepage of the Kalp Studio platform.</p>"},{"location":"Getting%20started/Settings/How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/","title":"How can I view/edit my profile through settings?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Ever wondered how to tweak your profile? Want to make it shine brighter than a diamond (virtually, of course)? You've come to the right place! This guide will walk you through the magical land of settings, showing you exactly how to view and edit your profile like a seasoned pro.</p> <p>Your profile in settings refers to the section where you can manage your account information, preferences, and security settings.</p> <p>You can view/edit your profile any time you want by following simple steps.</p>"},{"location":"Getting%20started/Settings/How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/#_1","title":"How can i view and edit my profile through settings","text":"<p>View Profile</p> <p>Step 1:</p> <p>To view your profile information, click on the \u201cProfile icon\u201d at the top of the screen.</p> <p>A pop-up box appears with the following options:</p> <ul> <li> <p>Your Profile</p> </li> <li> <p>KALP Testnet ID</p> </li> <li> <p>Log Out</p> </li> </ul> <p>Step 2:</p> <p>Click on Your Profile.</p> <p></p> <p>Figure 1: Your Profile</p> <p>Step 3:</p> <p>The Settings window is displayed with two tabs. Personal and API Auth Key.</p> <p></p> <p>Figure 2: Settings</p> <p>Personal Tab</p> <p>Step 4:</p> <p>The Personal tab shows your profile details, security (password details), KALP ID, and KYC status.</p> <p></p> <p>Figure 3: Your Profile</p> <p>The following details are displayed:</p> <ul> <li> <p>Name: Name of the user.</p> </li> <li> <p>User ID: Unique user ID of the user.</p> </li> <li> <p>Email: The email id of the user.</p> </li> <li> <p>Security: Password details of the user.</p> </li> <li> <p>KALP Testnet ID: KALP ID generated in Kalp blockchain.</p> </li> <li> <p>KYC Status: The KYC Status whether Verified, Pending, or Failed.</p> </li> </ul> <p>Step 5: Change Password</p> <p>Click on Change Password to change the current password and enter a new password.</p> <p></p> <p>Figure 4: Change Password</p> <ol> <li> <p>Enter your Old Password.</p> </li> <li> <p>Enter New Password.</p> </li> </ol> <ul> <li>Length: Your password needs to be a minimum of 8 characters but no more than 20. This range ensures security while being user-friendly. </li> </ul> <p>Character Variety:</p> <ul> <li> <p>Uppercase Letter: At least one capital letter for added password strength.</p> </li> <li> <p>Lowercase Letter: At least one small letter to ensure complexity.</p> </li> <li> <p>Special Character: Include at least one character like !, @, $, #, or % for enhanced security.</p> </li> <li> <p>Number: At least one numeral is required for an additional layer of complexity. </p> </li> </ul> <ol> <li>Confirm Password.</li> </ol> <p>Matching Requirement: You need to re-enter your password to confirm it. This step is crucial to prevent typing errors in your password.</p> <p>Click on Save to save the entered password details.</p>"},{"location":"Getting%20started/Settings/How%20can%20i%20view%20and%20edit%20my%20profile%20through%20settings/#_2","title":"How can i view and edit my profile through settings","text":"<p>Edit Profile</p> <p>Step 6:</p> <p>On the Personal tab, click on Edit to modify profile details.</p> <p></p> <p>Figure 5: Edit</p> <p>You can modify the Name. Email and User ID cannot be changed. Click on Save to save the entered details.</p> <p>API Auth Key Tab</p> <p>Step 7:</p> <p>Click on the API Auth Key tab. Details of previously generated API Auth Key are displayed. This includes fields like Key Name, Last Used, Status, API Auth Key, and Date Created.</p> <p>Note</p> <p>10 records per page are displayed._</p> <p></p> <p>Figure 6: API Auth Key</p> <p>Click on Create API Auth Key to create a new API Auth Key.</p> <p></p> <p>Figure 7: Create Key</p> <ol> <li> <p>Enter the Key Name.</p> </li> <li> <p>Enter Key Description. Key Description is optional.</p> </li> <li> <p>Click on Create API Auth Key. A new API Auth Key is generated.</p> </li> </ol> <p>Hope this article helped you with understanding how to view/edit your profile on the Kalp Studio platform.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20I%20view%20the%20list%20of%20my%20Smart%20Contracts/","title":"How can I view the list of my Smart Contracts ?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Keeping track of your smart contracts can feel overwhelming, but it doesn't have to be. Kalp Studio is here to simplify your experience, offering a streamlined and efficient way to view and manage all your smart contracts in one place.</p> <p>Smart contracts are automated contracts coded on a blockchain, facilitating secure, transparent, and decentralized transactions without intermediaries. They execute or enforce contract terms when certain conditions are met.</p> <p>Let's dive into how you can view your list of smart contracts on Kalp Studio.</p> <ol> <li>Smart Contract</li> </ol> <p>Figure 1: Dashboard</p> <p>Go to the smart contract section on the left menu.</p> <p>Once there, you'll see a list of smart contracts. Each entry in this list is composed of several components:</p> <p>Figure 2: Smart Contract List</p> <p>ID: A unique identifier for the smart contract.</p> <p>Name: The name given to the smart contract.</p> <p>Project: The project or initiative the smart contract is part of.</p> <p>Environment: The development or deployment environment of the smart contract</p> <p>Status: The current state of the smart contract (e.g., Success, In Review, Pending or Failed).</p> <p>Network: The blockchain network on which the smart contract operates, i.e. Testnet.</p> <p>Created on: The date when the smart contract was created.</p> <ol> <li>Tools &amp; Filters</li> </ol> <p>Figure 3: Tools &amp; Filters</p> <p>Select Network: This dropdown allows you to filter the list of smart contracts by the blockchain network they operate on. The network can be a test network.</p> <p>Select Status: This dropdown lets you filter the smart contracts based on their current status. Options might include Success, In Review, Pending, or Failed helping you to find contracts that match your criteria for operational status.</p> <p>Date: This filter allows you to select smart contracts based on their creation date or any significant date markers relevant to the contract's lifecycle. You can often choose from a date range picker to view contracts created.</p> <p>Additional Scenarios (When the user clicks on the edit button) When you click the edit icon in the Smart Contract Details, you'll be able to edit the following fields:</p> <p>Figure 4: Edit Icon</p> <p>A user will only be able to use the edit icon when the smart contract is saved in drafts.</p> <ol> <li> <p>On selecting the edit icon against any contract, the all details present in the drafts can be changed.</p> </li> <li> <p>If the status is set to success, pending or in review, the user can change only the name and description.</p> </li> </ol> <p>Smart Contract Name: Allows you to update the name of the smart contract.</p> <p>Project Name: Enables you to change the project or initiative the smart contract is associated with.</p> <p>Network: It lets you select or change the blockchain network on which the smart contract operates i.e. test network</p> <p>Environment: You can update the environment setting of the smart contract Development, Staging, and Production.</p> <p>Description: Provides a text area where you can edit or add a detailed description of the smart contract\u2019s purpose and functionality.</p> <p>Figure5: Edit Smart Contract</p> <p>When you select a deployed smart contract (with a success status) from the list, you'll be presented with the Smart Contract Details section where you can gain details on your selected Smart Contract.</p> <ol> <li>Gain Details</li> </ol> <p>For more details regarding a particular Smart Contract, you can click on the smart contract details and you'll get a screen where you can change tabs between details, Transactions, and API Endpoints of the Smart Contract.</p> <p>Figure 6: Smart Contract Details</p> <p>Smart Contract Details The \"Smart Contract Details\" provide specific information about a particular smart contract in a Kalp network.</p> <p>Figure 7: Smart Contract Details</p> <p>ID: A blank field where the unique identifier of the smart contract will be displayed.</p> <p>Environment: The stage of deployment, such as development, staging, or production.</p> <p>Network: Specifies on which net the smart contract is deployed i.e. testnet.</p> <p>Project: The name or identifier of the project associated with the smart contract.</p> <p>Created On: The date and time the smart contract was created.</p> <p>Description: A brief description of the smart contract's purpose and functionality.</p> <p>The above details can be fetched from this section.</p> <p>As the user switches the tab, the next section will appear.</p> <p>Transaction</p> <p>This section displays the all transaction details for the smart contract.</p> <p>Figure 8: Transaction</p> <p>ID: Each transaction may be assigned a unique identifier for reference.</p> <p>Block ID: The ID of the blockchain block that contains the transaction, useful for locating it within the Kalp.</p> <p>TxHash (Transaction Hash): A unique alphanumeric string that identifies each transaction. It can be used to track and verify the transaction details on the Kalp.</p> <p>Created On: The date and time when the transaction was recorded on the blockchain.</p> <p>Status: Shows the current state of the transaction, such as pending, success, or failed.</p> <p>These details help users track the transaction activities of a smart contract.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20I%20view%20the%20list%20of%20my%20Smart%20Contracts/#_1","title":"How can I view the list of my Smart Contracts","text":"<p>API Endpoint</p> <p></p> <p>The \"API Endpoint\" tab within a smart contract interface provides users with access to the web API endpoints associated with a specific smart contract.</p> <p></p> <p>Figure 9: API Endpoint</p> <p>\u200b</p> <ul> <li> <p>API Endpoint URL: The base URL for making API requests to interact with the smart contract.</p> </li> <li> <p>Smart Contract Address: The unique address of the smart contract on the blockchain.</p> </li> <li> <p>Environment: Specifies whether the smart contract is in a development, staging, or production environment.</p> </li> <li> <p>Network: The blockchain network where the smart contract is deployed.</p> </li> </ul> <p>The list of operations includes:</p> <ul> <li> <p>HTTP Method: The type of request (POST) used to interact with the API.</p> </li> <li> <p>Function: The action or function that the API endpoint will perform.</p> </li> <li> <p>Route: The specific path appended to the base URL to access a particular function or resource.</p> </li> <li> <p>Check Params: A feature to validate the parameters for the API request, ensuring they meet the required format or data type before sending the request.</p> </li> </ul> <p>This tab is essential for developers to test and ensure that their applications can communicate correctly with the smart contract through the API.</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20check%20if%20my%20smart%20contract%20is%20deployed%20on%20kalp%20blockchain/","title":"How can I check if my smart contract is deployed on Kalp Blockchain?","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>Developed a groundbreaking smart contract and are eager to see it live on the Kalp Blockchain? You've come to the right place! This guide will be your trusty companion as you navigate the simple process of verifying your smart contract's deployment on the Kalp network.</p> <p>To check if your smart contract is deployed on the Kalp blockchain, you can follow the given steps.</p> <p>Deployment on Kalp Blockchain</p> <p>After you have successfully</p> <p>created a smart contract</p> <p>it is deployed on Kalp blockchain. This deployed Smart Contract can be viewed in Kalp Explorer.</p> <p>Kalp Explorer</p> <p>Kalp Explorer allows users to access live and historical data on transactions, blocks, fees, and other relevant information. This data can be crucial for developers building applications on the Kalp blockchain and for traders looking to analyze market trends. Traders and developers can explore wallet addresses and smart contract details through Kalp Explorer. This functionality enables users to gain insights into how funds are distributed and how smart contracts operate on the blockchain.</p> <p>Kalp Explorer appears to be a comprehensive and user-friendly platform that fulfills the needs of both developers and traders within the Kalp blockchain ecosystem. Its ability to provide real-time data, facilitate analysis, and support record-keeping makes it an essential tool in the world of decentralized finance (DeFi) and blockchain technology.</p> <p>Step 1:</p> <p>To view the deployed Smart Contract access Kalp Explorer by clicking Kalp Explorer.</p> <p>The following screen will be displayed.</p> <p></p> <p>Figure 1: Kalp Explorer</p> <p>Step 2:</p> <p>Click on Smart Contracts. You can see the deployed smart contracts details like name, transaction count, and version.</p> <p></p> <p>Figure 2: Kalp Explorer</p> <p>Hope this article helped you understand how to check the Smart contract deployed on the Kalp blockchain.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20perform%20transactions%20using%20API%20endpoints/","title":"How Can I Perform Transactions using API Endpoints?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Performing transactions using API endpoints involves interacting with an API by a service that supports transactional operations.</p> <p>Let's explore Transactions using API Endpoints on Kalp Studio together.</p> <p>Step 1:</p> <p>To view the deployed Smart Contract access any Smart contract details by clicking on it.</p> <p></p> <p>Figure 1: List of Smart Contracts</p> <p>Step 2:</p> <p>API Endpoint is displayed. Click on Check Params to get the parameters that can be copied to your Postman or any other API platform to generate the transaction records.</p> <p></p> <p>Figure 2: Check Params</p> <p>Step 3:</p> <p>Copy and paste the parameters to the  in the Postman or any other API platform that you are using. Generate and copy the AUTH Key in the request header as . <p>Note</p> <p>If AUTH key is not generated, create the API AUTH key as it is required to complete the transaction._</p> <p></p> <p>Figure 3: Parameters</p> <p>Step 4:</p> <p>Now send the API request and wait for the response in Postman.</p> <p>Step 5:</p> <p>After a successful API response in Postman, all the successful transactions will be shown under the Transactions tab in the Smart Contract details section.</p> <p></p> <p>Figure 4: Transactions</p> <p>Hope this article helped you understand how to perform transactions using API Endpoints on the Kalp blockchain.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20test%20my%20smart%20contract/","title":"How can I test my Smart Contract?","text":"<p>This guide empowers you to leverage Kalp Studio for efficient smart contract deployment and streamlined testing. Discover how to seamlessly deploy your smart contracts and effectively test them.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20test%20my%20smart%20contract/#_1","title":"How can i test my smart contract","text":"<p>Smart Contract Verification and Testing</p> <p>Step 1: Verify your smart contract's syntax and functionality by compiling it using the following command:</p> <pre><code>$ go build .\n</code></pre> <p>Step 2: A successful compilation signifies that your code adheres to Go language syntax rules and is free of errors.</p> <p>Step 3: Proceed to test your smart contract to ensure its behavior aligns with your expectations. Utilize appropriate testing frameworks or unit tests to simulate interactions with your smart contract and verify its outputs. This step is crucial for identifying and rectifying any potential issues before deployment.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20test%20my%20smart%20contract/#_2","title":"How can i test my smart contract","text":"<p>Interacting with Your Smart Contract</p> <ol> <li> <p>Establish a connection to the relevant blockchain network, enabling your application to interact with the deployed smart contracts.</p> </li> <li> <p>Kalp Studio automatically generates API endpoints that directly map to the functionalities of your smart contracts. These endpoints simplify integration by providing a well-defined interface for your front-end application to interact with the underlying smart contract logic.</p> </li> </ol> <p></p> <p>Steps to Deploy and test the smart contract API endpoints:</p> <ul> <li>Deployment of Smart Contract through Kalp Studio: Utilize the generated API endpoints directly within your front-end application (e.g., React.js, Next.js). This approach seamlessly integrates smart contract functionalities into your user interface, enabling dynamic interactions and data retrieval.</li> </ul> <p>Check out the Freshdesk Article: How to deploy a Smart Contract? or How Can I Perform Transactions using API Endpoints?</p> <ul> <li>Checking and Testing API Endpoints: Employ Postman, a popular API testing tool, to send requests to the generated API endpoints. This method facilitates individual function testing, allowing you to verify their behavior and outputs in a controlled environment before integrating them into your front-end application.</li> </ul>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20test%20my%20smart%20contract/#_3","title":"How can i test my smart contract","text":"<p>Postman Testing for Kalp Smart Contract API Endpoints</p> <p>Following successful smart contract deployment and API endpoint generation within Kalp Studio, delve into the essential steps for testing these endpoints using Postman:</p> <ol> <li>Reading from the Smart Contract</li> </ol> <p>Kalp Studio enables efficient data retrieval from deployed smart contracts using read-only methods. These methods allow your application to query the blockchain ledger without modifying its state.</p> <p>Example: To retrieve a user's account balance, you would invoke the <code>ClientAccountBalance</code> function through the generated API endpoint. This function would fetch the relevant data from the ledger and return it to your application.</p> <p>By leveraging read-only methods, you can access crucial information from the blockchain without altering its state, ensuring data integrity and facilitating various application functionalities.</p> <p></p> <p>Sample Result: ClientAccountBalance Function</p> <ol> <li>Writing to the Smart Contract</li> </ol> <p>Kalp Studio empowers developers to perform write operations, which involve modifying the state of the blockchain ledger through smart contract interactions. These operations typically involve sending transactions to specific contract functions provided by the Kalp SDK.</p> <p>Example: To transfer tokens, you would utilize the appropriate function (e.g., <code>Transfer</code>) through the generated API endpoint. This function would initiate a transaction on the blockchain, deducting tokens from the sender's account and crediting them to the recipient's account.</p> <p></p> <p>Sample Result: MintBatch Function</p> <ol> <li>Transaction Management: With the Kalp SDK, developers can efficiently manage transactions on the blockchain network. It provides functions for submitting transactions, querying transaction information, and retrieving transaction history. This simplifies the process of interacting with the blockchain and ensures the integrity of transactional operations.</li> </ol> <p>Example: All the Functions provided as: <code>PutStateWithKYC, DelStateWithoutKYC, DelStateWithKYC, GetState, GetTxID, GetChannelD, SetEvent, GetUserID.</code></p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20can%20i%20test%20my%20smart%20contract/#_4","title":"How can i test my smart contract","text":"<p>Conclusion</p> <p>You're now ready to begin your journey as a Kalp blockchain developer. Experiment with different types of smart contracts, explore the functionalities offered by the Kalp SDK, and start building innovative DApps on the Kalp blockchain.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20deploy%20a%20smart%20contract/","title":"How do I deploy a Smart Contract?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Tired of complex coding and deployment hassles? Building a Smart Contract shouldn't feel like climbing Mount Everest. This guide is here to empower you with a clear and smooth path to creating your Smart Contract. We'll break down the process into easy-to-follow steps, ensuring you have the confidence and knowledge to bring your ideas to life on the blockchain.</p> <p>Smart contracts are digital agreements coded on a blockchain that automatically execute or enforce the terms of a contract when predefined conditions are met. They enable secure, transparent, and decentralized transactions without the need for intermediaries.</p> <p>So, let\u2019s begin with the Smart Contract creation on Kalp Studio.</p> <p>Note</p> <p>To deploy a Smart Contract, a project is needed. Let's understand how a project is created first.</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20deploy%20a%20smart%20contract/#_1","title":"How do i deploy a smart contract","text":"<p>Smart Contract Creation</p> <p>Step 1: Initiating Smart Contract Creation: For first-time users, the screen with no Smart Contract list will be displayed.</p> <p></p> <p>Figure 1: Initiate Smart Contract</p> <p>To create a Smart Contract you have to agree to Kalp Studio's Terms and Conditions.</p> <p></p> <p>Figure 2: Kalp Studio Terms and Conditions</p> <p>After you agree to the terms and conditions, you can start creating the Smart Contract. Click on Create Smart Contract.</p> <p></p> <p>Figure 3: Create Smart Contract</p> <p>Access the \"Smart Contract\" section via the left panel bar on Kalp Studio.</p> <p></p> <p>Figure 4: Contract Details</p> <p>Select the \"Create Smart Contract\" button. Alternatively, this can also be achieved through the \"Create Smart Contract\" option on the Dashboard.</p> <p>Step 2: Detailing the Smart Contract:</p> <p></p> <p>Figure 5: Smart Contract Details</p> <ul> <li> <p>Name: Assign a distinctive name to the Smart Contract.</p> </li> <li> <p>Project: Identify the overarching project or system the Smart Contract integrates with.</p> </li> <li> <p>Description: Offer a concise description outlining the contract's functionality.</p> </li> </ul> <p>Step 3: Environment Selection:</p> <p></p> <p>Figure 6: Setup Environment</p> <p>Opt for the appropriate environment for deployment: \"Development\", \"Staging\", or \"Production\".</p> <p>Step 4: Network Selection:</p> <p></p> <p>Figure 7: Network Selection</p> <p>Determine the deployment network - \"TestNet\".</p> <p>Step 5: Template Utilization and Submission:</p> <p></p> <p>Figure 8: Extension File/Template</p> <p>Kalp Studio provides ERC token templates. Select the relevant template for your needs.</p> <p></p> <p>Figure 9: Kalp Templates</p> <p>Download, complete, and upload the filled template to Kalp Studio for review and subsequent actions.</p> <p>Step 6: Final Review and Publication:</p> <p></p> <p>Figure 10: Review</p> <p>Save Draft</p> <p>If you want to pause the Smart Contract creation and would like to visit it later then Save Draft is a great option!</p> <p>In this option, all fields are editable and can be modified at a later point.</p> <p>Save &amp; Publish</p> <p>After you Save &amp; Publish the Smart Contract gets deployed on the Kalp blockchain. You can still edit the Smart Contract Name and Description. All other fields are non-editable.</p> <p>The published Smart Contract gets added to the list of Smart Contracts. If the user wants to make some changes in Smart Contract, Save Draft option can be used. The saved draft can be edited anytime by the user.</p> <p>List of Smart Contracts</p> <p>Adhering to these steps will ensure the professional and efficient creation of a Smart Contract on Kalp Studio, streamlining your project's development process. You can view the list of newly created Smart Contract after Save and Publish.</p> <p></p> <p>Figure 11: List of Smart Contacts</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20deploy%20my%20smart%20contract/","title":"How do I deploy my Smart Contract with kalp template?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Crafting your Smart Contract with Kalp's template was just the first step. Now, it's time to bring it to life on the blockchain! This guide will be your trusty companion as you navigate the deployment process on Kalp Studio. Whether you're a seasoned developer or a curious newcomer, we'll break down the steps in a clear and user-friendly way. So, buckle up and get ready to witness your Smart Contract take flight!</p> <p>Let's explore Smart Contract deployment using Kalp Template on Kalp Studio together.</p> <p>Note</p> <p>To deploy a Smart Contract, a project is needed. Let's understand how a project is created first._</p> <p>Step 1: Project Initialization</p> <p>Direct your attention to the 'Projects' segment within the Kalp Studio interface. This serves as the commencement point for smart contract creation and deployment.</p> <p></p> <p>Figure 1: List of Projects</p> <p>Step 2: Create a New Project</p> <p>In the absence of an existing project, initiate a new project by selecting the corresponding option. Enter the requisite details including project name, description, and any additional specifications to accurately define the project's scope.</p> <p></p> <p>Figure 2: Projects</p> <p>Step 3: Project Creation Successful</p> <p>Upon successful project setup, it will be cataloged within your Kalp Studio portfolio, signaling readiness for smart contract development.</p> <p></p> <p>Figure 3: Project Created</p> <p>Step 4: Create a Smart Contract</p> <p>Go to the Smart Contract Section and click on Create Smart Contract.</p> <p>i) Enter your Name and select the project under which you want to deploy the smart contract.</p> <p></p> <p>Figure 4: Contract details</p> <p>ii) Setup Environment</p> <p>The next, step is to select the environment, whether it is development, staging, or Production.</p> <p></p> <p>Figure 5: Setup Environment</p> <p>iii) Network Selection</p> <p></p> <p>Figure 6: Network selection</p> <p>iv) Extension File/ Template</p> <p></p> <p>Figure 7: Extension File/ Template</p> <p>To select a template, switch the tab from Upload Extension files to Kalp Template.</p> <p>Step 5: Select Kalp Template</p> <p>Kalp Studio offers you 3 smart contract templates that are ERC20, ERC721, and ERC1155. You can use the Kalp Template for your smart contract deployment. This template provides predefined code, or settings tailored for specific functionalities or use cases.</p> <p></p> <p>Figure 8: Kalp Template</p> <ul> <li>Select a template and click on download.</li> </ul> <p></p> <p>Figure 9: Template Selection</p> <ul> <li>View Downloaded File</li> </ul> <p></p> <p>Figure 10: Downloaded File</p> <p>Here, you can see that the smart contract is downloaded in zip format that contains multiple folders.</p> <ul> <li>Upload Downloaded Extension File</li> </ul> <p></p> <p>Figure 11: Upload Extension File</p> <ul> <li>Click on the Continue option.</li> </ul> <p></p> <p>Figure 12: Upload successfully</p> <p>Step 6: Review Details</p> <ul> <li>After successful upload you can review the information</li> </ul> <p></p> <p>Figure 13: Review details</p> <p>On this page three options will be given to you as follows:</p> <ul> <li> <p>Back: In case there is any error, you can simply go Back and edit information as required.</p> </li> <li> <p>Save Draft: You can use Save Draft option in case of any dilemma that later you want to change or update anything.</p> </li> <li> <p>Save &amp; Publish: Once everything is completely verified you can click on the final step Save &amp; Publish option to finally deploy your smart contract.</p> </li> </ul> <p>Step 7: Smart Contract generation</p> <p></p> <p>Figure 14: Smart Contract Generated Successfully</p> <p>As you can see your smart contract is generated successfully with the smart contract ID. Happy Generation!</p> <p>Hope this article helped you understand the homepage of the Kalp Studio platform.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/","title":"How do I write a Smart Contract?","text":"<p>This documentation provides an in-depth guide on the steps to follow in writing Smart Contracts tailored for developers aiming to interact with the Kalp blockchain network.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_1","title":"How do i write a smart contract","text":"<p>Overview</p> <p>We require Kalp-SDK to a comprehensive Golang package that simplifies the development of smart contracts on the Kalp blockchain network. It is specifically designed to enable developers to write and create Aa Kalp-blockchain-compliant smart contracts with a set of powerful functionalities.</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_2","title":"How do i write a smart contract","text":"<p>Prerequisites </p> <ul> <li> <p>Golang installation and setup</p> <p>A recent version of Go is recommended preferably 1.19 or earlier 1.20. Compatibility with newer versions might not be guaranteed for all Kalp functionalities.</p> </li> <li> <p>Kalp Software Development Kit (SDK) Installation:</p> <ul> <li> <p>Installation: Install the Kalp SDK by following the official installation instructions provided by the Kalp team. These instructions may involve downloading a pre-built binary or building the SDK from the source code.</p> </li> <li> <p>Documentation: Familiarize yourself with the Kalp SDK documentation, which outlines available functionalities, usage examples, and best practices for interacting with the Kalp platform through your Go applications.</p> </li> </ul> </li> <li> <p>Basic Understanding of Blockchain Fundamentals:</p> <p>Possess a basic understanding of blockchain networks, including concepts like distributed ledgers, consensus mechanisms, and smart contracts.</p> </li> <li> <p>Go Programming Proficiency:</p> <p>Prior experience and proficiency in the Go programming language are essential prerequisites for contributing to Kalp development. This includes understanding core Go syntax, data structures, control flow statements, and error-handling mechanisms.</p> </li> </ul>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_3","title":"How do i write a smart contract","text":"<p>Set up your Development Environment</p> <ul> <li> <p>Download and install the appropriate Golang binary for your operating system from the official Golang download page: https://go.dev/doc/install. Follow the provided installation instructions to ensure proper integration with your system.</p> </li> <li> <p>Set up your Go workspace, with the following process:</p> <ul> <li> <p>GOPATH: Set the <code>GOPATH</code> environment variable to define your preferred location for storing Go source code, compiled packages, and downloaded dependencies. It's recommended to choose a dedicated directory outside your system directories (e.g., <code>/home/your_username/go</code>).</p> </li> <li> <p>PATH Update: Add the <code>$GOPATH/bin</code> directory to your system's <code>PATH</code> environment variable. This allows you to execute Go commands (like <code>go build</code>, <code>go run</code>) from any terminal location without specifying the full path.</p> </li> </ul> </li> </ul>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_4","title":"How do i write a smart contract","text":"<p>Creating and Starting Chaincode</p> <ol> <li> <p>Create a new directory for your project.</p> <ol> <li> <p>Execute the following command to create a new directory named <code>my-smart-contract</code></p> </li> <li> <p>Change the directory into the newly created project directory.</p> </li> </ol> </li> </ol> <pre><code>$ mkdir my-smart-contract\n$ cd my-smart-contract\n</code></pre> <ol> <li>Initialize a new Go module: Within the <code>my-smart-contract</code> directory, run the following command to initialize a new Go module named <code>my-smart-contract</code>:</li> </ol> <pre><code>$ go mod init my-smart-contract\n</code></pre> <ol> <li>Getting Started with Kalp-SDK: Use the <code>go get</code> command to download and install the Kalp SDK library:</li> </ol> <pre><code>$ go get -u github.com/p2eengineering/kalp-sdk-public/kalp\n</code></pre> <p>Response:</p> <pre><code>go: downloading golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: downloading golang.org/x/sys v0.17.0\ngo: downloading google.golang.org/grpc v1.62.0\ngo: downloading golang.org/x/net v0.21.0\ngo: downloading google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading google.golang.org/genproto v0.0.0-20240221002015-b0ce06bbee7c\ngo: downloading github.com/go-openapi/spec v0.20.14\ngo: downloading github.com/go-openapi/swag v0.22.9\ngo: downloading google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: downloading golang.org/x/mod v0.15.0\ngo: added github.com/go-openapi/jsonpointer v0.20.2\ngo: added github.com/go-openapi/jsonreference v0.20.4\ngo: added github.com/go-openapi/spec v0.20.14\ngo: added github.com/go-openapi/swag v0.22.9\ngo: added github.com/gobuffalo/envy v1.10.2\ngo: added github.com/gobuffalo/packd v1.0.2\ngo: added github.com/gobuffalo/packr v1.30.1\ngo: added github.com/golang/protobuf v1.5.3\ngo: added github.com/hyperledger/fabric-chaincode-go v0.0.0-20240124143825-7dec3c7e7d45\ngo: added github.com/hyperledger/fabric-contract-api-go v1.2.2\ngo: added github.com/hyperledger/fabric-protos-go v0.3.3\ngo: added github.com/joho/godotenv v1.5.1\ngo: added github.com/josharian/intern v1.0.0\ngo: added github.com/konsorten/go-windows-terminal-sequences v1.0.3\ngo: added github.com/mailru/easyjson v0.7.7\ngo: added github.com/p2eengineering/kalp-sdk-public v0.0.0-20240118070807-283512298976\ngo: added github.com/rogpeppe/go-internal v1.12.0\ngo: added github.com/sirupsen/logrus v1.9.3\ngo: added github.com/xeipuuv/gojsonpointer v0.0.0-20190905194746-02993c407bfb\ngo: added github.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415\ngo: added github.com/xeipuuv/gojsonschema v1.2.0\ngo: added golang.org/x/exp v0.0.0-20240222234643-814bf88cf225\ngo: added golang.org/x/mod v0.15.0\ngo: added golang.org/x/net v0.21.0\ngo: added golang.org/x/sys v0.17.0\ngo: added golang.org/x/text v0.14.0\ngo: added google.golang.org/genproto v0.0.0-20240213162025-012b6fc9bca9\ngo: added google.golang.org/genproto/googleapis/rpc v0.0.0-20240221002015-b0ce06bbee7c\ngo: added google.golang.org/grpc v1.62.0\ngo: added google.golang.org/protobuf v1.32.0\ngo: added gopkg.in/yaml.v2 v2.4.0\ngo: added gopkg.in/yaml.v3 v3.0.1\n</code></pre> <ol> <li>Create a new Go source file<code>.go</code> within your project directory. This file will house the core logic of your smart contract. Utilize your preferred text editor or IDE to create the file and ensure it's saved with the <code>.go</code> extension.</li> </ol> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/p2eengineering/kalp-sdk-public/kalpsdk\"\n)\n\ntype SmartContract struct {\n     kalpsdk.Contract\n}\n\nfunc (sc *SmartContract) ExecuteTransaction() {\n    // Implement the logic for executing transactions\n    fmt.Println(\"Executing transaction...\")\n}\n\nfunc (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\n</code></pre> <p>This newly created file will encompass the following core elements:</p> <ul> <li> <p>Package Declaration: <code>package main</code>: This line specifies that the code within this file belongs to the <code>main</code> package, which is the entry point for your smart contract application.</p> </li> <li> <p>Imports:</p> <ul> <li> <p><code>fmt</code>: This import statement allows you to utilize the <code>fmt</code> package, providing functionalities for formatted printing and input/output operations.</p> </li> <li> <p><code>github.com/p2eengineering/kalp-sdk-public/kalpsdk</code>: This import statement brings the Kalp SDK library into your project, granting access to the necessary functionalities for interacting with the Kalp blockchain ecosystem.</p> </li> </ul> </li> <li> <p>Smart Contract Definition: <code>type SmartContract struct { ... }</code>: This part defines a custom struct named <code>SmartContract</code> which serves as the blueprint for your smart contract. It embeds the <code>kalpsdk.Contract</code> type, inheriting functionalities offered by the Kalp SDK framework.</p> </li> <li> <p>Transaction Execution Function: <code>func (sc *SmartContract) ExecuteTransaction() { ... }</code>: This function, named <code>ExecuteTransaction</code>, represents the core logic that will be executed whenever a transaction interacts with your smart contract. Customize this function to encapsulate the specific business logic your smart contract is designed to handle.</p> </li> <li> <p>Initialization Function: <code>func (c *SmartContract) Init(ctx kalpsdk.TransactionContextInterface) error { ... }</code>: This function, named <code>Init</code>, serves as the initialization entry point for your smart contract. It typically defines any setup tasks or initialization logic required for your smart contract to function correctly. It takes a <code>kalpsdk.TransactionContextInterface</code> argument, providing access to contextual information about the ongoing transaction.</p> </li> <li> <p>Create <code>main.go</code> file in the following way.</p> </li> </ul> <pre><code>package main\n\nimport (\n    \"log\"\n\n    \"github.com/p2eengineering/kalp-sdk/kalpsdk\"\n)\n\nfunc main() {\n\n    contract := kalpsdk.Contract{IsPayableContract: true}\n\n    contract.Logger = kalpsdk.NewLogger()\n    chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})\n    contract.Logger.Info(\"My KAPL SDK sm4\")\n\n    // Create a new instance of your KalpContractChaincode with your smart contract\n    // chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{kalpsdk.Contract{IsPayableContract: true}})\n    // kalpsdk.NewLogger()\n    if err != nil {\n        log.Panicf(\"Error creating KalpContractChaincode: %v\", err)\n    }\n\n    // Start the chaincode\n    if err := chaincode.Start(); err != nil {\n        log.Panicf(\"Error starting chaincode: %v\", err)\n    }\n</code></pre> <p>The <code>main.go</code> file stands as the conductor that orchestrates the initialization and execution of your smart contract within the Kalp blockchain environment. It serves as the entry point for your application, bringing your carefully crafted smart contract logic to life. Here's a detailed explanation of its structure:</p> <ul> <li> <p>Necessary Imports:</p> <ul> <li> <p><code>**log**</code> package: This package empowers you to issue logging messages, providing valuable insights into the execution flow and potential errors for debugging purposes.</p> </li> <li> <p><code>**github.com/p2eengineering/kalp-sdk/kalpsdk**</code> package: This import statement grants access to the essential Kalp SDK functionalities for interacting with the blockchain network and managing your smart contract.</p> </li> </ul> </li> <li> <p>The <code>**main**</code> Function: This function serves as the starting point for your application when it's executed. It undertakes the following crucial tasks:</p> </li> <li> <p>Contract Configuration:</p> <ul> <li> <p><code>**contract := kalpsdk.Contract{IsPayableContract: true}**</code>: This line initializes a new <code>Contract</code> object, defining key properties of your smart contract. The <code>IsPayableContract: true</code> setting designates that your contract will be capable of receiving payments from users.</p> </li> <li> <p><code>**contract.Logger = kalpsdk.NewLogger()**</code>: This statement creates a new logger instance and assigns it to the contract, enabling you to generate logging messages for tracking events and debugging.</p> </li> </ul> </li> <li> <p>Chaincode Instantiation:</p> <ul> <li> <p><code>**chaincode, err := kalpsdk.NewChaincode(&amp;SmartContract{contract})**</code>: This line constructs a new instance of the <code>KalpContractChaincode</code> type. It integrates your custom <code>SmartContract</code> implementation, effectively bridging your contract logic with the Kalp SDK framework.</p> </li> <li> <p><code>**contract.Logger.Info(\"My KAPL SDK sm4\")**</code>: This statement logs an informative message using the logger, indicating that the chaincode is initialized and ready to commence operations.</p> </li> </ul> </li> <li> <p>Crucial Error Handling:<code>**if err != nil { ... }**</code> blocks: These conditional blocks diligently check for potential errors during chaincode creation and startup. If errors occur, the <code>panicf</code> the function is invoked, terminating execution with an informative error message. This assertive error handling safeguards the integrity of your application and facilitates debugging efforts.</p> </li> <li> <p>Chaincode Activation:<code>**if err := chaincode.Start(); err != nil { ... }**</code>: This block calls the <code>Start()</code> function on the instantiated chaincode, triggering the execution of your smart contract within the Kalp blockchain environment. Once again, error handling is incorporated to gracefully address any issues that might impede chaincode startup.</p> </li> </ul> <p>Payment Tracking for Payable Contracts</p> <p>Pass your contract_ <code>_struct_</code> as an argument to the <code>_NewChaincode_</code> function and specify whether the contract is payable or not.</p> <ol> <li>Vendoring the dependencies: This places the external dependencies for your smart contract into a local <code>vendor</code> directory.</li> </ol> <pre><code>$ go mod vendor\n</code></pre> <ol> <li>Folder Structure: After Executing the above command the folder Structure shows up as below:</li> </ol> <pre><code>Folder name\n\u251c\u2500\u2500vendor\n\u251c\u2500\u2500go.mod\n\u251c\u2500\u2500go.sum\n\u251c\u2500\u2500main.go\n\u2514\u2500\u2500 contract\n    \u2514\u2500\u2500 contract.go\n</code></pre> <ol> <li>Save your changes.</li> </ol>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_5","title":"How do i write a smart contract","text":"<p>Implementation Steps with Kalp SDK</p> <ol> <li>Define a New Go Struct: Represent your contract with a new Go struct and embed the <code>kalpsdk.Contract</code> struct to inherit base contract functionalities.</li> </ol> <pre><code>type MyContract struct {\nkalpsdk.Contract\n}\n</code></pre> <ol> <li>Implement the Contract Interface: Define the <code>Init</code> and <code>Invoke</code> methods for initialization logic and invocation handling.</li> </ol> <pre><code>func (c *MyContract) Init(ctx kalpsdk.TransactionContextInterface) error {\n// Initialization logic return nil\n}\nfunc (c *MyContract) Invoke(ctx kalpsdk.TransactionContextInterface, data string) error {\n// Invoke logic return nil\n}\n</code></pre>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_6","title":"How do i write a smart contract","text":"<ol> <li>Blockchain Data Management</li> </ol> <p>This section details the core functionalities available for managing data on the blockchain:</p> <p>Writing to the Blockchain:</p> <ul> <li> <p><code>**PutStateWithKyc**</code>: This function facilitates writing data onto the blockchain ledger. Crucially, it enforces mandatory KYC (Know Your Customer) verification as part of the write operation, ensuring compliance with regulatory requirements or specific platform policies.</p> </li> <li> <p><code>**PutStateWithoutKyc**</code>: This function enables writing data to the blockchain ledger. Unlike its counterpart, it bypasses the KYC verification step, potentially catering to situations where regulatory constraints are not applicable or KYC checks have already been performed at an earlier stage.</p> </li> </ul> <p>Reading from the Blockchain:</p> <ul> <li><code>**GetState**</code>: This function retrieves the data from the blockchain ledger. It allows querying the current state of the ledger to obtain information relevant to your application's needs.</li> </ul> <p>Deleting from the Blockchain:</p> <ul> <li> <p><code>**DelStateWithKyc**</code>: This function enables deleting data from the blockchain ledger. Similar to <code>PutStateWithKyc</code>, it enforces mandatory KYC verification before proceeding with the deletion operation.</p> </li> <li> <p><code>**DelStateWithoutKyc**</code>: This function allows the deleting data from the blockchain ledger. Just as with <code>PutStateWithoutKyc</code>, it bypasses the KYC verification step, potentially catering to specific scenarios where deletion is permitted without additional verification.</p> </li> </ul>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_7","title":"How do i write a smart contract","text":"<p>Sample Code Examples</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_8","title":"How do i write a smart contract","text":"<p>Writing to the Blockchain</p>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_9","title":"How do i write a smart contract","text":"<p>PutStateWithKyc</p> <pre><code>err := ctx.PutStateWithKyc(\"myKey\", []byte(\"myValue\")) if err != nil {\n // Handle error \n } else {\n  // Data successfully written to the blockchain with KYC verification\n   }\n</code></pre>"},{"location":"Getting%20started/Smart%20contract%20management/How%20do%20i%20write%20a%20smart%20contract/#_10","title":"How do i write a smart contract","text":"<p>PutStateWithoutKyc</p> <pre><code>err := ctx.PutStateWithoutKyc(\"myKey\", []byte(\"myValue\"))\nif err != nil {\n    // Handle error\n} else {\n    // Data successfully written to the blockchain without KYC verification\n}\n</code></pre> <p>For more information, visit: Kalp Golang SDK</p>"},{"location":"Getting%20started/Smart%20contract%20management/What%20are%20my%20smart%20contract%20details%2C%20Transactions%2C%20and%20API%20Endpoints/","title":"What are my Smart Contract Details, Transactions, and API Endpoints?","text":"<p>Hey Users! Welcome to the Kalp Studio Platform.</p> <p>Smart contracts might sound complex, but understanding their transactions and endpoints doesn't have to be intimidating. Ever wondered how to check a contract's details, explore its history, or interact with its functionalities? You've come to the right place!</p> <p>This guide will break down the world of smart contracts, making their transactions and endpoints clear and accessible. We'll take you on a journey to unlock the mysteries and empower you to confidently navigate this exciting realm.</p> <p>Step 1: Go to Dashboard or go to the smart contract section on the left menu. For details regarding a particular Smart Contract, you can click on the smart contract details and you'll get a screen where you can change tabs between details, Transactions, and API Endpoints of the Smart Contract.</p> <p>Figure 1: Tabs</p> <ol> <li>Smart Contract Details The \"Smart Contract Details\" provide specific information about a particular smart contract in a Kalp network.</li> </ol> <p>Figure 2: Smart Contract Details</p> <p>ID: A blank field where the unique identifier of the smart contract will be displayed.</p> <p>Environment: The stage of deployment, such as development, staging, and production.</p> <p>Network: Specifies on which net the smart contract is deployed i.e. testing.</p> <p>Project: The name or identifier of the project associated with the smart contract.</p> <p>Created On: The date and time the smart contract was created.</p> <p>Description: A brief description of the smart contract's purpose and functionality.</p> <p>This form is used to input or modify details about a smart contract.</p> <ol> <li>Transaction</li> </ol> <p>This section displays the transaction-related information for the smart contract.</p> <p>Figure 3: Transactions</p> <p>ID: Each transaction may be assigned a unique identifier for reference.</p> <p>Block ID: The ID of the blockchain block that contains the transaction, useful for locating it within the Kalp.</p> <p>TxHash (Transaction Hash): A unique alphanumeric string that identifies each transaction. It can be used to track and verify the transaction details on the Kalp.</p> <p>Created On: The date and time when the transaction was recorded on the blockchain.</p> <p>Status: Shows the current state of the transaction, such as pending, success, or failed.</p> <p>These details help users audit the activity of a smart contract, tracking its use and the movement of assets or data it manages.</p>"},{"location":"Getting%20started/Smart%20contract%20management/What%20are%20my%20smart%20contract%20details%2C%20Transactions%2C%20and%20API%20Endpoints/#_1","title":"What are my smart contract details, Transactions, and API Endpoints","text":"<p>3. API Endpoint</p> <p></p> <p>The \"API Endpoint\" tab within a smart contract interface provides developers with access to the web API endpoints associated with a specific smart contract.</p> <p></p> <p>Figure 4: API Endpoints</p> <ul> <li> <p>API Endpoint URL: The base URL for making API requests to interact with the smart contract.</p> </li> <li> <p>Smart Contract Address: The unique address of the smart contract on the blockchain.</p> </li> <li> <p>Environment: Specifies whether the smart contract is in a development, staging, and production environment.</p> </li> <li> <p>Network: The blockchain network where the smart contract is deployed i.e. Test Net.</p> </li> </ul> <p>The list of operations includes:</p> <ul> <li> <p>HTTP Method: The type of request ( POST) used to interact with the API.</p> </li> <li> <p>Function: The action or function that the API endpoint will perform.</p> </li> <li> <p>Route: The specific path appended to the base URL to access a particular function or resource.</p> </li> <li> <p>Check Params: A feature to validate the parameters for the API request, ensuring they meet the required format or data type before sending the request.</p> </li> </ul> <p>This tab is essential for developers to test and ensure that their applications can communicate correctly with the smart contract through the API. Hope this article helped with beginning your journey to navigate Smart Contract details along with Transactions and Endpoints.</p>"},{"location":"Getting%20started/User%20onboarding/Create%20an%20account/","title":"Create an Account","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>We acknowledge your self-reliance, but we're excited to stand by your side throughout your Kalp Studio experience. In addition, we'll provide you with valuable tips and information about how to make the most of Kalp Studio functionalities.</p> <p>So, let\u2019s begin with your onboarding process on the Kalp Studio platform.</p>"},{"location":"Getting%20started/User%20onboarding/Create%20an%20account/#_1","title":"Create an account","text":"<p>Sign Up Process</p> <p>Kalp Studio sign-up represents the user(s) first interaction with the platform before entering the login page of the Kalp Studio platform. If you are new to the platform, you must undergo the registration process via the signup page and verify your credentials.</p> <p>The below steps describe the user journey throughout the registration process.</p> <p>Step 1:</p> <p>Click  console.kalp.studio  to redirect to the Kalp Studio application page.</p> <p>Step 2:</p> <p>If you are a new user of the Kalp Studio platform, click on Sign Up for free to redirect to the Signup page.</p> <p></p> <p>Figure 1: Welcome Page</p> <p>The sign-up screen will be displayed.</p> <p>Step 3:</p> <p></p> <p>Figure 2: Sign-up page</p> <ol> <li>Enter your Name in the input box.</li> </ol> <p>Criteria for entering the Name:</p> <ul> <li> <p>Alphabetical Requirement: Your name should only contain letters (A-Z, a-z). No numbers or symbols.</p> </li> <li> <p>Length: It must be at least 3 characters and not exceed 25 characters. This ensures readability and compatibility with the system. </p> </li> </ul> <ol> <li>Enter your Organization Name or School Name in the input box.</li> </ol> <p>This field is optional for the end user.</p> <ol> <li>Enter your Email ID in the input box.</li> </ol> <p>Criteria for entering an Email ID:</p> <ul> <li>Format Compliance: Your email should follow the standard format, which is usually something like username@domainextension. This is necessary for communication and verification purposes. </li> </ul> <ol> <li>Enter your Phone Number in the input box.</li> </ol> <p>Criteria for entering Phone number: It is country specific. Enter the phone number based on country code.</p> <ol> <li>Enter the Password in the input box.</li> </ol> <p>Criteria for selecting a valid password:</p> <ul> <li> <p>Length: Your password needs to be a minimum of 8 characters but no more than 20. This range ensures security while being user-friendly.</p> </li> <li> <p>Uppercase Letter: At least one capital letter for added password strength.</p> </li> <li> <p>Lowercase Letter: At least one small letter to ensure complexity.</p> </li> <li> <p>Special Character: Include at least one character like !, @, $, #, or % for enhanced security.</p> </li> <li> <p>Number: At least one numeral is required for an additional layer of complexity. </p> </li> </ul> <ol> <li>Enter your Confirm Password in the input box.</li> </ol> <p>Matching Criteria: You need to re-enter your password to confirm it. This step is crucial to prevent typing errors in your password.</p> <p>Step 4:</p> <p>Click on Sign Up.</p> <p>Initiate Process: After filling in all the details, clicking this button will submit your information for the creation of your account.</p> <p>A 4-digit OTP is sent to your email ID and registered mobile number. This is a security measure to verify the authenticity of your email ID and mobile number.</p> <p></p> <p>Figure 3: OTP on Email ID</p> <p>Step 5:</p> <p>Enter the 4-digit OTP from your email ID and mobile number. Click on Verify.</p> <p></p> <p>Figure 4: OTP</p> <p>OTP Validation: Please note this OTP is valid for 5 minutes.</p> <p>The sign up screen displays the Terms &amp; Conditions and Privacy Policy to which you will have to adhere as a user of Kalp Studio Platform.</p> <p></p> <p>Figure 5: Terms &amp; Conditions</p> <p></p> <p>Figure 6: Terms &amp; Conditions</p> <p>After completing these steps, your account is set up, and you're ready to log in to Kalp Studio. This process ensures the security of your account and the authenticity of your information.</p>"},{"location":"Getting%20started/User%20onboarding/Create%20an%20account/#_2","title":"Create an account","text":"<p>Login Process</p> <p>This section displays the Kalp Studio user Login feature. The Login feature is for existing users who have completed Sign up. After successful sign-up, a user is ready to use their account and log in to the portal.</p> <p>Verification Process</p> <p>Kalp Studio will place a call to the signed up user to confirm his successful login to the Kalp Studio application. You will be able to access the Kalp Studio platform after this verification.</p> <p></p> <p>Figure 7: Login Verification</p> <p>The below steps describe the user journey throughout the login process.</p> <p>Step 1:</p> <p>Click console.kalp.studio  to redirect to the Kalp Studio application page.</p> <p>Step 2:</p> <ol> <li> <p>Enter your registered Email ID.</p> </li> <li> <p>Enter your Password.</p> </li> </ol> <p>Click on the Login button.</p> <p></p> <p>Figure 1: Login</p> <p>You will reach the Dashboard. In the dashboard, you can check the last updates, view existing or create new smart contracts and projects.</p> <p></p> <p>Figure 2: Dashboard</p>"},{"location":"Getting%20started/User%20onboarding/Create%20an%20account/#_3","title":"Create an account","text":"<p>Login Error Scenario:</p> <p>If you log in through one browser (such as Chrome) and then log in again using a different browser (like Microsoft Edge). Afterward, the previous login will expire automatically.</p>"},{"location":"Getting%20started/User%20onboarding/Create%20an%20account/#_4","title":"Create an account","text":"<p>Forgot Password</p> <p>The \"Forgot Password\" feature is an essential component of any website or platform that allows users to recover access to their accounts when they have forgotten their passwords.</p> <p>Resetting a password successfully is a seamless and straightforward process through the Kalp Studio. User(s) cannot enter Kalp Studio without logging in with the individual\u2019s email and a correct password, matching with the database.</p> <p>The below steps describe the user journey throughout the Reset Password process.</p> <p>Step 1:</p> <p>Click  console.kalp.studio to redirect to the Kalp Studio application page. Click on Forgot Password.</p> <p></p> <p>Figure 1: Forgot Password</p> <p>Step 2:</p> <p>Enter your email ID to receive a link to reset your password. Click on Reset Password.</p> <p></p> <p>Figure 2: Reset Password</p> <p>The reset password link is sent to your email ID. Click on Reset Password.</p> <p></p> <p>Figure 3: Reset Password</p> <p>Step 3:</p> <p>The reset password page is displayed on the screen. Enter your new password.</p> <p>Criteria for selecting a valid password</p> <ul> <li> <p>Password must contain at least 8-20 characters.</p> </li> <li> <p>It should always be an alphanumeric string.</p> </li> <li> <p>Password must contain at least one lowercase and uppercase letter.</p> </li> <li> <p>Password must contain at least one special character, including \u201c!, @, #, $, %, &amp;, *, (), -, +, =, ^\u201d</p> </li> <li> <p>The new password should not match the last 3 passwords.</p> </li> </ul> <p>Repeat your new password on the Confirm Password input box for confirmation.</p> <p></p> <p>Figure 4: Reset Password</p> <p>Click on Update Password. You have successfully changed your password. You will get an email about the successful password change in your registered email ID.</p> <p>Click on Login Now to log in to the Kalp Studio application.</p> <p></p> <p>Figure 5: Password changed successfully</p> <p>Hope this article helped with beginning your journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/User%20onboarding/Explore%20kalp%20studio/","title":"Explore Kalp Studio","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>While accessing the homepage, you will be greeted with a clean and intuitive interface that is designed to maximize efficiency and ease of use. Here are some key functionalities and elements you can expect to find.</p> <p>Complete KYC</p> <p>As you login to the Kalp Studio Application for the first time, you will be notified that your KYC needs to be completed. After you complete the KYC, you can explore the Dashboard further.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Post KYC</p> <p>Post KYC you can explore Dashboard in detail.</p> <p></p> <p>Figure 2: Kalp Studio Homepage</p>"},{"location":"Getting%20started/User%20onboarding/Explore%20kalp%20studio/#_1","title":"Explore kalp studio","text":"<p>Homepage</p> <p>Kalp Studio Homepage provides an overview of the user's projects, recent actions, and smart contracts. It also provides quick access to settings, help, and the ability to create new projects.</p> <p></p> <p>Figure 3: Testnet Balance, Notification Bell, and Profile Icon</p> <p>Testnet balance</p> <p>This section displays the current balance of your account on the Kalp Studio testnet. The balance you see here likely represents a certain amount of testnet credits. It's used to pay for transaction fees and deployment fees.</p> <p>Notification bell</p> <p>It indicates that you have unread notifications related to your projects, smart contracts, or other activities within the app. Clicking on the icon could then take you to a notification center where you can view and manage these notifications.</p> <p>Profile icon</p> <p>This icon opens the profile section where you can view and manage your account information.</p> <p></p> <p>Figure 4: Profile Icon</p> <p>Your Profile: This text indicates that clicking on the profile icon will take you to a section where you can view and edit your profile information, such as your name, email address, and preferences.</p> <ul> <li> <p>Kalp Testnet ID: This section displays your unique identifier on the Kalp Studio testnet. The testnet is a simulated blockchain environment allowing you to test and develop your smart contracts. Your Kalp Testnet ID is used to track your activity and balances on the testnet.</p> </li> <li> <p>Logout: This button allows you to log out of the Kalp Studio app. Once you log out, you will need to enter your credentials again to access the app.</p> </li> </ul>"},{"location":"Getting%20started/User%20onboarding/Explore%20kalp%20studio/#_2","title":"Explore kalp studio","text":"<p>Dashboard</p> <p></p> <p>Figure 5: Dashboard</p> <p>Create a Project: This button allows you to initiate the process of creating a new project within Kalp Studio. Creating a project would likely be the first step for managing smart contracts and associated activities within Kalp Studio.</p> <p>Last Update: This section might display a list of recent actions or events related to your projects and smart contracts.</p> <p>Smart Contract: The \"Smart Contract\" section you described seems to provide an overview of a specific smart contract within the Kalp Studio app.</p> <ul> <li> <p>Transaction ID: This is a unique identifier assigned to the smart contract and is used to trace and identify it on the Kalp blockchain.</p> </li> <li> <p>Name: This is the user-defined name given to the smart contract, making it easier to identify and differentiate among multiple contracts.</p> </li> <li> <p>Project: This indicates the project to which the smart contract belongs. This helps organize and categorize your smart contracts based on their specific use cases.</p> </li> <li> <p>Environment: This specifies the environment where the smart contract is deployed or intended to be deployed.</p> </li> <li> <p>Status: This indicates the current state of the smart contract, such as \"Success,\" \"Failed,\" \"In Review,\" \"Pending\", or \"Save as Draft\".</p> </li> <li> <p>Network: This specifies the blockchain network on which the smart contract is deployed or designed to run. \"Testnet\" is used for deploying Smart Contracts on Kalp Studio.</p> </li> <li> <p>Created on: This shows the date and time when the smart contract was created within the Kalp Studio platform.</p> </li> <li> <p>Edit Smart Contract: This button allows you to modify the code, configuration, or settings of the smart contract. Users can only edit Smart Contracts that are saved to draft.</p> </li> </ul>"},{"location":"Getting%20started/User%20onboarding/Explore%20kalp%20studio/#_3","title":"Explore kalp studio","text":"<p>Left Menu</p> <p>The following outlines the functionalities available in the left menu of Kalp Studio's interface, designed to provide users with a comprehensive suite of tools for project development and management:</p> <p></p> <p>Figure 6: Left Menu</p> <p>Projects</p> <ul> <li>This module serves as a centralized hub for managing and organizing distinct projects within Kalp Studio. Each project encapsulates a separate application or use case, ensuring resource and configuration isolation for streamlined project administration.</li> </ul> <p>Smart Contract</p> <ul> <li>This segment provides a comprehensive suite of tools for the lifecycle management of smart contracts, encompassing creation, testing, deployment, and interaction phases. It facilitates the direct integration of blockchain technology into applications through self-executing contractual agreements codified in blockchain.</li> </ul> <p>KALP Wallet</p> <ul> <li>The KALP Wallet interface enables secure management of KALP testnet credits essential for facilitating transactions within the Kalp Studio ecosystem. Features include deployment status, transaction history, and added fund history.</li> </ul> <p>Billing</p> <ul> <li>This area is dedicated to the financial management aspects of Kalp Studio services, offering functionalities for payment method configuration, subscription management, and historical payment records.</li> </ul> <p>Docs</p> <ul> <li>This repository provides exhaustive documentation on Kalp Studio's API offerings, designed to aid users in the integration and utilization of platform services. It encompasses detailed guides, example use cases, and API reference material to ensure effective platform adoption.</li> </ul> <p>Settings</p> <ul> <li>The Settings module allows for the customization and configuration of user preferences and project-specific parameters within Kalp Studio. It encompasses account management, security settings, and user interface customization options to enhance the platform's utility and user experience.</li> </ul> <p>Help &amp; Support</p> <ul> <li>The \"Help &amp; Support\" section in Kalp Studio navigates users to a resourceful collection of Frequently Asked Questions (FAQs) and insightful articles, aimed at offering immediate assistance and guidance on various aspects of the platform's usage and features.</li> </ul> <p>Error Scenarios</p> <p>Internet Access not available:</p> <p>When internet access is not available following error is displayed.</p> <p></p> <p>Figure 7: Internet Error</p> <p>Error 404: Page not found</p> <p>Error 404 is displayed when the page is not found by the browser.</p> <p></p> <p>Figure 8: Page not found</p>"},{"location":"Getting%20started/User%20onboarding/KYC%20Process%20-%20Indian%20Users/","title":"KYC Process - Indian Users","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>To ensure the security of your identity on Kalp Studio, we have implemented a KYC (or Know Your Customer) authentication and verification process that enables you to deploy your projects on Kalp Blockchain in a few simple steps.</p> <p>Let us now go through the KYC process for Indian users</p>"},{"location":"Getting%20started/User%20onboarding/KYC%20Process%20-%20Indian%20Users/#kyc-indian-users","title":"KYC: Indian Users","text":"<p>Step 1:</p> <p>Login to Kalp Studio Application. For new users Complete KYC is displayed as you log in. Click on Complete KYC.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Step 2:</p> <p>Select your Country to initiate KYC.</p> <p></p> <p>Figure 2: Select Country</p> <p>Step 3:</p> <p>Perform Liveness Verification by taking a selfie. The Liveness verification in Know Your Customer (KYC) processes refers to the procedure of verifying that a person attempting to open an account or perform a transaction is physically present and alive during the authentication process.</p> <p></p> <p>Figure 2: Liveness Verification</p> <p>Step 4:</p> <p>Click on Take a Selfie to capture your selfie.</p> <p></p> <p>Figure 3: Take a Selfie</p> <p>Step 5:</p> <p>The Selfie is uploaded here.</p> <p></p> <p>Figure 4: Selfie</p> <p>Step 6:</p> <p>For the next step, you need to upload your PAN Card as proof of identity verification. Then, click \"CONTINUE\" to move forward.</p> <p></p> <p>Figure 5: Upload Pan Card</p> <p>In this screen, the PAN card has been uploaded.</p> <p></p> <p>Figure 6: Pan Card uploaded</p> <p>Step 7:</p> <p>Now you'll need to upload your AADHAR Card as proof of address verification.</p> <p>Note</p> <p>Maximum allowed file size is 64MB._</p> <p></p> <p>Figure 7: Aadhar Card</p> <p>Step 8:</p> <p>Click on VERIFY AADHAR to open Digilocker. Again, click \"CONTINUE\" to proceed. Now you'll need to upload your AADHAR Card as proof of address verification.</p> <p></p> <p>Figure 9: Verify Aadhar</p> <p>Step 9: Digilocker Account</p> <p>Enter your Aadhaar number in Digilocker and complete the captcha to proceed.</p> <p></p> <p>Figure 10: Digilocker Account</p> <p>Step 10:</p> <p>Now the Digilocker account will link to Authbridge by sending an OTP to your mobile number.</p> <p></p> <p>Figure 11: Digilocker Account</p> <p>Step 11:</p> <p>Once your Digilocker account is linked with Authbridge eAadhaar, you\u2019ll be redirected back to verification details.</p> <p></p> <p>Figure 12: Linking with AuthBridge</p> <p>Step 12:</p> <p>This step verifies successfully the documents submitted. Click on CONTINUE.</p> <p></p> <p>Figure 13: Verified successfully</p> <p>Step 13:</p> <p>You can now preview user details. After confirming the user details click on SUBMIT.</p> <p></p> <p>Figure 14: SUBMIT</p> <p>Step 14: Post KYC</p> <p>After completing these steps, your KYC application will be submitted for review. You will receive an email confirmation on your registered email ID after the KYC process is completed.</p> <p></p> <p>Figure 15: KYC Pending</p> <p>Step 15: Post KYC</p> <p>Post KYC validation, the KYC status successful or failed will be displayed.</p> <p></p> <p>Figure 12: KYC Failed</p> <p>After successfully completing these steps, you are KYC verified. You can now create projects and create smart contracts in the Kalp Studio application.</p> <p>Hope this article helped with your KYC journey on the Kalp Studio platform.</p>"},{"location":"Getting%20started/User%20onboarding/KYC%20Process%20-%20International%20Users/","title":"KYC Process - International Users","text":"<p>Hi Users! Welcome to the Kalp Studio platform.</p> <p>To ensure the security of your identity on Kalp Studio, we have implemented a KYC (or Know Your Customer) authentication and verification process that enables you to deploy your smart contracts on Kalp Blockchain in a few simple steps.</p> <p>Let\u2019s check out how it's done.</p>"},{"location":"Getting%20started/User%20onboarding/KYC%20Process%20-%20International%20Users/#kyc-international-users","title":"KYC: International Users","text":"<p>Let us now go through the KYC process for International users.</p> <p>Step 1:</p> <p>Login to the Kalp Studio application. For new users, Complete KYC is displayed as you log in. Click on the Complete KYC button.</p> <p></p> <p>Figure 1: Complete KYC</p> <p>Step 2:</p> <p>Select your Country to initiate the KYC Process. Click on Initiate Process.</p> <p></p> <p>Figure 2: Initiate Process</p> <p>The verification process varies based on country selection.</p> <p></p> <p>Figure 3: Select Country</p> <p>Step 3:</p> <p>Select your Issuing Country.</p> <p></p> <p>Figure 4: Issuing Country</p> <p>Step 4:</p> <p>Select your preferred mode of verification types. These can be Identity cards, Passports, Driver's License, and Residence Permits.</p> <p></p> <p>Figure 5: Document Types</p> <p>KYC via Mobile Phone</p> <p>Step 5:</p> <p>A message will be displayed \u201cWeb portal wants to use your camera\u201d. This process involves a web camera and the use of a mobile phone. We will first show the KYC through Mobile phone followed by the web process.</p> <p>Continue further verification on the phone screen.</p> <p></p> <p>Figure 6: Continue Verification on mobile phone</p> <p>You can copy the link to your mobile phone or scan the QR code.</p> <p></p> <p>Figure 7: Continue Verification on mobile phone</p> <p>Step 6:</p> <p>Click Selfie. To do this click on I'm Ready.</p> <p>Note</p> <p>Ensure your face is within the frame. Move your head in a circular direction._</p> <p></p> <p>Figure 8: Take Selfie</p> <p></p> <p>Figure 9: Selfie</p> <p>Step 7:</p> <p>Check and edit/confirm your uploaded document image and selfie. Click on the NEXT afterward.</p> <p></p> <p>Figure 10: Click Next</p> <p>Step 8: Post KYC</p> <p>Your data has been submitted for KYC processing and verification. Your KYC will be confirmed in less than 24 to 48 hours.</p> <p></p> <p>Figure 11: Data Processing</p> <p>KYC Pending status will be displayed on top.</p> <p></p> <p>Figure 12: KYC Pending popup</p> <p>Step 9: Post KYC</p> <p>Post KYC validation, the KYC status successful or failed will be displayed on top.</p> <p></p> <p>Figure 13: KYC Failed</p> <p>KYC via Web</p> <p>Step 1:</p> <p>After completing Step 4 above, the  Selfie screen is displayed. Click on \"I'm Ready\" to click a Selfie.</p> <p></p> <p>Figure 6: Selfie</p> <p>Step 2:</p> <p>A message is displayed that the camera access is needed to capture the selfie.</p> <p></p> <p>Figure 7: Camera Access</p> <p>Step 3:</p> <p>Now move your head in a circular motion to capture the selfie correctly.</p> <p></p> <p>Figure 8: Selfie</p> <p>Step 4:</p> <p>Check for edits or confirm your uploaded document image and selfie. Click on the NEXT afterward.</p> <p></p> <p>Figure 9: Identity Documents</p> <p>Step 5: Post KYC</p> <p>Your data has been submitted for KYC processing and verification. Your KYC will be confirmed in less than 24 to 48 hours.</p> <p>KYC Pending status will be displayed.</p> <p></p> <p>Figure 10: KYC Pending</p> <p>Step 6: Post KYC</p> <p>Post KYC validation, KYC status successful or failed is displayed.</p> <p></p> <p>Figure 11: KYC Failed</p> <p>After successfully completing these steps, you are KYC verified. You can now create projects, create smart contracts in the Kalp Studio application.</p> <p>Hope this article helped with your KYC journey on the Kalp Studio platform.</p>"},{"location":"Introduction/Welcome/","title":"Introduction","text":"<p>Kalp Studio empowers developers of all skill levels to navigate the exciting realm of Web 3.0 development using the robust Kalp Blockchain. It leverages a low-code approach, enabling both beginners and seasoned Web 2.0 developers to effortlessly create cutting-edge Web 3.0 applications or seamlessly extend existing applications into the decentralized world.</p>"},{"location":"Introduction/Welcome/#key-capabilities","title":"Key Capabilities","text":"<ul> <li> <p>Web 3.0 App Creation: Build secure and scalable decentralized applications (DApps) with intuitive visual tools and pre-built functionalities.</p> </li> <li> <p>Web 2.0 Integration: Extend the reach and capabilities of your existing Web 2.0 applications by integrating developer-friendly APIs that connect seamlessly to the Kalp Blockchain.</p> </li> <li> <p>Comprehensive API Suite: As a business network full-stack platform, Kalp Studio provides a robust set of APIs catering to diverse needs:</p> <ul> <li> <p>Administrators: Manage platform resources (consortia, environments, nodes, services) through a well-defined API, enabling automated DevOps pipelines for each participating organization.</p> </li> <li> <p>Network Operators: Oversee and maintain the Kalp Blockchain network infrastructure with dedicated API access.</p> </li> <li> <p>DApp Developers: Leverage extensive APIs to build and integrate DApp functionalities effortlessly.</p> </li> </ul> </li> </ul> <p>Kalp Studio prioritizes user experience with a simple and intuitive interface. Its low-code approach requires minimal programming expertise, making it accessible to developers of all backgrounds. Additionally, the extensive API documentation and developer resources ensure smooth adoption and integration.</p> <p>The flowchart below shows the functions of Kalp Studio in the blockchain network creation process:</p> <p></p> <p>Kalp Studio emerges as a pivotal element within the Kalp Blockchain ecosystem, streamlining and elevating the user experience. Its comprehensive functionalities empower users to:</p> <ul> <li> <p>Effortlessly Onboard: Eliminate onboarding complexities, enabling developers to swiftly begin their Web 3.0 journey.</p> </li> <li> <p>Craft Web 3.0 Applications: Facilitate the creation of robust blockchain projects, translating innovative ideas into tangible DApps.</p> </li> <li> <p>Harness Developer-Friendly APIs: Integrate powerful functionalities through readily available and intuitive APIs, simplifying smart contract development and integration.</p> </li> <li> <p>Effectively Manage Blockchain Projects: Provide tools and capabilities for efficient project management, ensuring smooth development and deployment cycles.</p> </li> </ul>"},{"location":"Introduction/Welcome/#feature-highlights","title":"Feature Highlights","text":"<ul> <li> <p>User Onboarding: By prioritizing user experience and facilitating a smooth onboarding process, Kalp Studio fosters a supportive environment for developers, encouraging innovation and creativity in the decentralized application landscape.</p> </li> <li> <p>KYC Verification: KYC helps in verifying the identities of users, ensuring that they are who they claim to be. This is essential for creating a trustworthy environment and preventing identity theft or impersonation. By verifying user identities, KYC helps maintain the security of the platform. It reduces the risk of unauthorized access and misuse of accounts by ensuring that only legitimate users have access to the services offered by Kalp Studio.</p> </li> <li> <p>Project Management: By offering a seamless experience for creating and deploying smart contracts within a project environment, Kalp Studio effectively reduces the barriers to entry for developers and project managers alike. Streamlined collaboration and easy monitoring are critical components for any successful project, and Kalp Studio\u2019s solution seems to address these needs effectively.</p> </li> <li> <p>Smart Contract Management: Kalp Studio offers a streamlined solution for smart contract management, simplifying the process of uploading, deploying, and monitoring smart contracts on the blockchain. With its user-friendly interface and intuitive features, Kalp Studio aims to empower users in their blockchain journey.</p> </li> <li> <p>Automated API Endpoint generation: Kalp Studio is a promising platform that aims to streamline smart contract deployment by offering automatic API endpoint generation upon uploading. This feature revolutionizes the integration process and enhances efficiency for developers. By simplifying the deployment process and providing intuitive features, Kalp Studio seems poised to offer a seamless experience for users interested in smart contract deployment.</p> </li> <li> <p>Wallet: Kalp Studio's wallet feature provides a convenient and comprehensive way for users to manage their blockchain assets. The ability to view balances across both testnet and mainnet, manage assets, and monitor transaction history in a single interface can greatly streamline the user experience.</p> </li> </ul>"},{"location":"Release%20notes/Release%20version%201.0.0/Release%20notes%20version%201.0.0/","title":"Release notes version 1.0.0","text":""},{"location":"Release%20notes/Release%20version%201.0.0/Release%20notes%20version%201.0.0/#kalp-studio-version-100","title":"Kalp Studio Version 1.0.0","text":""},{"location":"Release%20notes/Release%20version%201.0.0/Release%20notes%20version%201.0.0/#kalp-studio-release-notes-version-100","title":"Kalp Studio Release Notes - Version 1.0.0","text":"<p>Product Name</p> <p>Kalp Studio</p> <p>Release Version</p> <p>V 1.0.0</p> <p>Build Number</p> <p>1.10.13</p> <p>Release Date</p> <p>April 03, 2024</p> <p>This update marks the official launch of Kalp Studio (Version 1.0)! We've introduced a suite of features to streamline the user experience.</p> <p>Check out the comprehensive introduction below to unlock the Kalp Studio platform's full potential.</p> <p>\u2139\ufe0fIntroduction</p>"},{"location":"Release%20notes/Release%20version%201.0.0/Release%20notes%20version%201.0.0/#_2","title":"Release notes version 1.0.0","text":"<p>Release Features</p> <ul> <li> <p>User Management:</p> <ul> <li> <p>Onboarding: Streamlined account creation process for individual developers.</p> </li> <li> <p>Subscription Model: Platform access requires a subscription (details forthcoming).</p> </li> <li> <p>Notifications: Integration with a notification engine for receiving platform updates.</p> </li> </ul> </li> <li> <p>Security:</p> <ul> <li> <p>User Verification: Mandatory identity and KYC (Know Your Customer) verification for user accounts, including KALP ID integration.</p> <ul> <li> <p>KYC - KYC process for user verification.</p> </li> <li> <p>KALP ID - Secure and unique KALP IDs for each user with an integrated wallet for both the testnet and mainnet.</p> </li> </ul> </li> </ul> </li> <li> <p>Kalp Wallet (Testnet):</p> <ul> <li> <p>Testnet Wallets: Secure wallets for managing assets within the testnet environment.</p> </li> <li> <p>Free Testnet Credits: 100 free credits are provided for testnet exploration.</p> </li> <li> <p>Payment Integration: Functionality for adding funds to wallets through the payment engine (details forthcoming).</p> </li> </ul> </li> <li> <p>Project and Smart Contract Management:</p> <ul> <li> <p>Project Creation: Ability to create projects for organizing and managing smart contracts.</p> </li> <li> <p>Smart Contract Lifecycle: Create, deploy, and manage smart contracts on the testnet.</p> </li> <li> <p>Automatic API Endpoints: Automatic generation of API endpoints for deployed smart contracts.</p> </li> <li> <p>Transaction Monitoring: Monitor transactions associated with deployed smart contracts.</p> </li> <li> <p>Pre-built Templates: Pre-built smart contract templates for common standards (ERC-721, ERC-1155, ERC-20).</p> </li> </ul> </li> <li> <p>Transaction Monitoring: Keep track of your transactions for complete transparency.</p> </li> <li> <p>API Access &amp; Security</p> <ul> <li>API Key Generation: Functionality to generate API authentication keys to interact with deployed contracts.</li> </ul> </li> </ul>"},{"location":"Release%20notes/Release%20version%201.0.0/Release%20notes%20version%201.0.0/#support-and-feedback","title":"Support and Feedback","text":"<p>Get the most out of Kalp Studio with our library of informative Support Articles and FAQs. They'll guide you through every step, from onboarding to advanced functionalities, ensuring a smooth and successful development experience.</p> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter. Please reach out to our support team at care@kalp.studio.</p>"},{"location":"Release%20notes/Release%20version%201.1.1/Release%20notes%20version%201.1.1/","title":"\ud83c\udfc5Kalp studio version 1.1.1","text":""},{"location":"Release%20notes/Release%20version%201.1.1/Release%20notes%20version%201.1.1/#introduction","title":"Introduction","text":"<p>Having released kalp studio version 1.0 &amp; 1.1.0 successfully, we are bringing the following changes into version 1.1.1, which is patch release for kalp studio.</p>"},{"location":"Release%20notes/Release%20version%201.1.1/Release%20notes%20version%201.1.1/#kalp-studio-release-summary","title":"Kalp studio release summary","text":"<p>Product Name</p> <p>Kalp Studio</p> <p>Launch Date</p> <p>25 April, 2024</p> <p>Release Version</p> <p>V1.1.1</p> <p>Build Number</p> <p>1.11.4</p>"},{"location":"Release%20notes/Release%20version%201.1.1/Release%20notes%20version%201.1.1/#improvements","title":"Improvements","text":"<ul> <li> <p>Main Net Access Request: Users can now request access to the Main Net directly from the network selection page while deploying smart contracts.</p> </li> <li> <p>Super Admin Endpoint Updates: We've implemented minor fixes and updates across multiple endpoints for super administrators.</p> </li> <li> <p>Admin Request for Main Net via Email: To streamline access requests to kalp studio main net, users can now send an email directly to the system administrator to request access to the Main Net.</p> </li> </ul>"},{"location":"Release%20notes/Release%20version%201.1.1/Release%20notes%20version%201.1.1/#support-and-feedback","title":"Support and Feedback","text":"<p>Get the most out of Kalp Studio with our library of informative  Support Articles. They'll guide you through every step, from onboarding to advanced functionalities, ensuring a smooth and successful development experience.</p> <p>We value your feedback and encourage you to share any suggestions or report any issues you encounter, Raise a ticket at - care@kalp.studio.</p> <p>We look forward to your continued support as we work towards a stable and feature-rich release.</p> <p>Best regards, Kalp Studio</p> <p> </p>"}]}